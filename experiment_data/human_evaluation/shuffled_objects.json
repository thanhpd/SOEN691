[
    {
        "diff": "diff --git a/tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java b/tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java\nindex f8864e20a..a4527a9d9 100644\n--- a/tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java\n+++ b/tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java\n@@ -217,4 +217,15 @@ public class TestToolSyntaxErrors extends BaseTest {\n \t\t};\n \t\tsuper.testErrors(pair, true);\n \t}\n+\n+\t@Test public void testEmptyTokensBlock() {\n+\t\tString[] pair = new String[] {\n+\t\t\t\"grammar A;\\n\" +\n+\t\t\t\"tokens {}\\n\" +\n+\t\t\t\"a : 'x' ;\\n\",\n+\n+\t\t\t\"\"\n+\t\t};\n+\t\tsuper.testErrors(pair, true);\n+\t}\n }\n",
        "1": " Added test case for empty tokens block in TestToolSyntaxErrors.",
        "2": "Test parse change",
        "3": "Add additional unit test for empty tokens{} block in grammar",
        "4": "Add test for empty tokens block in TestToolSyntaxErrors class.",
        "5": "Add test for testEmptyTokensBlock ( )",
        "6": "add unit test",
        "7": " Changed TestToolSyntaxErrors.java to include a new test for empty tokens block.",
        "8": "add test for hidden tokens"
    },
    {
        "diff": "diff --git a/core/java/android/view/AccessibilityInteractionController.java b/core/java/android/view/AccessibilityInteractionController.java\nindex 1cadf69..5e05683 100644\n--- a/core/java/android/view/AccessibilityInteractionController.java\n+++ b/core/java/android/view/AccessibilityInteractionController.java\n@@ -1109,15 +1109,17 @@ final class AccessibilityInteractionController {\n                         || accessibilityViewId == providerHost.getAccessibilityViewId()) {\n                     final AccessibilityNodeInfo parent;\n                     if (virtualDescendantId != AccessibilityNodeInfo.UNDEFINED_ITEM_ID) {\n-                        parent = provider.createAccessibilityNodeInfo(\n-                                virtualDescendantId);\n+                        parent = provider.createAccessibilityNodeInfo(virtualDescendantId);\n                     } else {\n-                        parent= provider.createAccessibilityNodeInfo(\n+                        parent = provider.createAccessibilityNodeInfo(\n                                 AccessibilityNodeProvider.HOST_VIEW_ID);\n                     }\n-                    if (parent != null) {\n-                        outInfos.add(parent);\n+                    if (parent == null) {\n+                        // Couldn't obtain the parent, which means we have a\n+                        // disconnected sub-tree. Abort prefetch immediately.\n+                        return;\n                     }\n+                    outInfos.add(parent);\n                     parentNodeId = parent.getParentNodeId();\n                     accessibilityViewId = AccessibilityNodeInfo.getAccessibilityViewId(\n                             parentNodeId);\n",
        "1": "Fix Snackbar dismisal generating two notification",
        "2": " Fixes issue with AccessibilityInteractionController's creation of AccessibilityNodeInfo.",
        "3": "Discard prefetched disconnected predecessors of a virtual node .",
        "4": "Fix issue with obtaining parent node in AccessibilityInteractionController.",
        "5": "Use the same name for the TESR and renderpass changes .",
        "6": "Abort accessibility node prefetch if parent node is null",
        "7": " Added createAccessibilityNodeInfo method to AccessibilityInteractionController class",
        "8": "Fix NPE in AccessibilityInteractionController . getAccessibilityViewId ."
    },
    {
        "diff": "diff --git a/moco-core/src/main/java/com/github/dreamhead/moco/rest/RestIds.java b/moco-core/src/main/java/com/github/dreamhead/moco/rest/RestIds.java\nindex 9f840dc3..e60bce5a 100644\n--- a/moco-core/src/main/java/com/github/dreamhead/moco/rest/RestIds.java\n+++ b/moco-core/src/main/java/com/github/dreamhead/moco/rest/RestIds.java\n@@ -16,7 +16,7 @@ public class RestIds {\n     private static String checkValidUrlItem(String id, String item) {\n         checkNotNullOrEmpty(id, item + \" should not be null or empty\");\n \n-        if (id.contains(\"/\")) {\n+        if (id.contains(URLs.SEPARATOR)) {\n             throw new IllegalArgumentException(item + \" should not contain '/'\");\n         }\n \ndiff --git a/moco-core/src/main/java/com/github/dreamhead/moco/util/URLs.java b/moco-core/src/main/java/com/github/dreamhead/moco/util/URLs.java\nindex 1c778082..e49b8430 100644\n--- a/moco-core/src/main/java/com/github/dreamhead/moco/util/URLs.java\n+++ b/moco-core/src/main/java/com/github/dreamhead/moco/util/URLs.java\n@@ -11,7 +11,7 @@ import java.nio.charset.Charset;\n import static com.github.dreamhead.moco.util.Preconditions.checkNotNullOrEmpty;\n \n public final class URLs {\n-    private static final String SEPARATOR = \"/\";\n+    public static final String SEPARATOR = \"/\";\n \n     public static String resourceRoot(final String name) {\n         if (name.startsWith(SEPARATOR)) {\n",
        "1": " Fixed RestIds.java to use URLs.SEPARATOR instead of hardcoded '/' for better consistency and maintainability.",
        "2": " Added check for '/' in RestIds.java",
        "3": "changed context config implementation to join",
        "4": "updated version string",
        "5": "used seperator constant in rest ids",
        "6": "added the note about FileProvider in the server id",
        "7": "Refactor RestIds class to use the SEPARATOR constant from URLs class.",
        "8": "fixed bug in checkValidUrlItem"
    },
    {
        "diff": "diff --git a/metrics-core/src/test/java/com/yammer/metrics/reporting/tests/AbstractPollingReporterTest.java b/metrics-core/src/test/java/com/yammer/metrics/reporting/tests/AbstractPollingReporterTest.java\nindex dcfe811..47e1815 100644\n--- a/metrics-core/src/test/java/com/yammer/metrics/reporting/tests/AbstractPollingReporterTest.java\n+++ b/metrics-core/src/test/java/com/yammer/metrics/reporting/tests/AbstractPollingReporterTest.java\n@@ -51,7 +51,7 @@ public abstract class AbstractPollingReporterTest {\n             registry.add(new MetricName(Object.class, \"metric\"), metric);\n             reporter.run();\n             out.flush();\n-            final String[] lines = out.toString().split(\"\\n\");\n+            final String[] lines = out.toString().split(\"\\r?\\n|\\r\");\n             // Assertions: first check that the line count matches then compare line by line ignoring leading and trailing whitespace\n             assertEquals(\"Line count mismatch, was:\\n\" + Arrays.toString(lines) + \"\\nexpected:\\n\" + Arrays\n                     .toString(expected) + \"\\n\", expected.length,\n",
        "1": " Updated AbstractPollingReporterTest to use corrected line splitting.",
        "2": "Fix line count mismatch in AbstractPollingReporterTest.",
        "3": "Make GaugeMetric an interface .",
        "4": "Change JarFileBaseDirBuilder # getJarPath to work with Windows",
        "5": " Fixed line count and compared lines in AbstractPollingReporterTest.",
        "6": "Fixed a platform-specific regex in AbstractPollingReporterTest.",
        "7": "Fix test case",
        "8": "Fix bad exception"
    },
    {
        "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\nindex 16f8f52b3..112d2e405 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n@@ -773,7 +773,13 @@ public class POJOPropertyBuilder\n             Linked<? extends AnnotatedMember> renamed)\n     {\n         for (; node != null; node = node.next) {\n-            if (!node.isNameExplicit) {\n+            /* 30-Mar-2014, tatu: Second change should not be needed, but seems like\n+             *   removing it can cause nasty exceptions with certain version\n+             *   combinations (2.4 databind, an older module).\n+             *   So leaving it in for now until this is resolved\n+             *   (or version beyond 2.4)\n+             */\n+            if (!node.isNameExplicit || node.name == null) {\n                 continue;\n             }\n             PropertyName name = node.name;\n",
        "1": "fix failing test on Windows .",
        "2": "Fix NPE in previous change .",
        "3": "add one redundant (for new code) null check back.",
        "4": "Fix NPE in POJOPropertyBuilder",
        "5": "add put method for value type BigInteger",
        "6": " Added explicit name check for POJOPropertyBuilder.",
        "7": "Fix issue with node name in POJOPropertyBuilder",
        "8": " Added a temporary fix for a compatibility issue with older version combinations."
    },
    {
        "diff": "diff --git a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCompileAction.java b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCompileAction.java\nindex cb7243b..ce5a6d3 100644\n--- a/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCompileAction.java\n+++ b/src/main/java/com/google/devtools/build/lib/rules/proto/ProtoCompileAction.java\n@@ -190,6 +190,16 @@ public final class ProtoCompileAction {\n     }\n   }\n \n+  /**\n+   * A convenience method to register an action, if it's present.\n+   * @param protoCompileActionOptional\n+   */\n+  public static void registerAction(Optional<ProtoCompileAction> protoCompileActionOptional) {\n+    if (protoCompileActionOptional.isPresent()) {\n+      protoCompileActionOptional.get().registerAction();\n+    }\n+  }\n+\n   public ProtoCompileAction(\n       RuleContext ruleContext,\n       SupportData supportData,\n@@ -209,6 +219,14 @@ public final class ProtoCompileAction {\n     this.compilerTarget = compilerTarget;\n   }\n \n+  /**\n+   * Registers a proto compile action with the RuleContext.\n+   */\n+  public void registerAction() {\n+    SpawnAction.Builder action = createAction(protoCompileCommandLine().build());\n+    ruleContext.registerAction(action.build(ruleContext));\n+  }\n+\n   public SpawnAction.Builder createAction(CommandLine commandLine) {\n     SpawnAction.Builder builder =\n         new SpawnAction.Builder().addTransitiveInputs(supportData.getTransitiveImports());\n",
        "1": " Added convenience method to register an action (#ce5a6d3).",
        "2": "Add convenience method to register ProtoCompileAction",
        "3": " Added convenience method registerAction(Optional<ProtoCompileAction>) to register an action if it's present, and added registerAction() method to ProtoCompileAction to register the action with the RuleContext.",
        "4": "Add API to fix the crash , on Windows .",
        "5": "Add convenience methods to register a proto compile action.",
        "6": "Add a removeEventListener method .",
        "7": "Add a method for the action action .",
        "8": "Provides default implementation for AnimatorListener ."
    },
    {
        "diff": "diff --git a/library/src/main/java/com/alexvasilkov/gestures/animation/ViewPositionAnimator.java b/library/src/main/java/com/alexvasilkov/gestures/animation/ViewPositionAnimator.java\nindex c2ee3be..c7672cd 100644\n--- a/library/src/main/java/com/alexvasilkov/gestures/animation/ViewPositionAnimator.java\n+++ b/library/src/main/java/com/alexvasilkov/gestures/animation/ViewPositionAnimator.java\n@@ -580,7 +580,7 @@ public class ViewPositionAnimator {\n         fromState.set(fromX, fromY, zoom, 0f);\n \n         // 'From' clip is a 'From' view rect in coordinates of original image rect\n-        fromClip.set(fromPos.view);\n+        fromClip.set(fromPos.viewport);\n         fromClip.offset(-toPos.viewport.left, -toPos.viewport.top);\n         fromState.get(tmpMatrix);\n         tmpMatrix.invert(tmpMatrixInverse);\n",
        "1": "Take padding into account when clipping image",
        "2": " Fix issue with fromClip.set(fromPos.view) to fromClip.set(fromPos.viewport);",
        "3": "Fixed pasteboard copy constructor .",
        "4": "Fixing 'from' clip coordinates in ViewPositionAnimator.",
        "5": "Fixing the whole refresh",
        "6": "Do not stop state animation on touch",
        "7": "Fix a bug in the ViewPositionAnimator rect",
        "8": " Fixed bug in ViewPositionAnimator.java by updating fromClip.set(fromPos.view) to fromClip.set(fromPos.viewport) for correct viewport calculation."
    },
    {
        "diff": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ace/AceEditorIdleMonitor.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ace/AceEditorIdleMonitor.java\nindex 57de1185f..685837be8 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ace/AceEditorIdleMonitor.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ace/AceEditorIdleMonitor.java\n@@ -96,6 +96,9 @@ public class AceEditorIdleMonitor\n    {\n       IdleState state = new IdleState(type, mouseX_, mouseY_, modifiers_);\n       Map<HandlerRegistration, IdleCommand> commandMap = COMMAND_MAP.get(editor);\n+      if (commandMap == null)\n+         return;\n+      \n       for (Map.Entry<HandlerRegistration, IdleCommand> entry : commandMap.entrySet())\n       {\n          IdleCommand command = entry.getValue();\n",
        "1": " Added check for null command map before executing idle commands in AceEditorIdleMonitor.",
        "2": "avoid null pointer exception when trying to cast",
        "3": "avoid profiler when panes rearrange themselves",
        "4": " Added idle command for AceEditorIdleMonitor: type, mouseX, mouseY, modifiers.",
        "5": "protect against NULL command map entries",
        "6": "also cancel pending timer on detach",
        "7": "add commandMap commandMap to the list",
        "8": "Fix null pointer exception in AceEditorIdleMonitor"
    },
    {
        "diff": "diff --git a/app/PdeBase.java b/app/PdeBase.java\nindex 0eaf446..f566981 100644\n--- a/app/PdeBase.java\n+++ b/app/PdeBase.java\n@@ -347,6 +347,7 @@ public class PdeBase extends Frame implements ActionListener {\n \n     normalItem = new CheckboxMenuItem(\"Normal\");\n     rendererMenu.add(normalItem);\n+    normalItem.setState(true);\n     normalItem.addItemListener(new ItemListener() {\n \tpublic void itemStateChanged(ItemEvent e) {\n \t  openglItem.setState(false);\n",
        "1": "Set the default rendered to not be OpenGL; patch from Ben.",
        "2": " Added state to normalItem",
        "3": "use the width of the password in resetMatrix ( ) in Android Framework .",
        "4": "fixing merge problem",
        "5": "Provides default implementation for AnimatorListener .",
        "6": "Set the default state of the \"Normal\" checkbox item to true.",
        "7": " Added code to set the state of the 'Normal' checkbox to true and added an ItemListener to toggle the state of the 'Opengl' checkbox.",
        "8": "Fix bug in PdeBase"
    },
    {
        "diff": "diff --git a/samples/SupportLeanbackDemos/src/com/example/android/leanback/BrowseFragment.java b/samples/SupportLeanbackDemos/src/com/example/android/leanback/BrowseFragment.java\nindex 247af7215..ce019b389 100644\n--- a/samples/SupportLeanbackDemos/src/com/example/android/leanback/BrowseFragment.java\n+++ b/samples/SupportLeanbackDemos/src/com/example/android/leanback/BrowseFragment.java\n@@ -54,7 +54,14 @@ public class BrowseFragment extends android.support.v17.leanback.app.BrowseFragm\n     }\n \n     private void setupRows() {\n-        mRowsAdapter = new ArrayObjectAdapter(new ListRowPresenter());\n+        ListRowPresenter lrp = new ListRowPresenter();\n+        float density = getActivity().getResources().getDisplayMetrics().density;\n+        float height = 160 * density + 0.5f;\n+        float expandedHeight = height + 52 * density + 0.5f;\n+        lrp.setRowHeight((int)height);\n+        lrp.setExpandedRowHeight((int)expandedHeight);\n+\n+        mRowsAdapter = new ArrayObjectAdapter(lrp);\n \n         for (int i = 0; i < NUM_ROWS; ++i) {\n             ArrayObjectAdapter listRowAdapter = new ArrayObjectAdapter(new CardPresenter());\n",
        "1": "Fix SeipeableItemWrapperAdapter . getSwipeAmountFromAfterReaction ( )",
        "2": "Update row height in BrowseFragment",
        "3": "Fix play activity icon",
        "4": "Set row heights for browse rows.",
        "5": "Fix NPE in BrowseFragment",
        "6": "Use a single card presenter instance so views get recycled .",
        "7": " Added new RowHeight and ExpandedRowHeight properties to ListRowPresenter for improved layout management.",
        "8": " Modified BrowseFragment to use custom ListRowPresenter with dynamic row height"
    },
    {
        "diff": "diff --git a/platform/platform-impl/src/com/intellij/remotesdk/RemoteSshProcess.java b/platform/platform-impl/src/com/intellij/remotesdk/RemoteSshProcess.java\nindex 4bd80c8..9b0415c 100644\n--- a/platform/platform-impl/src/com/intellij/remotesdk/RemoteSshProcess.java\n+++ b/platform/platform-impl/src/com/intellij/remotesdk/RemoteSshProcess.java\n@@ -5,12 +5,12 @@ package com.intellij.remotesdk;\n  */\n abstract public class RemoteSshProcess extends Process {\n   /**\n-   * Makes host:remotePort server which is available on remote side available on local side as localhost:localPort.\n+   * Makes host:localPort server which is available on local side available on remote side as localhost:remotePort.\n    */\n   public abstract void addRemoteTunnel(int remotePort, String host, int localPort) throws RemoteInterpreterException;\n \n   /**\n-   * Makes host:localPort server which is available on local side available on remote side as localhost:remotePort.\n+   * Makes host:remotePort server which is available on remote side available on local side as localhost:localPort.\n    */\n   public abstract void addLocalTunnel(int localPort, String host, int remotePort) throws RemoteInterpreterException;\n \n",
        "1": " Added support for remote tunneling with host:remotePort and host:localPort servers.",
        "2": "added javadoc for RemoteSshProcess . add ( Remote | Local ) Tunnel ( )",
        "3": " Fix remote/local tunnel logic in RemoteSshProcess.",
        "4": "Fixing the documentation for adding remote and local tunnels in RemoteSshProcess.",
        "5": "update an error message",
        "6": "[ RemoteSshProcess ] Fix typo in RemoteSshProcess",
        "7": "corrected javadoc for RemoteSshProcess.add(Remote|Local)Tunnel()",
        "8": "Add description to the javadoc"
    },
    {
        "diff": "diff --git a/smack-extensions/src/main/java/org/jivesoftware/smackx/pubsub/Affiliation.java b/smack-extensions/src/main/java/org/jivesoftware/smackx/pubsub/Affiliation.java\nindex 8686dab6..818bfe92 100644\n--- a/smack-extensions/src/main/java/org/jivesoftware/smackx/pubsub/Affiliation.java\n+++ b/smack-extensions/src/main/java/org/jivesoftware/smackx/pubsub/Affiliation.java\n@@ -31,6 +31,8 @@ import org.jivesoftware.smack.packet.ExtensionElement;\n  */\n public class Affiliation implements ExtensionElement\n {\n+    public static final String ELEMENT = \"affiliation\";\n+\n \tprotected String node;\n \tprotected Type type;\n \t\n@@ -63,7 +65,7 @@ public class Affiliation implements ExtensionElement\n \t\n \tpublic String getElementName()\n \t{\n-\t\treturn \"subscription\";\n+\t\treturn ELEMENT;\n \t}\n \n \tpublic String getNamespace()\n",
        "1": "Add missing final",
        "2": "Refactor Affiliation class to use a constant for the element name.",
        "3": " Update Affiliation class to use new ELEMENT constant for element name and namespace.",
        "4": "Add window id to the LagartoException .",
        "5": " Added new element 'affiliation' to Affiliation class",
        "6": "Add MultiUserChat . toString ( )",
        "7": "Add static final to log message .",
        "8": "Fix PubSub Affiliation getElementName()"
    },
    {
        "diff": "diff --git a/hazelcast/src/main/java/com/hazelcast/transaction/TransactionalTask.java b/hazelcast/src/main/java/com/hazelcast/transaction/TransactionalTask.java\nindex 51eb805180..ad9f1d4dd5 100644\n--- a/hazelcast/src/main/java/com/hazelcast/transaction/TransactionalTask.java\n+++ b/hazelcast/src/main/java/com/hazelcast/transaction/TransactionalTask.java\n@@ -17,10 +17,26 @@\n package com.hazelcast.transaction;\n \n /**\n+ * Contains the logic that is going to be executed within a transaction. In practice the\n+ * implementation will be an anonymous inner task.\n+ *\n+ * Unlike the {@link Runnable} and {@link java.util.concurrent.Callable} the {@link TransactionalTask}\n+ * will run on the caller thread.\n+ *\n  * @author mdogan 3/6/13\n+ * @see com.hazelcast.core.HazelcastInstance#executeTransaction(TransactionalTask)\n+ * @see com.hazelcast.core.HazelcastInstance#executeTransaction(TransactionOptions, TransactionalTask)\n  */\n public interface TransactionalTask<T> {\n \n+    /**\n+     * Executes the transactional logic.\n+     *\n+     * @param context the TransactionalTaskContext that provides access to the transaction and to the\n+     *                transactional resourcs like the {@link com.hazelcast.core.TransactionalMap}.\n+     * @return the result of the task\n+     * @throws TransactionException if transaction error happens while executing this task.\n+     */\n     T execute(TransactionalTaskContext context) throws TransactionException;\n \n }\n",
        "1": "Added missing javadoc",
        "2": "added some Javadoc",
        "3": " Add TransactionalTask interface with execute method to handle transactional logic.",
        "4": " Commit message: Changed interface `TransactionalTask` to include a new method `execute(TransactionalTaskContext context)` and updated the documentation accordingly.",
        "5": "Added Javadoc comment",
        "6": "Improved javadoc TransactionalTask",
        "7": "Improved Javadoc for TcpIpConfig",
        "8": "Add TransactionalTask interface to handle transactional logic execution."
    },
    {
        "diff": "diff --git a/hellocharts-library/src/lecho/lib/hellocharts/view/AbstractChartView.java b/hellocharts-library/src/lecho/lib/hellocharts/view/AbstractChartView.java\nindex 44d0376..f0bb9af 100644\n--- a/hellocharts-library/src/lecho/lib/hellocharts/view/AbstractChartView.java\n+++ b/hellocharts-library/src/lecho/lib/hellocharts/view/AbstractChartView.java\n@@ -483,6 +483,14 @@ public abstract class AbstractChartView extends View implements Chart {\n         this.touchHandler.resetTouchHandler();\n     }\n \n+    /**\n+     * When embedded in a ViewPager, this will be called in order to know if we can scroll.\n+     * If this returns true, the ViewPager will ignore the drag so that we can scroll our content.\n+     * If this return false, the ViewPager will assume we won't be able to scroll and will consume the drag\n+     *\n+     * @param direction Amount of pixels being scrolled (x axis)\n+     * @return true if the chart can be scrolled (ie. zoomed and not against the edge of the chart)\n+     */\n     @Override\n     public boolean canScrollHorizontally(int direction) {\n         if (getZoomLevel() <= 1.0) {\n",
        "1": "Add missing comment",
        "2": "added doc on the canScrollHorizontally method",
        "3": "Copy also javadoc so they showup in shims",
        "4": " Added canScrollHorizontally method to AbstractChartView to enable scrolling in ViewPager.",
        "5": "Add some doc",
        "6": "Add docs to the warmUpLoop function",
        "7": "Add method to check if chart can be scrolled in a ViewPager.",
        "8": " Added method to determine if chart can be scrolled when embedded in ViewPager."
    },
    {
        "diff": "diff --git a/android/app-indexing/app/src/main/java/com/google/developers/app_indexing/quickstart/MainActivity.java b/android/app-indexing/app/src/main/java/com/google/developers/app_indexing/quickstart/MainActivity.java\nindex be1fcd4..c396519 100644\n--- a/android/app-indexing/app/src/main/java/com/google/developers/app_indexing/quickstart/MainActivity.java\n+++ b/android/app-indexing/app/src/main/java/com/google/developers/app_indexing/quickstart/MainActivity.java\n@@ -68,7 +68,7 @@ public class MainActivity extends Activity {\n \n             // Define a title for your current page, shown in autocompletion UI\n             final String TITLE = \"Sample Article\";\n-            final Uri APP_URI = Uri.parse(\"android-app://com.google.developers.app-indexing.quickstart/http/www.example.com/articles/\" + articleId);\n+            final Uri APP_URI = Uri.parse(\"android-app://com.google.developers.app_indexing.quickstart/http/www.example.com/articles/\" + articleId);\n             final Uri WEB_URL = Uri.parse(\"http://www.example.com/articles/\" + articleId);\n \n             // Call the App Indexing API view method\n",
        "1": "Fix typo in APP_URI",
        "2": "Fix creation of IDE files",
        "3": "remove the red slider background again",
        "4": "Fix a bug in the app",
        "5": "Fix typo in APP_URI in MainActivity.java",
        "6": " Updated App URI to use underscores instead of hyphens in package name.",
        "7": " Added Uri.parse() for APP_URI to use correct scheme in autocompletion UI",
        "8": "Renaming the port"
    },
    {
        "diff": "diff --git a/core/java/android/os/Vibrator.java b/core/java/android/os/Vibrator.java\nindex e9428f7..3769cfe 100644\n--- a/core/java/android/os/Vibrator.java\n+++ b/core/java/android/os/Vibrator.java\n@@ -22,6 +22,7 @@ import android.util.Log;\n  * Class that operates the vibrator on the device.\n  * <p>\n  * If your process exits, any vibration you started with will stop.\n+ * </p>\n  */\n public class Vibrator\n {\n@@ -56,7 +57,7 @@ public class Vibrator\n     /**\n      * Turn the vibrator on.\n      *\n-     * @param milliseconds How long to vibrate for.\n+     * @param milliseconds The number of milliseconds to vibrate.\n      */\n     public void vibrate(long milliseconds)\n     {\n@@ -75,12 +76,17 @@ public class Vibrator\n      * Vibrate with a given pattern.\n      *\n      * <p>\n-     * Pass in an array of ints that are the times at which to turn on or off\n-     * the vibrator.  The first one is how long to wait before turning it on,\n-     * and then after that it alternates.  If you want to repeat, pass the\n-     * index into the pattern at which to start the repeat.\n+     * Pass in an array of ints that are the durations for which to turn on or off\n+     * the vibrator in milliseconds.  The first value indicates the number of milliseconds\n+     * to wait before turning the vibrator on.  The next value indicates the number of milliseconds\n+     * for which to keep the vibrator on before turning it off.  Subsequent values alternate\n+     * between durations in milliseconds to turn the vibrator off or to turn the vibrator on.\n+     * </p><p>\n+     * To cause the pattern to repeat, pass the index into the pattern array at which\n+     * to start the repeat, or -1 to disable repeating.\n+     * </p>\n      *\n-     * @param pattern an array of longs of times to turn the vibrator on or off.\n+     * @param pattern an array of longs of times for which to turn the vibrator on or off.\n      * @param repeat the index into pattern at which to repeat, or -1 if\n      *        you don't want to repeat.\n      */\n",
        "1": " Changed the `vibrate()` method to accept a `long` parameter for the duration of vibration, rather than a `long` parameter for the number of milliseconds to vibrate.",
        "2": "Fixing the incorrect documentation of MRCD .",
        "3": "Fix documentation in Vibrator . Vibrator .",
        "4": "Refactor Vibrator class to improve code readability and add clarifying comments.",
        "5": "Clarify docs about event patterns .",
        "6": "Improve documentation on Vibrator.vibrate.",
        "7": " Add documentation for vibrator class",
        "8": "document remaining API parameters"
    },
    {
        "diff": "diff --git a/server/src/main/java/com/orientechnologies/orient/server/OClientConnectionManager.java b/server/src/main/java/com/orientechnologies/orient/server/OClientConnectionManager.java\nindex 9eb54cd..53ced8c 100755\n--- a/server/src/main/java/com/orientechnologies/orient/server/OClientConnectionManager.java\n+++ b/server/src/main/java/com/orientechnologies/orient/server/OClientConnectionManager.java\n@@ -330,6 +330,12 @@ public class OClientConnectionManager {\n       if (command != null && command.isIdempotent()) {\r\n         entry.getValue().protocol.interrupt();\r\n       } else {\r\n+        ONetworkProtocol protocol = entry.getValue().protocol;\r\n+        if (protocol instanceof ONetworkProtocolBinary\r\n+            && ((ONetworkProtocolBinary) protocol).getRequestType() == OChannelBinaryProtocol.REQUEST_SHUTDOWN) {\r\n+          continue;\r\n+        }\r\n+\r\n         try {\r\n           final Socket socket;\r\n           if (entry.getValue().protocol == null || entry.getValue().protocol.getChannel() == null)\r\ndiff --git a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/OBinaryNetworkProtocolAbstract.java b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/OBinaryNetworkProtocolAbstract.java\nindex efa59f9..6dcd6c3 100755\n--- a/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/OBinaryNetworkProtocolAbstract.java\n+++ b/server/src/main/java/com/orientechnologies/orient/server/network/protocol/binary/OBinaryNetworkProtocolAbstract.java\n@@ -452,4 +452,8 @@ public abstract class OBinaryNetworkProtocolAbstract extends ONetworkProtocol {\n     return realLength;\n   }\n \n+  public int getRequestType() {\n+    return requestType;\n+  }\n+\n }\n",
        "1": "Refactor OClientConnectionManager to skip shutdown requests in the protocol.",
        "2": "add getRegion to PolygonSprite",
        "3": "fixed deadlock on shutdown",
        "4": " Added method getRequestType() to ONetworkProtocolBinary, and updated OClientConnectionManager to skip shutdown requests.",
        "5": "Fixed bug in OClientConnectionManager interrupt",
        "6": "Fixed bug on share database network message",
        "7": "Fixed bug on ORecordFlat . unsetDirty ( ) .",
        "8": " Added support for shutdown request in OClientConnectionManager"
    },
    {
        "diff": "diff --git a/core/java/android/view/accessibility/AccessibilityEvent.java b/core/java/android/view/accessibility/AccessibilityEvent.java\nindex 7e2bffa..f635eee 100644\n--- a/core/java/android/view/accessibility/AccessibilityEvent.java\n+++ b/core/java/android/view/accessibility/AccessibilityEvent.java\n@@ -910,10 +910,20 @@ public final class AccessibilityEvent extends AccessibilityRecord implements Par\n \n     /**\n      * Sets the performed action that triggered this event.\n+     * <p>\n+     * Valid actions are defined in {@link AccessibilityNodeInfo}:\n+     * <ul>\n+     * <li>{@link AccessibilityNodeInfo#ACTION_ACCESSIBILITY_FOCUS}\n+     * <li>{@link AccessibilityNodeInfo#ACTION_CLEAR_ACCESSIBILITY_FOCUS}\n+     * <li>{@link AccessibilityNodeInfo#ACTION_CLEAR_FOCUS}\n+     * <li>{@link AccessibilityNodeInfo#ACTION_CLEAR_SELECTION}\n+     * <li>{@link AccessibilityNodeInfo#ACTION_CLICK}\n+     * <li>etc.\n+     * </ul>\n      *\n      * @param action The action.\n-     *\n      * @throws IllegalStateException If called from an AccessibilityService.\n+     * @see AccessibilityNodeInfo#performAction(int)\n      */\n     public void setAction(int action) {\n         enforceNotSealed();\n",
        "1": "Provide example actions in AccessibilityEvent.setAction() docs",
        "2": "DO NOT MERGE Clarifying some documentation warnings",
        "3": "Add documentation for valid actions in setAction() method in AccessibilityEvent.java",
        "4": "Add missing AccessibilityNodeInfo to AccessibilityEvent",
        "5": "Add some javadoc",
        "6": " Added validation for action parameter in AccessibilityEvent.setAction() method to ensure it's a valid action defined in AccessibilityNodeInfo.",
        "7": "Add documentation to onTouchEvent for accessibility",
        "8": " Added support for new actions in AccessibilityEvent: ACTION_ACCESSIBILITY_FOCUS, ACTION_CLEAR_ACCESSIBILITY_FOCUS, ACTION_CLEAR_FOCUS, ACTION_CLEAR_SELECTION, ACTION_CLICK, etc."
    },
    {
        "diff": "diff --git a/src/net/java/sip/communicator/impl/protocol/icq/OperationSetPersistentPresenceIcqImpl.java b/src/net/java/sip/communicator/impl/protocol/icq/OperationSetPersistentPresenceIcqImpl.java\nindex ad4593ab5..d3fd16fee 100644\n--- a/src/net/java/sip/communicator/impl/protocol/icq/OperationSetPersistentPresenceIcqImpl.java\n+++ b/src/net/java/sip/communicator/impl/protocol/icq/OperationSetPersistentPresenceIcqImpl.java\n@@ -1000,12 +1000,11 @@ public class OperationSetPersistentPresenceIcqImpl\n                     {\n                         this.status = userInfo.getIcqStatus();\n \n-                        //it is possible that the status was not included in\n-                        //the UserInfoCmd. Yet the fact that we got one\n-                        //guarantees that she is not offline. we'll therefore\n-                        //make sure it does not remain on -1.\n-                        if (this.status == -1)\n-                            status = ICQ_ONLINE_MASK;\n+                        // StatusResponseRetriever is used when query for \n+                        // user status if status is not set (is -1) \n+                        // this means user is offline.\n+                        //if (this.status == -1)\n+                        //    status = ICQ_ONLINE_MASK;\n \n                         synchronized(this){\n                             this.notifyAll();\n",
        "1": "Fix status status status .",
        "2": " Fixed bug in status handling for ICQ presence updates.",
        "3": "Refactored the code for setting user status in OperationSetPersistentPresenceIcqImpl.",
        "4": "Fix some icq status issues .",
        "5": " Modified OperationSetPersistentPresenceIcqImpl to use StatusResponseRetriever for user status query when status is not set (is -1) and user is offline.",
        "6": "DO NOT MERGE Do the restore ' s . this ' that wasn ' t be an error .",
        "7": "Fix sip tests .",
        "8": "Fix statuses for contacts in Awaiting authorization group."
    },
    {
        "diff": "diff --git a/community/server/src/functionaltest/java/org/neo4j/server/rest/BatchOperationFunctionalTest.java b/community/server/src/functionaltest/java/org/neo4j/server/rest/BatchOperationFunctionalTest.java\nindex addaca6..b0d8fcc 100644\n--- a/community/server/src/functionaltest/java/org/neo4j/server/rest/BatchOperationFunctionalTest.java\n+++ b/community/server/src/functionaltest/java/org/neo4j/server/rest/BatchOperationFunctionalTest.java\n@@ -418,8 +418,6 @@ public class BatchOperationFunctionalTest\n         }\n         largereq.append(\"{\\\"method\\\":\\\"post\\\",\\\"to\\\":\\\"/node\\\", \\\"body\\\":{ \\\"age\\\":1 } }]\");\n         \n-        System.out.println(Runtime.getRuntime().totalMemory());\n-        \n         Date d = new Date();\n         JaxRsResponse response = RestRequest.req().post(functionalTestHelper.dataUri() + \"batch\", largereq.toString());\n \n",
        "1": "Remove unnecessary out . out . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println . println",
        "2": " fixed minor issues in BatchOperationFunctionalTest.java.",
        "3": "Remove unnecessary print statement and unused variable in BatchOperationFunctionalTest",
        "4": "fix better assertion",
        "5": "Removed some System . out . println",
        "6": "Removed System . out . println ( )",
        "7": "Removed a sysout.",
        "8": " Fixed memory leak issue in BatchOperationFunctionalTest."
    },
    {
        "diff": "diff --git a/backend/derby/src/main/java/com/torodb/backend/derby/DerbyTorodbMeta.java b/backend/derby/src/main/java/com/torodb/backend/derby/DerbyTorodbMeta.java\nindex 1d5b299b..c91dfcc2 100644\n--- a/backend/derby/src/main/java/com/torodb/backend/derby/DerbyTorodbMeta.java\n+++ b/backend/derby/src/main/java/com/torodb/backend/derby/DerbyTorodbMeta.java\n@@ -27,7 +27,6 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import org.apache.derby.client.am.SqlException;\n import org.jooq.DSLContext;\n import org.jooq.DataType;\n import org.jooq.Field;\n",
        "1": "removed unused import exception",
        "2": "removed unused imports",
        "3": "Remove unused import ' com . google . common . base . Optional '",
        "4": "remove unused import",
        "5": " Added constructor for DerbyTorodbMeta with required parameters",
        "6": " Removed import statement for org.apache.derby.client.am.SqlException.",
        "7": "removed unused imports",
        "8": "Remove unnecessary import statement in DerbyTorodbMeta.java"
    },
    {
        "diff": "diff --git a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\nindex 32ed5870a0..ebe4caac06 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\n@@ -1629,8 +1629,8 @@ public abstract class ProcessorDefinition<Type extends ProcessorDefinition<Type>\n      * <a href=\"http://camel.apache.org/splitter.html\">Splitter EIP:</a>\n      * Creates a splitter allowing you split a message into a number of pieces and process them individually.\n      * <p>\n-     * This splitter responds with the latest message returned from destination\n-     * endpoint.\n+     * This splitter responds with the original input message. You can use a custom {@link AggregationStrategy} to\n+     * control what to respond from the splitter.\n      *\n      * @return the expression clause builder for the expression on which to split\n      */\n@@ -1644,8 +1644,8 @@ public abstract class ProcessorDefinition<Type extends ProcessorDefinition<Type>\n      * <a href=\"http://camel.apache.org/splitter.html\">Splitter EIP:</a>\n      * Creates a splitter allowing you split a message into a number of pieces and process them individually.\n      * <p>\n-     * This splitter responds with the latest message returned from destination\n-     * endpoint.\n+     * This splitter responds with the original input message. You can use a custom {@link AggregationStrategy} to\n+     * control what to respond from the splitter.\n      *\n      * @param expression  the expression on which to split the message\n      * @return the builder\n",
        "1": " Modified Splitter EIP to respond with original input message and added support for custom AggregationStrategy",
        "2": "Add endHystrix to java dsl",
        "3": " Fixed type safety in ProcessorDefinition.java by updating the return type of the splitter method.",
        "4": "Refactor Splitter EIP to respond with original input message and allow custom AggregationStrategy.",
        "5": "Fixed a typo in the DeadLetterChannel",
        "6": "Fixed javadoc wrong for splitter DSL",
        "7": "Fix javadoc errors",
        "8": "Fixed some typos in the JavaDoc"
    },
    {
        "diff": "diff --git a/core/java/android/view/ViewRootImpl.java b/core/java/android/view/ViewRootImpl.java\nindex 3d40b2f..247f673 100644\n--- a/core/java/android/view/ViewRootImpl.java\n+++ b/core/java/android/view/ViewRootImpl.java\n@@ -1199,13 +1199,13 @@ public final class ViewRootImpl implements ViewParent,\n             }\n         }\n \n+        // Execute enqueued actions on every traversal in case a detached view enqueued an action\n+        getRunQueue().executeActions(attachInfo.mHandler);\n+\n         boolean insetsChanged = false;\n \n         boolean layoutRequested = mLayoutRequested && !mStopped;\n         if (layoutRequested) {\n-            // Execute enqueued actions on every layout in case a view that was detached\n-            // enqueued an action after being detached\n-            getRunQueue().executeActions(attachInfo.mHandler);\n \n             final Resources res = mView.getContext().getResources();\n \n",
        "1": "Add ViewRootImpl # unhandledInputEvent API stub .",
        "2": "Execute enqueued actions on every traversal to handle detached views.",
        "3": "DO NOT MERGE Fix the ' dev ' button to show more information on the last time that caused after the Activity list and sync when a new buffer is gone .",
        "4": "Fix bug in AbsListView CHOICE_MODE_SINGLE",
        "5": "Fix crash in ViewRootImpl",
        "6": " Added executeActions() call to handle enqueued actions on detached views.",
        "7": " Added ability to execute enqueued actions on every traversal in case a detached view enqueued an action.",
        "8": "Always execute actions on the runQueue"
    },
    {
        "diff": "diff --git a/ratpack-core/src/main/java/ratpack/server/internal/BaseDirFinder.java b/ratpack-core/src/main/java/ratpack/server/internal/BaseDirFinder.java\nindex 85fe54810..00a260eab 100644\n--- a/ratpack-core/src/main/java/ratpack/server/internal/BaseDirFinder.java\n+++ b/ratpack-core/src/main/java/ratpack/server/internal/BaseDirFinder.java\n@@ -49,10 +49,10 @@ public abstract class BaseDirFinder {\n \n     @Override\n     public String toString() {\n-      return \"Result{\" +\n-        \"baseDir=\" + baseDir +\n-        \", resource=\" + resource +\n-        '}';\n+      return \"Result{\"\n+        + \"baseDir=\" + baseDir\n+        + \", resource=\" + resource\n+        + '}';\n     }\n \n     @Override\n",
        "1": " Changed method `toString()` to return a more readable result.",
        "2": "Refactor toString method in BaseDirFinder class",
        "3": " Fix BaseDirFinder toString method to use Java 8+ syntax.",
        "4": "Added Missing ` @ Override `",
        "5": "Fix a typo in CSSLayout . toString",
        "6": "appeasing the check-style gods",
        "7": "Fix toString for array creation",
        "8": "Fix a bug in BaseDirFinder . toString ( ) ."
    },
    {
        "diff": "diff --git a/core/src/main/java/io/grpc/Metadata.java b/core/src/main/java/io/grpc/Metadata.java\nindex 3446ef82..56eacefb 100644\n--- a/core/src/main/java/io/grpc/Metadata.java\n+++ b/core/src/main/java/io/grpc/Metadata.java\n@@ -211,6 +211,7 @@ public final class Metadata {\n    *\n    * @return the parsed metadata entry or null if there are none.\n    */\n+  @Nullable\n   public <T> T get(Key<T> key) {\n     for (int i = size - 1; i >= 0; i--) {\n       if (bytesEqual(key.asciiName(), name(i))) {\n",
        "1": "Add @ since tag .",
        "2": "Make sure to close InputStream even if cancelled",
        "3": "Add @Nullable annotation to the get() method in Metadata class.",
        "4": " Added new method to return nullable metadata value for key",
        "5": "Add @ Incubating and javadoc",
        "6": " Add nullability annotation for get(Key<T>) method.",
        "7": "Add missing Nullable annotation",
        "8": "Add @Nullable to Metadata#get"
    },
    {
        "diff": "diff --git a/client/src/main/java/com/metamx/druid/client/CachingClusteredClient.java b/client/src/main/java/com/metamx/druid/client/CachingClusteredClient.java\nindex bb1b18e..44c35d7 100644\n--- a/client/src/main/java/com/metamx/druid/client/CachingClusteredClient.java\n+++ b/client/src/main/java/com/metamx/druid/client/CachingClusteredClient.java\n@@ -56,6 +56,7 @@ import com.metamx.druid.query.segment.MultipleSpecificSegmentSpec;\n import com.metamx.druid.query.segment.SegmentDescriptor;\n import com.metamx.druid.result.BySegmentResultValueClass;\n import com.metamx.druid.result.Result;\n+import com.metamx.emitter.EmittingLogger;\n import org.joda.time.DateTime;\n import org.joda.time.Interval;\n \n@@ -73,7 +74,7 @@ import java.util.concurrent.Executors;\n  */\n public class CachingClusteredClient<T> implements QueryRunner<T>\n {\n-  private static final Logger log = new Logger(CachingClusteredClient.class);\n+  private static final EmittingLogger log = new EmittingLogger(CachingClusteredClient.class);\n \n   private final QueryToolChestWarehouse warehouse;\n   private final TimelineServerView serverView;\n@@ -296,7 +297,8 @@ public class CachingClusteredClient<T> implements QueryRunner<T>\n \n               final QueryRunner clientQueryable = serverView.getQueryRunner(server);\n               if (clientQueryable == null) {\n-                throw new ISE(\"WTF!? server[%s] doesn't have a client Queryable?\", server);\n+                log.makeAlert(\"WTF!? server[%s] doesn't have a client Queryable?\", server).emit();\n+                continue;\n               }\n \n               final Sequence<T> resultSeqToAdd;\n",
        "1": " Commit message: Added logging for CachingClusteredClient.",
        "2": "Add EmittingLogger to CachingClusteredClient",
        "3": "replace \" ChatSecure \" instead of \" command \"",
        "4": "Make EditorTextField font logging a little",
        "5": "add more logging",
        "6": "add client to log",
        "7": " Added EmittingLogger to CachingClusteredClient for alert emission.",
        "8": "prevent ISE at broker from completely failing to return results"
    },
    {
        "diff": "diff --git a/core/src/main/java/io/undertow/conduits/ChunkedStreamSourceConduit.java b/core/src/main/java/io/undertow/conduits/ChunkedStreamSourceConduit.java\nindex 58a2fb14d..bb2cab677 100644\n--- a/core/src/main/java/io/undertow/conduits/ChunkedStreamSourceConduit.java\n+++ b/core/src/main/java/io/undertow/conduits/ChunkedStreamSourceConduit.java\n@@ -202,7 +202,11 @@ public class ChunkedStreamSourceConduit extends AbstractStreamSourceConduit<Stre\n                             chunkRemaining <<= 4; //shift it 4 bytes and then add the next value to the end\n                             chunkRemaining += Integer.parseInt(\"\" + (char) b, 16);\n                         } else {\n-                            newVal = newVal & ~FLAG_READING_LENGTH | FLAG_READING_TILL_END_OF_LINE;\n+                            if(b == '\\n') {\n+                                newVal = newVal & ~FLAG_READING_LENGTH;\n+                            } else {\n+                                newVal = newVal & ~FLAG_READING_LENGTH | FLAG_READING_TILL_END_OF_LINE;\n+                            }\n                             break;\n                         }\n                     }\n",
        "1": "Create the return type for the response handler",
        "2": "Fix bug in ChunkedStreamSourceConduit",
        "3": "Handle chunking where the line is terminated with \\n rather than \\r\\n",
        "4": "Fix chunking problem",
        "5": "Fix issue with reading chunk length in ChunkedStreamSourceConduit.java",
        "6": "Prevent possible null pointer exception in case of children",
        "7": " Update ChunkedStreamSourceConduit to handle newline characters correctly",
        "8": " Added support for reading chunks with length greater than 2^16-1."
    },
    {
        "diff": "diff --git a/platform/platform-main/src/com/intellij/idea/MainImpl.java b/platform/platform-main/src/com/intellij/idea/MainImpl.java\nindex b285b9c..58a2baa 100644\n--- a/platform/platform-main/src/com/intellij/idea/MainImpl.java\n+++ b/platform/platform-main/src/com/intellij/idea/MainImpl.java\n@@ -11,8 +11,6 @@ import javax.swing.*;\n @SuppressWarnings({\"HardCodedStringLiteral\", \"UseOfSystemOutOrSystemErr\"})\n public class MainImpl {\n   final static String APPLICATION_NAME = \"idea\";\n-  public static int Internalize_hits;\n-  public static int Internalize_misses;\n   private static final String LOG_CATEGORY = \"#com.intellij.idea.Main\";\n   private static boolean runStartupWizard = false;\n \n@@ -52,12 +50,6 @@ public class MainImpl {\n       public void run() {\n         LOG.info(\n           \"------------------------------------------------------ IDEA SHUTDOWN ------------------------------------------------------\");\n-        LOG.info(\n-          \"-------------------------------------------------------- Statistics -------------------------------------------------------\");\n-        LOG.info(\"Internalize_hits=\" + Internalize_hits);\n-        LOG.info(\"Internalize_misses=\" + Internalize_misses);\n-        LOG.info(\n-          \"---------------------------------------------------------------------------------------------------------------------------\");\n       }\n     });\n     LOG.info(\"------------------------------------------------------ IDEA STARTED ------------------------------------------------------\");\n",
        "1": "remove unnecessary code",
        "2": "remove debug output",
        "3": "remove print . info",
        "4": "preserve headless property",
        "5": " Commit message: Fixes issue with incorrect statistics logging.",
        "6": "kill unused logging logic",
        "7": "Remove unused statistics logging in MainImpl.java",
        "8": " Remove unused variables Internalize_hits and Internalize_misses."
    },
    {
        "diff": "diff --git a/jOOQ-test/src/org/jooq/test/_/testcases/PredicateTests.java b/jOOQ-test/src/org/jooq/test/_/testcases/PredicateTests.java\nindex c3aa1120d..e9bdb514d 100644\n--- a/jOOQ-test/src/org/jooq/test/_/testcases/PredicateTests.java\n+++ b/jOOQ-test/src/org/jooq/test/_/testcases/PredicateTests.java\n@@ -478,6 +478,10 @@ extends BaseTest<A, AP, B, S, B2S, BS, L, X, DATE, BOOL, D, T, U, I, IPK, T658,\n             .from(TBook())\r\n             .where(val(2).in(TBook_ID(), TBook_AUTHOR_ID()))\r\n             .orderBy(TBook_ID()).fetch(TBook_ID()));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testQuantifiedPredicates() throws Exception {\r\n \r\n         // = { ALL | ANY | SOME }\r\n         switch (getDialect()) {\r\ndiff --git a/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java b/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\nindex 45c27418a..56cfaa626 100644\n--- a/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\n+++ b/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\n@@ -962,6 +962,11 @@ public abstract class jOOQAbstractTest<\n     }\r\n \r\n     @Test\r\n+    public void testQuantifiedPredicates() throws Exception {\r\n+        new PredicateTests(this).testQuantifiedPredicates();\r\n+    }\r\n+\r\n+    @Test\r\n     public void testIgnoreCase() throws Exception {\r\n         new PredicateTests(this).testIgnoreCase();\r\n     }\r\n",
        "1": " Add test for quantified predicates.",
        "2": "Add test for testQuantifiedPredicates test",
        "3": "Fixed test cases",
        "4": "Add testQuantifiedPredicates() method and call it in jOOQAbstractTest",
        "5": "Refactored tests for quantified predicates out into their own test case",
        "6": "Fixed test case",
        "7": "Added testQuantifiedPredicates() method to PredicateTests",
        "8": "Added some more tests which fails as of packages ."
    },
    {
        "diff": "diff --git a/clustering/singleton/src/main/java/org/jboss/as/clustering/singleton/SingletonLogger.java b/clustering/singleton/src/main/java/org/jboss/as/clustering/singleton/SingletonLogger.java\nindex f4b4fbae38..6ebd66fbc8 100644\n--- a/clustering/singleton/src/main/java/org/jboss/as/clustering/singleton/SingletonLogger.java\n+++ b/clustering/singleton/src/main/java/org/jboss/as/clustering/singleton/SingletonLogger.java\n@@ -24,6 +24,7 @@ package org.jboss.as.clustering.singleton;\n import static org.jboss.logging.Logger.Level.DEBUG;\n import static org.jboss.logging.Logger.Level.ERROR;\n import static org.jboss.logging.Logger.Level.INFO;\n+import static org.jboss.logging.Logger.Level.WARN;\n \n import org.jboss.logging.Logger;\n import org.jboss.logging.annotations.Cause;\n@@ -72,7 +73,7 @@ public interface SingletonLogger {\n     @Message(id = 10345, value = \"Failed to reach quorum of %2$d for %1$s service. No singleton master will be elected.\")\n     void quorumNotReached(String service, int quorum);\n \n-    @LogMessage(level = ERROR)\n+    @LogMessage(level = WARN)\n     @Message(id = 10346, value = \"Just reached required quorum of %2$d for %1$s service. If this cluster loses another member, no node will be chosen to provide this service.\")\n     void quorumJustReached(String service, int quorum);\n }\n",
        "1": "Fix a bug in SingletonLogger",
        "2": "Changed exception message to expect checkstyle happy",
        "3": "Fix logging level of quorum warning.",
        "4": "disable DL logging by default , since it ' s needed",
        "5": " Update logger level for Just reached required quorum message from ERROR to WARN.",
        "6": "Set log level to trace",
        "7": " Changed logging levels for certain messages.",
        "8": "Change log level from ERROR to WARN in SingletonLogger."
    },
    {
        "diff": "diff --git a/library/src/main/java/com/rockerhieu/emojicon/EmojiconGridFragment.java b/library/src/main/java/com/rockerhieu/emojicon/EmojiconGridFragment.java\nindex 5203a27..26984f8 100644\n--- a/library/src/main/java/com/rockerhieu/emojicon/EmojiconGridFragment.java\n+++ b/library/src/main/java/com/rockerhieu/emojicon/EmojiconGridFragment.java\n@@ -67,7 +67,11 @@ public class EmojiconGridFragment extends Fragment implements AdapterView.OnItem\n         super.onAttach(activity);\n         if (activity instanceof OnEmojiconClickedListener) {\n             mOnEmojiconClickedListener = (OnEmojiconClickedListener) activity;\n-        } else {\n+        } if(getParentFragment() instanceof OnEmojiconClickedListener)\n+        {\n+            mOnEmojiconClickedListener = (OnEmojiconClickedListener) getParentFragment();\n+        }\n+        else {\n             throw new IllegalArgumentException(activity + \" must implement interface \" + OnEmojiconClickedListener.class.getSimpleName());\n         }\n     }\ndiff --git a/library/src/main/java/com/rockerhieu/emojicon/EmojiconsFragment.java b/library/src/main/java/com/rockerhieu/emojicon/EmojiconsFragment.java\nindex 3b7c367..509f61d 100644\n--- a/library/src/main/java/com/rockerhieu/emojicon/EmojiconsFragment.java\n+++ b/library/src/main/java/com/rockerhieu/emojicon/EmojiconsFragment.java\n@@ -85,7 +85,11 @@ public class EmojiconsFragment extends Fragment implements ViewPager.OnPageChang\n         super.onAttach(activity);\n         if (getActivity() instanceof OnEmojiconBackspaceClickedListener) {\n             mOnEmojiconBackspaceClickedListener = (OnEmojiconBackspaceClickedListener) getActivity();\n-        } else {\n+        } if(getParentFragment() instanceof  OnEmojiconBackspaceClickedListener)\n+        {\n+            mOnEmojiconBackspaceClickedListener = (OnEmojiconBackspaceClickedListener) getParentFragment();\n+        }\n+        else {\n             throw new IllegalArgumentException(activity + \" must implement interface \" + OnEmojiconBackspaceClickedListener.class.getSimpleName());\n         }\n     }\n",
        "1": "Add missing braces , fix for URI checking",
        "2": "Reformatted the code in EmojiconGridFragment .",
        "3": "Fix NPE in EmojiconGridFragment",
        "4": " Fixes #3456: Implemented OnEmojiconClickedListener and OnEmojiconBackspaceClickedListener interfaces for proper fragment communication.",
        "5": "Refactor EmojiconGridFragment and EmojiconsFragment to use getParentFragment() for interface implementation.",
        "6": "Fixed listener interface implementation in EmojiconGridFragment and EmojiconsFragment.",
        "7": "Fixed handling of null indices .",
        "8": "Adding support for using inside a fragment as fragment children"
    },
    {
        "diff": "diff --git a/graphics/java/android/graphics/drawable/VectorDrawable.java b/graphics/java/android/graphics/drawable/VectorDrawable.java\nindex 8b0f635..daea107 100644\n--- a/graphics/java/android/graphics/drawable/VectorDrawable.java\n+++ b/graphics/java/android/graphics/drawable/VectorDrawable.java\n@@ -150,7 +150,8 @@ import java.util.Stack;\n  *\n  * <dl>\n  * <dt><code>&lt;clip-path></code></dt>\n- * <dd>Defines path to be the current clip.\n+ * <dd>Defines path to be the current clip. Note that the clip path only apply to\n+ * the current group and its children.\n  * <dl>\n  * <dt><code>android:name</code></dt>\n  * <dd>Defines the name of the clip path.</dd>\n",
        "1": "Update the javadoc for the clip path fix.",
        "2": " Added new property 'name' to VectorDrawable to define the clip path.",
        "3": "Fix documentation in drawable .",
        "4": "Add clarification about the scope of clip path in VectorDrawable",
        "5": "adding getter for lint path",
        "6": "Fix documentation error",
        "7": " Clarified clip-path documentation to mention that it only applies to the current group and its children.",
        "8": "Fix typo , alertnative - > CONCURRENT ."
    },
    {
        "diff": "diff --git a/core/src/test/java/cucumber/runtime/converters/StandardConvertersTest.java b/core/src/test/java/cucumber/runtime/converters/StandardConvertersTest.java\nindex fda23faa..ebeb2b29 100644\n--- a/core/src/test/java/cucumber/runtime/converters/StandardConvertersTest.java\n+++ b/core/src/test/java/cucumber/runtime/converters/StandardConvertersTest.java\n@@ -53,7 +53,7 @@ public class StandardConvertersTest {\n     }\n \n     private Date getDateToTest() {\n-        Calendar calendar = Calendar.getInstance();\n+        Calendar calendar = Calendar.getInstance(Locale.US);\n         calendar.set(2011, 10, 29, 0, 0, 0);\n         calendar.set(Calendar.MILLISECOND, 0);\n         return calendar.getTime();\n",
        "1": "Set debug date to stderr so that it doesn ' t always load every time .",
        "2": "Fix issue with date conversion in StandardConvertersTest",
        "3": "Fix test failure",
        "4": "Fixing unit test",
        "5": " Added support for time zone in Calendar.getInstance() in StandardConvertersTest.",
        "6": " Fixed date constructor to use Locale.US to avoid NPE when running tests.",
        "7": "Fixed TimeZone usage",
        "8": "Always explicitly use a Locale"
    },
    {
        "diff": "diff --git a/platform/platform-api/src/com/intellij/openapi/ui/ComponentWithBrowseButton.java b/platform/platform-api/src/com/intellij/openapi/ui/ComponentWithBrowseButton.java\nindex 980d826..23c916e 100644\n--- a/platform/platform-api/src/com/intellij/openapi/ui/ComponentWithBrowseButton.java\n+++ b/platform/platform-api/src/com/intellij/openapi/ui/ComponentWithBrowseButton.java\n@@ -39,6 +39,7 @@ import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n \n import javax.swing.*;\n+import javax.swing.border.EmptyBorder;\n import java.awt.*;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n@@ -71,6 +72,9 @@ public class ComponentWithBrowseButton<Comp extends JComponent> extends JPanel i\n     if (ApplicationManager.getApplication() != null) {  // avoid crash at design time\n       new MyDoClickAction(myBrowseButton).registerShortcut(myComponent);\n     }\n+    if (UIUtil.isUnderIntelliJLaF() || UIUtil.isUnderDarcula()) {\n+      setBorder(new EmptyBorder(0, 1, 0, 1));\n+    }\n   }\n \n   public final Comp getChildComponent() {\n",
        "1": " Added empty border to ComponentWithBrowseButton in UIUtil.isUnderIntelliJLaF() or UIUtil.isUnderDarcula()",
        "2": "px offset for Darcula and IntelliJ lafs",
        "3": "[ vcs - log ] Make sure we don ' t get anything if it ' s already defined",
        "4": "Add border to ComponentWithBrowseButton if using IntelliJ or Darcula LaF",
        "5": "don ' t force FixedSizeButton to occupy the whole height",
        "6": "ignore Timer while showing",
        "7": " Added border to ComponentWithBrowseButton for IntelliJ LaF and Darcula.",
        "8": "do not show crash in ComponentWithBrowseButton"
    },
    {
        "diff": "diff --git a/core/java/android/view/ViewRootImpl.java b/core/java/android/view/ViewRootImpl.java\nindex c86bc45..9461068 100644\n--- a/core/java/android/view/ViewRootImpl.java\n+++ b/core/java/android/view/ViewRootImpl.java\n@@ -1179,7 +1179,8 @@ public final class ViewRootImpl implements ViewParent,\n             mFullRedrawNeeded = true;\n             mLayoutRequested = true;\n \n-            if (lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL) {\n+            if (lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL\n+                    || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD) {\n                 // NOTE -- system code, won't try to do compat mode.\n                 Point size = new Point();\n                 mDisplay.getRealSize(size);\n@@ -1273,7 +1274,8 @@ public final class ViewRootImpl implements ViewParent,\n                         || lp.height == ViewGroup.LayoutParams.WRAP_CONTENT) {\n                     windowSizeMayChange = true;\n \n-                    if (lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL) {\n+                    if (lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL\n+                            || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD) {\n                         // NOTE -- system code, won't try to do compat mode.\n                         Point size = new Point();\n                         mDisplay.getRealSize(size);\n",
        "1": "Add support for TYPE_INPUT_METHOD in ViewRootImpl.",
        "2": "Fix bug where StackView drawables were not updated correctly",
        "3": "Revert \" Start drawing immediately \"",
        "4": "Give IMEs the entire screen to use for measuring purposes.",
        "5": " Add support for TYPE_INPUT_METHOD windows in ViewRootImpl.",
        "6": " Added support for status bar panel and input method windows with custom layout sizes.",
        "7": "Fix power image for gallery .",
        "8": "Fix crash in ViewRootImpl ."
    },
    {
        "diff": "diff --git a/app/src/processing/app/ui/Editor.java b/app/src/processing/app/ui/Editor.java\nindex 22d3bea..47081b9 100644\n--- a/app/src/processing/app/ui/Editor.java\n+++ b/app/src/processing/app/ui/Editor.java\n@@ -48,10 +48,12 @@ import java.awt.Font;\n import java.awt.Frame;\n import java.awt.Image;\n import java.awt.Point;\n+import java.awt.Window;\n import java.awt.datatransfer.*;\n import java.awt.event.*;\n import java.awt.print.*;\n import java.io.*;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Stack;\n@@ -335,6 +337,19 @@ public abstract class Editor extends JFrame implements RunnerListener {\n \n     // Add a window listener to watch for changes to the files in the sketch\n     addWindowFocusListener(new ChangeDetector(this));\n+\n+    // Try to enable fancy fullscreen on OSX\n+    if (Platform.isMacOS()) {\n+      try {\n+        Class util = Class.forName(\"com.apple.eawt.FullScreenUtilities\");\n+        Class params[] = new Class[]{Window.class, Boolean.TYPE};\n+        Method method = util.getMethod(\"setWindowCanFullScreen\", params);\n+        method.invoke(util, this, true);\n+      } catch (Exception e) {\n+        Messages.loge(\"Could not enable OSX fullscreen\", e);\n+      }\n+    }\n+\n   }\n \n \n",
        "1": "Enable fancy fullscreen on OSX",
        "2": "will defeat header",
        "3": "added a few more test",
        "4": " Enable fancy fullscreen support on OSX.",
        "5": " Commit message: Added support for fancy fullscreen on OSX.",
        "6": "Try fancy fullscreen fullscreen",
        "7": "add a bit of a sanity checker check to see if it ' s the extension directory .",
        "8": "add OSX native fullscreen"
    },
    {
        "diff": "diff --git a/realm-annotations/src/main/java/io/realm/annotations/Required.java b/realm-annotations/src/main/java/io/realm/annotations/Required.java\nindex 392a5cd..a6e500c 100644\n--- a/realm-annotations/src/main/java/io/realm/annotations/Required.java\n+++ b/realm-annotations/src/main/java/io/realm/annotations/Required.java\n@@ -15,6 +15,10 @@\n  */\n \n package io.realm.annotations;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n \n /**\n  * This annotation will mark the field as not nullable. When the field is {@link Required},\n@@ -25,6 +29,8 @@ package io.realm.annotations;\n  * Fields with primitive types and the {@link io.realm.RealmList} type are required implicitly.\n  * Fields with {@link io.realm.RealmObject} type are always nullable.\n  */\n+@Retention(RetentionPolicy.CLASS)\n+@Target(ElementType.FIELD)\n public @interface Required {\n \n }\n\\ No newline at end of file\n",
        "1": "Add missing Retention annotation",
        "2": " Added @Required annotation to mark field as not nullable",
        "3": "Add @Required annotation for marking fields as not nullable.",
        "4": "add explicit retention and target annotations to Ignore and Index annotations",
        "5": "add annotations to @Required",
        "6": " Add Required annotation to mark non-nullable fields.",
        "7": "chore ( driver - compat process ) add an @ Set . . . and to .",
        "8": "Add @ Nullable to javadoc"
    },
    {
        "diff": "diff --git a/lang-api/src/com/intellij/psi/stubs/BinaryFileStubBuilder.java b/lang-api/src/com/intellij/psi/stubs/BinaryFileStubBuilder.java\nindex 8a890f3..d6a0fa4 100644\n--- a/lang-api/src/com/intellij/psi/stubs/BinaryFileStubBuilder.java\n+++ b/lang-api/src/com/intellij/psi/stubs/BinaryFileStubBuilder.java\n@@ -4,13 +4,14 @@\n package com.intellij.psi.stubs;\n \n import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.openapi.project.Project;\n import org.jetbrains.annotations.Nullable;\n \n public interface BinaryFileStubBuilder {\n   boolean acceptsFile(final VirtualFile file);\n \n   @Nullable\n-  StubElement buildStubTree(final VirtualFile file, byte[] content);\n+  StubElement buildStubTree(final VirtualFile file, byte[] content, final Project project);\n \n   int getStubVersion();\n }\n\\ No newline at end of file\n",
        "1": "SearchEverywhere should not help tracker ( ) to work in log message",
        "2": "Remove unnecessary check",
        "3": "binary stub decompiler get project",
        "4": " Added project parameter to buildStubTree method",
        "5": "PsiFileSystemItem implements NavigatablePsiElement",
        "6": "Refactor buildStubTree method in BinaryFileStubBuilder interface",
        "7": " Adds project parameter to BinaryFileStubBuilder.buildStubTree method.",
        "8": "fixed project - > file"
    },
    {
        "diff": "diff --git a/platform/projectModel-impl/src/com/intellij/openapi/roots/impl/ProjectFileIndexImpl.java b/platform/projectModel-impl/src/com/intellij/openapi/roots/impl/ProjectFileIndexImpl.java\nindex 02f43bc..d669a2b 100644\n--- a/platform/projectModel-impl/src/com/intellij/openapi/roots/impl/ProjectFileIndexImpl.java\n+++ b/platform/projectModel-impl/src/com/intellij/openapi/roots/impl/ProjectFileIndexImpl.java\n@@ -163,7 +163,7 @@ public class ProjectFileIndexImpl extends FileIndexBase implements ProjectFileIn\n \n   @Override\n   public String getPackageNameByDirectory(@NotNull VirtualFile dir) {\n-    LOG.assertTrue(dir.isDirectory(), dir.getPresentableUrl());\n+    if (!dir.isDirectory()) LOG.error(dir.getPresentableUrl());\n     return myDirectoryIndex.getPackageName(dir);\n   }\n \n",
        "1": "Fixing a bug in ProjectFileIndexImpl.java",
        "2": "[performance] avoid calling VirtualFile.getPresentableUrl() in normal control flow",
        "3": "do not assert file in dumb mode",
        "4": " Fix bug in ProjectFileIndexImpl: handle non-directory VirtualFiles in getPackageNameByDirectory.",
        "5": " Added error handling for non-directory files in getPackageNameByDirectory() method",
        "6": "reset version string in SdkModificator only if real changes in roots were detected",
        "7": "always use SmartList",
        "8": "do not error error in FileIndexBase"
    },
    {
        "diff": "diff --git a/src/main/java/com/zaxxer/hikari/HikariConfig.java b/src/main/java/com/zaxxer/hikari/HikariConfig.java\nindex eaedb08..e6df3b0 100644\n--- a/src/main/java/com/zaxxer/hikari/HikariConfig.java\n+++ b/src/main/java/com/zaxxer/hikari/HikariConfig.java\n@@ -776,8 +776,6 @@ public class HikariConfig implements HikariConfigMXBean\n          throw new IllegalArgumentException(\"poolName cannot contain ':' when used with JMX\");\n       }\n \n-      validateNumerics();\n-\n       // treat empty property as null\n       catalog = getNullIfEmpty(catalog);\n       connectionInitSql = getNullIfEmpty(connectionInitSql);\n@@ -814,6 +812,8 @@ public class HikariConfig implements HikariConfigMXBean\n          throw new IllegalArgumentException(\"dataSource or dataSourceClassName or jdbcUrl is required.\");\n       }\n \n+      validateNumerics();\n+\n       if (LOGGER.isDebugEnabled() || unitTest) {\n          logConfiguration();\n       }\n@@ -821,11 +821,7 @@ public class HikariConfig implements HikariConfigMXBean\n \n    private void validateNumerics()\n    {\n-      if (maxLifetime < 0) {\n-         LOGGER.error(\"{} - maxLifetime cannot be negative.\", poolName);\n-         throw new IllegalArgumentException(\"maxLifetime cannot be negative.\");\n-      }\n-      else if (maxLifetime > 0 && maxLifetime < SECONDS.toMillis(30)) {\n+      if (maxLifetime != 0 && maxLifetime < SECONDS.toMillis(30)) {\n          LOGGER.warn(\"{} - maxLifetime is less than 30000ms, setting to default {}ms.\", poolName, MAX_LIFETIME);\n          maxLifetime = MAX_LIFETIME;\n       }\n",
        "1": "moved validateNumerics(), last in validation and is not throwing any",
        "2": "Remove automatic rollback",
        "3": "don ' t throw exception if the block is null .",
        "4": "Remove unnecessary error",
        "5": "Fix validation of maxLifetime in HikariConfig",
        "6": " Fixed issue with negative maxLifetime value and added validation for maximum allowed value.",
        "7": " Fixes issue #1234: Validate numerics in HikariConfig to prevent negative values and set default value for maxLifetime if less than 30 seconds.",
        "8": "Set the log level command level to where it ' s used"
    },
    {
        "diff": "diff --git a/core/java/android/widget/AbsListView.java b/core/java/android/widget/AbsListView.java\nindex 3eb0052..092f474 100644\n--- a/core/java/android/widget/AbsListView.java\n+++ b/core/java/android/widget/AbsListView.java\n@@ -6686,6 +6686,13 @@ public abstract class AbsListView extends AdapterView<ListAdapter> implements Te\n \n             scrap.dispatchStartTemporaryDetach();\n \n+            // The the accessibility state of the view may change while temporary\n+            // detached and we do not allow detached views to fire accessibility\n+            // events. So we are announcing that the subtree changed giving a chance\n+            // to clients holding on to a view in this subtree to refresh it.\n+            notifyViewAccessibilityStateChangedIfNeeded(\n+                    AccessibilityEvent.CONTENT_CHANGE_TYPE_SUBTREE);\n+\n             // Don't scrap views that have transient state.\n             final boolean scrapHasTransientState = scrap.hasTransientState();\n             if (scrapHasTransientState) {\n",
        "1": "Fix a bug where the subtree is not be used",
        "2": "Temporary detached views not properly reported to accessibility layer.",
        "3": " Notify accessibility event for subtree change when temporarily detaching views.",
        "4": "Fix accessibility issue with detached views in AbsListView.",
        "5": "Fix a bug in the name of the operations which generates no text .",
        "6": " Added notifyViewAccessibilityStateChangedIfNeeded() for temporary detach.",
        "7": "Fix crash on unpair .",
        "8": "Call dispatchFinishTemporaryDetach before returning a transient view"
    },
    {
        "diff": "diff --git a/plugins/user/src/main/java/com/navercorp/pinpoint/plugin/user/interceptor/UserIncludeMethodInterceptor.java b/plugins/user/src/main/java/com/navercorp/pinpoint/plugin/user/interceptor/UserIncludeMethodInterceptor.java\nindex 130eb3c..4544d34 100644\n--- a/plugins/user/src/main/java/com/navercorp/pinpoint/plugin/user/interceptor/UserIncludeMethodInterceptor.java\n+++ b/plugins/user/src/main/java/com/navercorp/pinpoint/plugin/user/interceptor/UserIncludeMethodInterceptor.java\n@@ -54,7 +54,7 @@ public class UserIncludeMethodInterceptor implements SimpleAroundInterceptor {\n \n         Trace trace = traceContext.currentTraceObject();\n         if (trace == null) {\n-            trace = traceContext.newTraceObject();\n+            trace = traceContext.newTraceObject(TraceType.USER);\n             if (!trace.canSampled()) {\n                 if(isDebug) {\n                     logger.debug(\"New trace and can't sampled {}\", trace);\n@@ -95,10 +95,16 @@ public class UserIncludeMethodInterceptor implements SimpleAroundInterceptor {\n             recorder.recordException(throwable);\n         } finally {\n             trace.traceBlockEnd();\n+            if(isDebug) {\n+                logger.debug(\"Closed user trace. {}\", trace.getCallStackFrameId());\n+            }\n             if(trace.getTraceType() == TraceType.USER && trace.isRootStack()) {\n+                if(isDebug) {\n+                    logger.debug(\"Closed user trace. {}\", trace);\n+                }\n                 trace.close();\n                 traceContext.removeTraceObject();\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
        "1": "fixed problem found on app testing when getting empty error message",
        "2": "Fix issue with closing user traces in UserIncludeMethodInterceptor.",
        "3": "fix bug of UserIncludePlugin.",
        "4": "do not log trace if trace is not trace",
        "5": "Added a little more robustness to installPlugin routine .",
        "6": "Fixed bug with tag deletion",
        "7": " Modified UserIncludeMethodInterceptor to create a new trace object with TraceType.USER and added debug logs for trace creation and closure.",
        "8": " Fixed bug in UserIncludeMethodInterceptor to properly handle trace recording for user traces"
    },
    {
        "diff": "diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/asm/Advice.java b/byte-buddy-dep/src/main/java/net/bytebuddy/asm/Advice.java\nindex dfb8bdf74c..b3bb09dc20 100644\n--- a/byte-buddy-dep/src/main/java/net/bytebuddy/asm/Advice.java\n+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/asm/Advice.java\n@@ -123,6 +123,12 @@ import static net.bytebuddy.matcher.ElementMatchers.named;\n  * <p>\n  * <b>Note</b>: The behavior of this component is undefined if it is supplied with invalid byte code what might result in runtime exceptions.\n  * </p>\n+ * <p>\n+ * <b>Note</b>: When using advice from a Java agent with an {@link net.bytebuddy.agent.builder.AgentBuilder}, it often makes sense to not include\n+ * any library-specific code in the agent's jar file. For being able to locate the advice code in the context of the library dependencies, Byte\n+ * Buddy offers an {@link net.bytebuddy.agent.builder.AgentBuilder.Transformer.ForAdvice} implementation that allows registering the agent's\n+ * class file locators for assembly of the advice class's description at runtime and with respect to the specific user dependencies.\n+ * </p>\n  *\n  * @see DynamicValue\n  * @see OnMethodEnter\n",
        "1": "Added information about break points when using advice component .",
        "2": " Added note about using advice from a Java agent with an AgentBuilder and registering the agent's class file locators for assembly of the advice class's description at runtime.",
        "3": "Add note about using advice with a Java agent and AgentBuilder",
        "4": "Added additional documentation.",
        "5": "Added javadoc for ExpirationManager",
        "6": "Added documentation for advice advice agent .",
        "7": " Added note about including library-specific code in agent JAR file for better advice location",
        "8": "Added javadoc note about \" id \" to \" count \""
    },
    {
        "diff": "diff --git a/plugins/editorconfig/src/org/editorconfig/plugincomponents/SettingsProviderComponent.java b/plugins/editorconfig/src/org/editorconfig/plugincomponents/SettingsProviderComponent.java\nindex 1655e5f..b2b5c90 100644\n--- a/plugins/editorconfig/src/org/editorconfig/plugincomponents/SettingsProviderComponent.java\n+++ b/plugins/editorconfig/src/org/editorconfig/plugincomponents/SettingsProviderComponent.java\n@@ -1,5 +1,6 @@\n package org.editorconfig.plugincomponents;\n \n+import com.intellij.openapi.application.PathManager;\n import com.intellij.openapi.components.ServiceManager;\n import com.intellij.openapi.module.Module;\n import com.intellij.openapi.module.ModuleManager;\n@@ -66,6 +67,7 @@ public class SettingsProviderComponent {\n             }\n           }\n         }\n+        dirs.add(PathManager.getConfigPath());\n         return new Result<Set<String>>(dirs, ProjectRootModificationTracker.getInstance(project));\n       }\n     });\n",
        "1": "Added import for com.intellij.openapi.application.PathManager in SettingsProviderComponent for better module initialization",
        "2": "ignore url parameters",
        "3": " Added import statement for com.intellij.openapi.application.PathManager and added PathManager.getConfigPath() to the list of directories returned by getSettingsDirs() to include IntelliJ IDEA configuration directory.",
        "4": "do not show empty - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
        "5": "Add PathManager.getConfigPath() to the list of directories.",
        "6": "add ide config path to root dirs",
        "7": "add line border for groovy groovy files until it ' s used in tests",
        "8": "add annotators only once per language"
    },
    {
        "diff": "diff --git a/platform/extensions/src/com/intellij/openapi/extensions/LoadingOrder.java b/platform/extensions/src/com/intellij/openapi/extensions/LoadingOrder.java\nindex 0501568..0e1efed 100644\n--- a/platform/extensions/src/com/intellij/openapi/extensions/LoadingOrder.java\n+++ b/platform/extensions/src/com/intellij/openapi/extensions/LoadingOrder.java\n@@ -15,7 +15,7 @@\n  */\n package com.intellij.openapi.extensions;\n \n-import com.intellij.openapi.util.Pair;\n+import com.intellij.openapi.util.Couple;\n import com.intellij.openapi.util.text.StringUtil;\n import com.intellij.util.containers.ContainerUtil;\n import com.intellij.util.graph.CachingSemiGraph;\n@@ -187,7 +187,7 @@ public class LoadingOrder {\n     DFSTBuilder<Orderable> builder = new DFSTBuilder<Orderable>(new GraphGenerator<Orderable>(new CachingSemiGraph<Orderable>(graph)));\n \n     if (!builder.isAcyclic()) {\n-      Pair<Orderable, Orderable> p = builder.getCircularDependency();\n+      Couple<Orderable> p = builder.getCircularDependency();\n       throw new SortingException(\"Could not satisfy sorting requirements\", p.first.getDescribingElement(), p.second.getDescribingElement());\n     }\n \n",
        "1": "make GsubProcessorFactoryTests . testCreateInvalidPattern windows friendly",
        "2": "[extensions] use Couple",
        "3": " Fix loading order sorting exception by using Couple instead of Pair.",
        "4": "prefer templates matching to build process",
        "5": " Added circular dependency handling in LoadingOrder class.",
        "6": "file based storage should have an extension",
        "7": "Refactor LoadingOrder class to use Couple instead of Pair for circular dependency detection.",
        "8": "do not show sorting requirements"
    },
    {
        "diff": "diff --git a/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java b/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\nindex 9eeee1ed..511f6f91 100644\n--- a/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\n+++ b/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\n@@ -322,9 +322,13 @@ public class HeliosSoloDeployment implements HeliosDeployment {\n     final List<String> cmd = new ArrayList<>(ImmutableList.of(\"curl\", \"-f\"));\n     switch (containerDockerHost.uri().getScheme()) {\n       case \"unix\":\n+        // A note on the URLs used below: since 7.50, curl requires a hostname when\n+        // using unix-sockets. See https://github.com/curl/curl/issues/936 and\n+        // https://github.com/docker/docker/pull/27640. The hostname we use does not matter since\n+        // curl is establishing a connection to the unix socket anyway.\n         cmd.addAll(ImmutableList.of(\n                 \"--unix-socket\", containerDockerHost.uri().getSchemeSpecificPart(),\n-                \"http:/containers/\" + probeName + \"/json\"));\n+                \"http://docker/containers/\" + probeName + \"/json\"));\n         break;\n       case \"https\":\n         cmd.addAll(ImmutableList.of(\n",
        "1": "include host when executing curl against unix socket",
        "2": "Fix broken unit test",
        "3": " Added hostname to unix-socket URLs in HeliosSoloDeployment to comply with curl requirements.",
        "4": "Fix unit test",
        "5": "Remove name method from TempJobs",
        "6": "Fix curl command to include hostname for unix-socket connections",
        "7": "Fix a typo in HeliosSoloDeployment",
        "8": " Added new command for curl to use when deploying solo containers"
    },
    {
        "diff": "diff --git a/liquibase-core/src/main/java/liquibase/integration/commandline/Main.java b/liquibase-core/src/main/java/liquibase/integration/commandline/Main.java\nindex d543e41c2..50a94e70a 100644\n--- a/liquibase-core/src/main/java/liquibase/integration/commandline/Main.java\n+++ b/liquibase-core/src/main/java/liquibase/integration/commandline/Main.java\n@@ -63,7 +63,7 @@ public class Main {\n     protected String currentDateTimeFunction;\n \n     protected String command;\n-    protected Set<String> commandParams = new HashSet<String>();\n+    protected Set<String> commandParams = new LinkedHashSet<String>();\n \n     protected String logLevel;\n     protected String logFile;\n",
        "1": " Update command line Main.java file to use LinkedHashSet for commandParams instead of HashSet.",
        "2": "Fix create parser attribute",
        "3": "Fix bug in command",
        "4": "Change commandParams HashSet to LinkedHashSet in Main.java",
        "5": "Should not use upper case table name by default",
        "6": " Changed `HashSet<String>` to `LinkedHashSet<String>` in `commandParams`.",
        "7": "[ SMALLFIX ] Removed explicit type argument in BlockMasterClient",
        "8": "use linkedset to preserve ordering of commandParams so we get the \"tag\" correctly."
    },
    {
        "diff": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/ConfigElement.java b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/ConfigElement.java\nindex f26318d..0fa4515 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/ConfigElement.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/ConfigElement.java\n@@ -136,7 +136,7 @@ public abstract class ConfigElement {\n         while (!element.isRoot() && !element.getNamespace().isRoot()) {\n             ConfigNamespace parent = element.getNamespace();\n             if (parent.isUmbrella()) {\n-                Preconditions.checkArgument(umbrellaPos>=0,\"Missing umbrella element path for element: {}\",element);\n+                Preconditions.checkArgument(umbrellaPos>=0,\"Missing umbrella element path for element: %s\",element);\n                 String umbrellaName = umbrellaElements[umbrellaPos];\n                 Preconditions.checkArgument(!StringUtils.containsAny(umbrellaName,ILLEGAL_CHARS),\"Invalid umbrella name provided: %s. Contains illegal chars\",umbrellaName);\n                 path = umbrellaName + SEPARATOR + path;\n",
        "1": "Fix precondition string in ConfigElement",
        "2": " Fixed issue with missing umbrella element path for element: %s",
        "3": " Fix config element umbrella path validation to use %s instead of {} for element name in error message.",
        "4": "Handle empty paths",
        "5": "Added a better comment",
        "6": "Fix missing umbrella element path in ConfigElement class.",
        "7": "Fix exception message",
        "8": "Fixed wrong message message for getCommandArgs class"
    },
    {
        "diff": "diff --git a/platform/platform-api/src/com/intellij/openapi/vfs/VfsUtil.java b/platform/platform-api/src/com/intellij/openapi/vfs/VfsUtil.java\nindex f244155..3cd4670 100644\n--- a/platform/platform-api/src/com/intellij/openapi/vfs/VfsUtil.java\n+++ b/platform/platform-api/src/com/intellij/openapi/vfs/VfsUtil.java\n@@ -26,11 +26,12 @@ import com.intellij.openapi.util.SystemInfo;\n import com.intellij.openapi.util.io.FileUtil;\n import com.intellij.openapi.util.text.StringUtil;\n import com.intellij.openapi.vfs.newvfs.NewVirtualFile;\n-import com.intellij.util.*;\n+import com.intellij.util.ArrayUtil;\n+import com.intellij.util.Function;\n+import com.intellij.util.Processor;\n+import com.intellij.util.SystemProperties;\n import com.intellij.util.containers.ContainerUtil;\n import com.intellij.util.containers.Convertor;\n-import com.intellij.util.io.fs.FileSystem;\n-import com.intellij.util.io.fs.IFile;\n import com.intellij.util.lang.UrlClassLoader;\n import gnu.trove.THashSet;\n import org.jetbrains.annotations.NonNls;\n@@ -288,11 +289,6 @@ public class VfsUtil extends VfsUtilCore {\n     }\n   }\n \n-  @NotNull\n-  public static IFile virtualToIFile(@NotNull VirtualFile file) {\n-    return FileSystem.FILE_SYSTEM.createFile(PathUtil.toPresentableUrl(file.getUrl()));\n-  }\n-\n   public static VirtualFile copyFileRelative(Object requestor, @NotNull VirtualFile file, @NotNull VirtualFile toDir, @NotNull String relativePath) throws IOException {\n     StringTokenizer tokenizer = new StringTokenizer(relativePath,\"/\");\n     VirtualFile curDir = toDir;\n",
        "1": "convert test execution ; remove unused imports",
        "2": " Commit message: Fixes issue with incorrect file URL creation in VfsUtil.java.",
        "3": "remove unused VfsUtil.virtualToIFile",
        "4": "[ platform - api ] use Couple",
        "5": "remove unused IFile",
        "6": "Refactor VfsUtil.java by removing unused imports and the virtualToIFile method",
        "7": "remove unused imports",
        "8": " Added imports for ArrayUtil, Function, Processor, and SystemProperties, and removed unnecessary import for Utils."
    },
    {
        "diff": "diff --git a/platform-impl/src/com/intellij/openapi/project/impl/ProjectImpl.java b/platform-impl/src/com/intellij/openapi/project/impl/ProjectImpl.java\nindex 74047bb..693a738 100644\n--- a/platform-impl/src/com/intellij/openapi/project/impl/ProjectImpl.java\n+++ b/platform-impl/src/com/intellij/openapi/project/impl/ProjectImpl.java\n@@ -28,7 +28,6 @@ import com.intellij.openapi.roots.*;\n import com.intellij.openapi.ui.ex.MessagesEx;\n import com.intellij.openapi.util.Condition;\n import com.intellij.openapi.vfs.VirtualFile;\n-import com.intellij.pom.PomModel;\n import com.intellij.psi.PsiBundle;\n import com.intellij.psi.search.GlobalSearchScope;\n import org.jetbrains.annotations.NonNls;\n@@ -60,7 +59,6 @@ public class ProjectImpl extends ComponentManagerImpl implements ProjectEx {\n   private ArrayList<String> myConversionProblemsStorage = new ArrayList<String>();\n \n   @NonNls private static final String PROJECT_LAYER = \"project-components\";\n-  private PomModel myModel = null;\n \n   public boolean myOptimiseTestLoadSpeed;\n   private volatile GlobalSearchScope myAllScope;\n@@ -392,7 +390,6 @@ public class ProjectImpl extends ComponentManagerImpl implements ProjectEx {\n     disposeComponents();\n     Extensions.disposeArea(this);\n     myManager = null;\n-    myModel = null;\n     myProjectManagerListener = null;\n     super.dispose();\n   }\n",
        "1": "delete some unused for debugging",
        "2": "remove unnecessary code",
        "3": "kill PomModel from ProjectImpl",
        "4": "Remove unused PomModel variable in ProjectImpl class",
        "5": " Remove unused import statement for PomModel.",
        "6": " Fixed issue with PomModel null pointer exception in ProjectImpl.",
        "7": "do not call processDrmInfo for upsource",
        "8": "remove obsolete implementations from DummyProject"
    },
    {
        "diff": "diff --git a/platform/platform-impl/src/com/intellij/openapi/project/DumbServiceImpl.java b/platform/platform-impl/src/com/intellij/openapi/project/DumbServiceImpl.java\nindex 39ae76b..1c050c8 100644\n--- a/platform/platform-impl/src/com/intellij/openapi/project/DumbServiceImpl.java\n+++ b/platform/platform-impl/src/com/intellij/openapi/project/DumbServiceImpl.java\n@@ -209,7 +209,7 @@ public class DumbServiceImpl extends DumbService implements Disposable, Modifica\n             LOG.info(\"Dumb mode not permitted in modal environment; see DumbService.allowStartingDumbModeInside documentation\", trace);\n           }\n           else if (permission == DumbModePermission.MAY_START_MODAL) {\n-            LOG.info(\"Starting modal dumb mode, caused by the following trace\", trace);\n+            LOG.debug(\"Starting modal dumb mode, caused by the following trace\", trace);\n           }\n \n           // always change dumb status inside write action.\n",
        "1": " Fixed issue with starting modal dumb mode in trace-based manner.",
        "2": "clarify indexing process",
        "3": "do not lose information about write action caller",
        "4": "don't pollute logs with expected modal indexing start traces",
        "5": "added debug output",
        "6": "do not log trace if trace is not trace",
        "7": " Modified logging level for starting modal dumb mode from info to debug.",
        "8": "Change log level of log message in DumbServiceImpl from info to debug"
    },
    {
        "diff": "diff --git a/src/org/opensolaris/opengrok/analysis/FileAnalyzerFactory.java b/src/org/opensolaris/opengrok/analysis/FileAnalyzerFactory.java\nindex e239c34c..b82da792 100644\n--- a/src/org/opensolaris/opengrok/analysis/FileAnalyzerFactory.java\n+++ b/src/org/opensolaris/opengrok/analysis/FileAnalyzerFactory.java\n@@ -121,7 +121,7 @@ public class FileAnalyzerFactory {\n      * Get the list of file extensions recognized by this analyzer.\n      * @return list of suffixes\n      */\n-    public final List<String> getSuffixes() {\n+    final List<String> getSuffixes() {\n         return suffixes;\n     }\n \n@@ -135,7 +135,7 @@ public class FileAnalyzerFactory {\n      *\n      * @return list of magic strings\n      */\n-    public final List<String> getMagicStrings() {\n+    final List<String> getMagicStrings() {\n         return magics;\n     }\n \n@@ -145,7 +145,7 @@ public class FileAnalyzerFactory {\n      *\n      * @return list of matchers\n      */\n-    public final List<Matcher> getMatchers() {\n+    final List<Matcher> getMatchers() {\n         return matchers;\n     }\n \n@@ -153,7 +153,7 @@ public class FileAnalyzerFactory {\n      * Get the content type (MIME type) for analyzers returned by this factory.\n      * @return content type (could be {@code null} if it is unknown)\n      */\n-    public final String getContentType() {\n+    final String getContentType() {\n         return contentType;\n     }\n \n",
        "1": " Fix grammar and add 'final' keywords to methods.",
        "2": "Make the final of the final",
        "3": "Use more restrictive access modifiers on some methods",
        "4": "Made of methods public",
        "5": " Added list of suffixes to FileAnalyzerFactory for improved analysis",
        "6": "remove unnecessary package from private method",
        "7": "Remove unused public methods",
        "8": "Refactor FileAnalyzerFactory class to use final keyword for getter methods."
    },
    {
        "diff": "diff --git a/src/net/java/sip/communicator/impl/gui/main/call/CallManager.java b/src/net/java/sip/communicator/impl/gui/main/call/CallManager.java\nindex a2d2a58a0..00cee0edf 100644\n--- a/src/net/java/sip/communicator/impl/gui/main/call/CallManager.java\n+++ b/src/net/java/sip/communicator/impl/gui/main/call/CallManager.java\n@@ -448,6 +448,10 @@ public class CallManager\n     {        \n         Call sourceCall = event.getSourceCall();\n            \n+        SoundLoader.getSound(SoundLoader.BUSY).stop();\n+        SoundLoader.stop(Constants.getDefaultIncomingCallAudio());\n+        SoundLoader.stop(Constants.getDefaultOutgoingCallAudio());\n+        \n         if(activeCalls.get(sourceCall) != null) {\n             \n             CallPanel callPanel = (CallPanel) activeCalls.get(sourceCall);\n",
        "1": " Added stop calls sound methods to CallManager class",
        "2": "allow calling from dialpad",
        "3": "stop all sounds when a call is ended",
        "4": "Fixes a bug in the contact input state and actions .",
        "5": "Stop all sounds when a call event occurs",
        "6": "set reuseaddr on tcp sockets",
        "7": "Stop sound playback when a call is answered.",
        "8": "Set stop to stop if stop is not set"
    },
    {
        "diff": "diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java\nindex 9949a97..adb11a4 100644\n--- a/services/core/java/com/android/server/am/ActivityManagerService.java\n+++ b/services/core/java/com/android/server/am/ActivityManagerService.java\n@@ -21143,7 +21143,12 @@ public final class ActivityManagerService extends ActivityManagerNative\n         public void moveToFront() {\n             checkCaller();\n             // Will bring task to front if it already has a root activity.\n-            startActivityFromRecentsInner(mTaskId, null);\n+            final long origId = Binder.clearCallingIdentity();\n+            try {\n+                startActivityFromRecentsInner(mTaskId, null);\n+            } finally {\n+                Binder.restoreCallingIdentity(origId);\n+            }\n         }\n \n         @Override\n",
        "1": " Refactor moveToFront method to use Binder.clearCallingIdentity() to restore original identity after startActivityFromRecentsInner call.",
        "2": "Fix crash in KeyguardManager . isDeviceLocked",
        "3": " Added call to startActivityFromRecentsInner to move task to front.",
        "4": "Disable app crashed dialog on headless builds",
        "5": "Fix missing clear identity in AMS.AppTaskImpl#moveToFront",
        "6": "Fix memory leak in setActionProvider ( )",
        "7": "Fix issue with starting activity from recents",
        "8": "Fix crash in ActivityManagerService activity"
    },
    {
        "diff": "diff --git a/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/column/PackagePrivateAccess.java b/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/column/PackagePrivateAccess.java\nindex 6146316..cbb0ae8 100644\n--- a/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/column/PackagePrivateAccess.java\n+++ b/dbflow-processor/src/main/java/com/raizlabs/android/dbflow/processor/definition/column/PackagePrivateAccess.java\n@@ -23,8 +23,6 @@ public class PackagePrivateAccess extends BaseColumnAccess {\n \n     public static final String classSuffix = \"Helper\";\n \n-    private final String elementPackageName;\n-\n     private final ClassName helperClassName;\n \n     private static final Map<ClassName, List<String>> helperUsedMethodMap = Maps.newHashMap();\n@@ -61,8 +59,6 @@ public class PackagePrivateAccess extends BaseColumnAccess {\n     }\n \n     public PackagePrivateAccess(String elementPackageName, String separator, String className) {\n-\n-        this.elementPackageName = elementPackageName;\n         helperClassName = ClassName.get(elementPackageName, className + separator + classSuffix);\n     }\n \n",
        "1": "remove unused code",
        "2": "removed unused var",
        "3": "don ' t hardcode whisper by default",
        "4": " Fixed package private access in PackagePrivateAccess class",
        "5": "Added support for canceling and compiled statement .",
        "6": "Remove the unused elementPackageName field from PackagePrivateAccess class.",
        "7": " Remove unnecessary variable 'elementPackageName' and constructor parameter.",
        "8": "Removed unused field"
    },
    {
        "diff": "diff --git a/src/com/facebook/buck/step/fs/CopyStep.java b/src/com/facebook/buck/step/fs/CopyStep.java\nindex c1305f9..34f5c12 100644\n--- a/src/com/facebook/buck/step/fs/CopyStep.java\n+++ b/src/com/facebook/buck/step/fs/CopyStep.java\n@@ -48,7 +48,7 @@ public class CopyStep implements Step {\n   }\n \n   @Override\n-  public String getDescription (ExecutionContext context) {\n+  public String getDescription(ExecutionContext context) {\n     ImmutableList.Builder<String> args = ImmutableList.builder();\n     args.add(\"cp\");\n     if (shouldRecurse) {\n@@ -83,7 +83,7 @@ public class CopyStep implements Step {\n       }\n       return 0;\n     } catch (IOException e) {\n-      e.printStackTrace(context.getStdErr());\n+      context.logError(e, \"Failed when trying to copy: %s\", getDescription(context));\n       return 1;\n     }\n   }\n",
        "1": "Don ' t fail build if apple test filter matches nothing",
        "2": " Fixes bug in CopyStep.java where exception was not properly logged.",
        "3": " Changed method `getDescription()` to include the file path in the command.",
        "4": "Just return an exception .",
        "5": "Improve CopyStep's error message.",
        "6": "Fix a bug where the context was not be found",
        "7": "Refactor CopyStep.java to log error message when copying fails",
        "8": "Create toString for the message ."
    },
    {
        "diff": "diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java\nindex b04b4e9..190fb41 100644\n--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java\n+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java\n@@ -180,9 +180,7 @@ public class Group extends Actor implements Cullable {\n \t/** Restores the SpriteBatch transform to what it was before {@link #applyTransform(SpriteBatch, Matrix4)}. Note this causes the\n \t * batch to be flushed. */\n \tprotected void resetTransform (SpriteBatch batch) {\n-\t\tbatch.end();\n \t\tbatch.setTransformMatrix(oldBatchTransform);\n-\t\tbatch.begin();\n \t}\n \n \t/** Children completely outside of this rectangle will not be drawn. This is only valid for use with unrotated and unscaled\n",
        "1": "[ fixed ] drawChild ( ) in Group needed a flush , otherwise scissor stuff is broken in UI .",
        "2": "Removed unused code",
        "3": "do not retain instance in main container chain .",
        "4": "should not need batch.begin() and batch.end() in resetTransform() either",
        "5": " Fixed batch flush issue in Group.java.",
        "6": "Remove unnecessary code in Group class.",
        "7": "Remove unnecessary batch .",
        "8": " Fix Group.java to properly restore transform after applying it to a SpriteBatch."
    },
    {
        "diff": "diff --git a/services/core/java/com/android/server/wm/TaskPositioner.java b/services/core/java/com/android/server/wm/TaskPositioner.java\nindex 17936a6..6e4d1c3 100644\n--- a/services/core/java/com/android/server/wm/TaskPositioner.java\n+++ b/services/core/java/com/android/server/wm/TaskPositioner.java\n@@ -54,7 +54,7 @@ class TaskPositioner implements DimLayer.DimLayerUser {\n \n     // The margin the pointer position has to be within the side of the screen to be\n     // considered at the side of the screen.\n-    private static final int SIDE_MARGIN_DIP = 5;\n+    private static final int SIDE_MARGIN_DIP = 100;\n \n     @IntDef(flag = true,\n             value = {\n",
        "1": "make fling a static inner class .",
        "2": " Increase SIDE_MARGIN_DIP from 5 to 100.",
        "3": "Increased side margin for showing docked stack dim layer.",
        "4": "Fix a bug in the TaskPositioner margin",
        "5": "Make getAvailability ( ) always return true",
        "6": "Increase the side margin for pointer position in TaskPositioner",
        "7": "Fix a minor bug in AQV .",
        "8": " Added 100 as the side margin DIP for improved pointer accuracy."
    },
    {
        "diff": "diff --git a/actors/providers/mongodb/src/main/java/com/ea/orbit/actors/providers/mongodb/MongoDBStorageProvider.java b/actors/providers/mongodb/src/main/java/com/ea/orbit/actors/providers/mongodb/MongoDBStorageProvider.java\nindex 36902718..0fa3fce1 100644\n--- a/actors/providers/mongodb/src/main/java/com/ea/orbit/actors/providers/mongodb/MongoDBStorageProvider.java\n+++ b/actors/providers/mongodb/src/main/java/com/ea/orbit/actors/providers/mongodb/MongoDBStorageProvider.java\n@@ -62,7 +62,7 @@ public class MongoDBStorageProvider implements IStorageProvider\n     private String host = \"localhost\";\n     private int port = 27017;\n     private String password;\n-    private String name;\n+    private String name = \"default\";\n \n     public void setHost(final String host)\n     {\n",
        "1": "Fixing mongo storage provider name.",
        "2": "Fix default stream name",
        "3": "Initialize ExternalComponent with empty strings .",
        "4": "Make default default \" default \"",
        "5": " Fixed naming convention for MongoDB storage provider class.",
        "6": " Set default MongoDB storage provider name to 'default'.",
        "7": "Set default value for name in MongoDBStorageProvider.",
        "8": "Modify reference to static field name ."
    },
    {
        "diff": "diff --git a/library/src/de/keyboardsurfer/android/widget/crouton/Style.java b/library/src/de/keyboardsurfer/android/widget/crouton/Style.java\nindex 93b640b..81f2039 100644\n--- a/library/src/de/keyboardsurfer/android/widget/crouton/Style.java\n+++ b/library/src/de/keyboardsurfer/android/widget/crouton/Style.java\n@@ -19,7 +19,6 @@ package de.keyboardsurfer.android.widget.crouton;\n \n import android.graphics.drawable.Drawable;\n import android.view.Gravity;\n-import android.view.ViewGroup;\n import android.view.ViewGroup.LayoutParams;\n import android.widget.ImageView;\n \n@@ -236,14 +235,14 @@ public class Style {\n \n     public Builder() {\n       durationInMilliseconds = 3000;\n-      heightInPixels = ViewGroup.LayoutParams.WRAP_CONTENT;\n       paddingInPixels = 10;\n       backgroundColorResourceId = android.R.color.holo_blue_light;\n       backgroundDrawableResourceId = 0;\n       backgroundColorValue = -1;\n       isTileEnabled = false;\n       textColorResourceId = android.R.color.white;\n-      heightInPixels = ViewGroup.LayoutParams.WRAP_CONTENT;\n+      heightInPixels = LayoutParams.WRAP_CONTENT;\n+      widthInPixels = LayoutParams.MATCH_PARENT;\n       gravity = Gravity.CENTER;\n       imageDrawable = null;\n       inAnimationResId = 0;\n",
        "1": "Fix wrong state",
        "2": "Removed the unused import",
        "3": " Added new height and width parameters to Style class.",
        "4": "removes redundant initialization within Style.Builder",
        "5": "Don ' t show the keyboard immediately in the edit people dialog , resize window when it is shown",
        "6": "Remove redundant code and fix a bug in Style.java",
        "7": " Fixes #1234: Update to use LayoutParams.WRAP_CONTENT and LayoutParams.MATCH_PARENT instead of ViewGroup.LayoutParams.WRAP_CONTENT for height and width.",
        "8": "Fix bug in Style"
    },
    {
        "diff": "diff --git a/java/java-impl/src/com/intellij/codeInspection/magicConstant/MagicConstantInspection.java b/java/java-impl/src/com/intellij/codeInspection/magicConstant/MagicConstantInspection.java\nindex 4de47ff..8fb41e8 100644\n--- a/java/java-impl/src/com/intellij/codeInspection/magicConstant/MagicConstantInspection.java\n+++ b/java/java-impl/src/com/intellij/codeInspection/magicConstant/MagicConstantInspection.java\n@@ -19,7 +19,7 @@ import com.intellij.analysis.AnalysisScope;\n import com.intellij.codeInsight.AnnotationUtil;\n import com.intellij.codeInsight.ExternalAnnotationsManager;\n import com.intellij.codeInsight.daemon.GroupNames;\n-import com.intellij.codeInspection.LocalInspectionTool;\n+import com.intellij.codeInspection.BaseJavaLocalInspectionTool;\n import com.intellij.codeInspection.LocalInspectionToolSession;\n import com.intellij.codeInspection.ProblemsHolder;\n import com.intellij.ide.util.treeView.AbstractTreeNode;\n@@ -60,7 +60,7 @@ import org.jetbrains.annotations.NotNull;\n \n import java.util.*;\n \n-public class MagicConstantInspection extends LocalInspectionTool {\n+public class MagicConstantInspection extends BaseJavaLocalInspectionTool {\n   private static final Logger LOG = Logger.getInstance(\"#com.intellij.codeInspection.magicConstant.MagicConstantInspection\");\n \n   @Nls\n@@ -184,6 +184,7 @@ public class MagicConstantInspection extends LocalInspectionTool {\n         @Override\n         public void run() {\n           ApplicationManager.getApplication().runWriteAction(new Runnable() {\n+            @Override\n             public void run() {\n               attachJdkAnnotations(finalJdk);\n             }\n",
        "1": "make AbstractBounds public",
        "2": "make MagicConstantInspection MagicConstantInspection",
        "3": "Refactor MagicConstantInspection to extend BaseJavaLocalInspectionTool",
        "4": "convert test to PyLightFixtureTestCase",
        "5": "restore dummy options fields to avoid inspection profile changes",
        "6": " Fixed issue with JDK annotations in MagicConstantInspection.",
        "7": " Update MagicConstantInspection to extend BaseJavaLocalInspectionTool instead of LocalInspectionTool.",
        "8": "make inspection suppressable"
    },
    {
        "diff": "diff --git a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\nindex 4b29617..d184aa9 100644\n--- a/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2009 the original author or authors.\n+ * Copyright 2002-2012 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -232,7 +232,7 @@ public class AnnotationConfigUtils {\n \t\t}\n \t\tif (abd instanceof AbstractBeanDefinition) {\n \t\t\tif (metadata.isAnnotated(Role.class.getName())) {\n-\t\t\t\tint role = attributesFor(metadata, Role.class).getNumber(\"value\");\n+\t\t\t\tInteger role = attributesFor(metadata, Role.class).getNumber(\"value\");\n \t\t\t\t((AbstractBeanDefinition)abd).setRole(role);\n \t\t\t}\n \t\t}\n",
        "1": "RemoteExporter uses an opaque proxy for ' serviceInterface ' exposure ( no AOP interfaces exposed )",
        "2": " Updated AnnotationConfigUtils to use Integer instead of int for role value.",
        "3": "removed jmock dep",
        "4": " Fixed license year in AnnotationConfigUtils class.",
        "5": "Fix variable name",
        "6": "Compensate for Eclipse vs Sun compiler discrepancy",
        "7": "Fix a bug in the role of the role",
        "8": "Fix role attribute type in AnnotationConfigUtils.java."
    },
    {
        "diff": "diff --git a/plugins/org.jkiss.dbeaver.core/src/org/jkiss/dbeaver/ui/editors/text/TextEditorPropertyTester.java b/plugins/org.jkiss.dbeaver.core/src/org/jkiss/dbeaver/ui/editors/text/TextEditorPropertyTester.java\nindex 34346de27..8b502687f 100644\n--- a/plugins/org.jkiss.dbeaver.core/src/org/jkiss/dbeaver/ui/editors/text/TextEditorPropertyTester.java\n+++ b/plugins/org.jkiss.dbeaver.core/src/org/jkiss/dbeaver/ui/editors/text/TextEditorPropertyTester.java\n@@ -50,7 +50,10 @@ public class TextEditorPropertyTester extends PropertyTester\n         } else if (property.equals(PROP_CAN_LOAD)) {\r\n             return !editor.isReadOnly();\r\n         } else if (property.equals(PROP_CAN_COMMENT)) {\r\n-            if (editor.getSelectionProvider().getSelection().isEmpty()) {\r\n+            if (editor.getSelectionProvider() == null ||\r\n+                editor.getSelectionProvider().getSelection() == null ||\r\n+                editor.getSelectionProvider().getSelection().isEmpty())\r\n+            {\r\n                 return false;\r\n             }\r\n             DBPCommentsManager commentsSupport = editor.getCommentsSupport();\r\ndiff --git a/plugins/org.jkiss.dbeaver.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLCatalog.java b/plugins/org.jkiss.dbeaver.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLCatalog.java\nindex d74f6b878..fcc077a31 100644\n--- a/plugins/org.jkiss.dbeaver.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLCatalog.java\n+++ b/plugins/org.jkiss.dbeaver.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLCatalog.java\n@@ -73,6 +73,7 @@ public class MySQLCatalog implements DBSCatalog, DBPSaveableObject, DBPRefreshab\n \n     public MySQLCatalog(MySQLDataSource dataSource, ResultSet dbResult)\n     {\n+        tableCache.setCaseSensitive(false);\n         this.dataSource = dataSource;\n         if (dbResult != null) {\n             this.name = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_SCHEMA_NAME);\n",
        "1": "Fix NPE in TextEditorPropertyTester",
        "2": " Fix for TextEditorPropertyTester to properly handle null selection provider and add missing case sensitivity setting for MySQLCatalog table cache.",
        "3": "Fixing null pointer exception and setting table cache case sensitivity to false in MySQLCatalog.",
        "4": " Fixed issue with empty selection in TextEditorPropertyTester (#34346de27).",
        "5": "ignore removing files",
        "6": "Text editor prop tester npe fix.",
        "7": "MySQL update update fix",
        "8": "Loading service fix"
    },
    {
        "diff": "diff --git a/common/src/main/java/io/netty/util/DefaultAttributeMap.java b/common/src/main/java/io/netty/util/DefaultAttributeMap.java\nindex c3a380d..a4b9c1b 100644\n--- a/common/src/main/java/io/netty/util/DefaultAttributeMap.java\n+++ b/common/src/main/java/io/netty/util/DefaultAttributeMap.java\n@@ -51,11 +51,13 @@ public class DefaultAttributeMap implements AttributeMap {\n \n         @Override\n         public T setIfAbsent(T value) {\n-            if (compareAndSet(null, value)) {\n-                return null;\n-            } else {\n-                return get();\n+            while (!compareAndSet(null, value)) {\n+                T old = get();\n+                if (old != null) {\n+                    return old;\n+                }\n             }\n+            return null;\n         }\n \n         @Override\n",
        "1": " Implemented a fix for a race condition in the `setIfAbsent` method of the `DefaultAttributeMap` class.",
        "2": "Fix NPE in setIfAbsent",
        "3": "Refactor DefaultAttributeMap setIfAbsent method to use a while loop for better concurrency handling.",
        "4": "Fix semantic of DefaultAttribute impl on setIfAbsent",
        "5": "Isolated unchecked cast warning from FastQueue . poll ( )",
        "6": "Optimize Monitor . cleanUpWriteBuffer ( . . . )",
        "7": " Added while loop to improve performance of setIfAbsent method",
        "8": "Fix a problem with leaking UDP sockets"
    },
    {
        "diff": "diff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/core/TestCrashWithRebuildSlow.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/core/TestCrashWithRebuildSlow.java\nindex e218d97..c589398 100644\n--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/core/TestCrashWithRebuildSlow.java\n+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/core/TestCrashWithRebuildSlow.java\n@@ -71,6 +71,8 @@ public class TestCrashWithRebuildSlow\n {\n     @Rule\n     public EphemeralFileSystemRule fs = new EphemeralFileSystemRule();\n+    // for dumping data about failing build\n+    public final @Rule TestDirectory testDir = TargetDirectory.testDirForTest( getClass() );\n \n     private static List<Long> produceNonCleanDefraggedStringStore( GraphDatabaseService db )\n     {\n@@ -144,7 +146,6 @@ public class TestCrashWithRebuildSlow\n         long snapshotChecksum = snapshot.checksum();\n         if ( snapshotChecksum != checksumBefore )\n         {\n-            TestDirectory testDir = TargetDirectory.testDirForTest( getClass() );\n             try ( OutputStream out = new FileOutputStream( testDir.file( \"snapshot.zip\" ) ) )\n             {\n                 snapshot.dumpZip( out );\n",
        "1": "Fix test for failing dumping build",
        "2": "Added a method name for the test",
        "3": "Removed debug code",
        "4": "Add rule for dumping data about failing build in TestCrashWithRebuildSlow",
        "5": " Added TestDirectory rule for dumping data about failing build.",
        "6": "Properly initializes test dir for dumps",
        "7": "Moved ObjectMapper to prevent type dependency in ' sy ' into modules '",
        "8": " Added test directory for dumping failing build data"
    },
    {
        "diff": "diff --git a/core/java/android/webkit/WebViewClassic.java b/core/java/android/webkit/WebViewClassic.java\nindex ed43043..81139f5 100644\n--- a/core/java/android/webkit/WebViewClassic.java\n+++ b/core/java/android/webkit/WebViewClassic.java\n@@ -4909,11 +4909,9 @@ public final class WebViewClassic implements WebViewProvider, WebViewProvider.Sc\n      */\n     private void getSelectionHandles(int[] handles) {\n         handles[0] = mSelectCursorBase.right;\n-        handles[1] = mSelectCursorBase.bottom -\n-                (mSelectCursorBase.height() / 4);\n+        handles[1] = mSelectCursorBase.bottom;\n         handles[2] = mSelectCursorExtent.left;\n-        handles[3] = mSelectCursorExtent.bottom\n-                - (mSelectCursorExtent.height() / 4);\n+        handles[3] = mSelectCursorExtent.bottom;\n         if (!nativeIsBaseFirst(mNativeClass)) {\n             int swap = handles[0];\n             handles[0] = handles[2];\n",
        "1": "Fix selection handles positioning in WebViewClassic.java",
        "2": "Fix a bug where the notification is not set",
        "3": " Fix selection handle calculation for WebViewClassic.",
        "4": "Move the selection handles vertically to match TextView.",
        "5": "Fix clicking on a fake element ( address , phone number , etc . . )",
        "6": "Remove unnecessary null check in FastScroller",
        "7": "Fix IDE nag found by one change",
        "8": " Fixes bug in WebViewClassic.java by adjusting selection handles for non-base first views."
    },
    {
        "diff": "diff --git a/facebook/src/com/facebook/FacebookSdk.java b/facebook/src/com/facebook/FacebookSdk.java\nindex c40171f..bc92e2d 100644\n--- a/facebook/src/com/facebook/FacebookSdk.java\n+++ b/facebook/src/com/facebook/FacebookSdk.java\n@@ -625,12 +625,10 @@ public final class FacebookSdk {\n                 } else {\n                     applicationId = appIdString;\n                 }\n-\n-                applicationId = (String) appId;\n             } else if (appId instanceof Integer) {\n                 throw new FacebookException(\n                         \"App Ids cannot be directly placed in the manfiest.\" +\n-                        \"They mut be prexied by 'fb' or be placed in the string resource file.\");\n+                                \"They must be prefixed by 'fb' or be placed in the string resource file.\");\n             }\n         }\n \n",
        "1": "Remove redundant comments .",
        "2": "reflect preprocess / compile in rule type",
        "3": "Fix typo in error message in FacebookSdk.java",
        "4": " Fix FacebookSdk to handle app Ids correctly",
        "5": "fixed bug in rewriting applicationId with old value",
        "6": "Remove an extra allocation .",
        "7": "Fix typo in FacebookSdk",
        "8": " Fixed issue with incorrect app ID format in FacebookSdk class."
    },
    {
        "diff": "diff --git a/Application/LinkBubble/src/main/java/com/linkbubble/webrender/WebRenderer.java b/Application/LinkBubble/src/main/java/com/linkbubble/webrender/WebRenderer.java\nindex 0c4e30e0..27822119 100644\n--- a/Application/LinkBubble/src/main/java/com/linkbubble/webrender/WebRenderer.java\n+++ b/Application/LinkBubble/src/main/java/com/linkbubble/webrender/WebRenderer.java\n@@ -57,10 +57,12 @@ public abstract class WebRenderer {\n         throw new IllegalArgumentException(\"Invalid type\");\n     }\n \n+    protected Context mContext;\n     protected URL mUrl;\n \n     WebRenderer(Context context, Controller controller, View webRendererPlaceholder) {\n         super();\n+        mContext = context;\n     }\n \n     public abstract void destroy();\ndiff --git a/Application/LinkBubble/src/main/java/com/linkbubble/webrender/WebViewRenderer.java b/Application/LinkBubble/src/main/java/com/linkbubble/webrender/WebViewRenderer.java\nindex 20d89834..3b0e4784 100644\n--- a/Application/LinkBubble/src/main/java/com/linkbubble/webrender/WebViewRenderer.java\n+++ b/Application/LinkBubble/src/main/java/com/linkbubble/webrender/WebViewRenderer.java\n@@ -38,7 +38,6 @@ class WebViewRenderer extends WebRenderer {\n \n     private String TAG;\n     private Handler mHandler;\n-    private Context mContext;\n     private WebView mWebView;\n     private View mTouchInterceptorView;\n     private long mLastWebViewTouchUpTime = -1;\n",
        "1": "Add mContext field to WebRenderer class and remove mContext field from WebViewRenderer class",
        "2": "Move mController into WebRenderer",
        "3": " Added context variable for WebViewRenderer",
        "4": "Make mContext . mContext ( )",
        "5": " Add field 'mContext' to WebRenderer and WebViewRenderer.",
        "6": "Set dismiss to false for testing",
        "7": "Move mContext into WebRenderer",
        "8": "Fix swipeToRefreshHelper access for ThemeSearchFragment"
    },
    {
        "diff": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\nindex c52ecd1312..07c4f5b3dc 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/CacheStatisticsImpl.java\n@@ -176,11 +176,11 @@ public class CacheStatisticsImpl\n     @Override\n     public float getAveragePutTime() {\n         final long cachePutTimeTakenNanos = getCachePutTimeTakenNanos();\n-        final long cacheGets = getCacheGets();\n-        if (cachePutTimeTakenNanos == 0 || cacheGets == 0) {\n+        final long cachePuts = getCachePuts();\n+        if (cachePutTimeTakenNanos == 0 || cachePuts == 0) {\n             return 0;\n         }\n-        return ((1f * cachePutTimeTakenNanos) / cacheGets) / NANOSECONDS_IN_A_MICROSECOND;\n+        return ((1f * cachePutTimeTakenNanos) / cachePuts) / NANOSECONDS_IN_A_MICROSECOND;\n     }\n \n     /**\n",
        "1": "Fix isComplete method",
        "2": "Cache avg put time calculation",
        "3": "Removed more calls to scratchFS ( ) , fixes .",
        "4": "fixed findbugs error at CachePartitionEventData",
        "5": "Fix bug in CacheStatisticsImpl",
        "6": " Fixes issue #1234: Corrected calculation of average put time to use 'cachePuts' instead of 'cacheGets' to avoid division by zero.",
        "7": "Refactor average put time calculation in CacheStatisticsImpl",
        "8": " Fixed calculation of average put time to avoid division by zero."
    },
    {
        "diff": "diff --git a/src/main/java/tachyon/DataServerMessage.java b/src/main/java/tachyon/DataServerMessage.java\nindex e5adbd2..0c54215 100644\n--- a/src/main/java/tachyon/DataServerMessage.java\n+++ b/src/main/java/tachyon/DataServerMessage.java\n@@ -94,9 +94,13 @@ public class DataServerMessage {\n   public void close() {\n     if (mMsgType == DATA_SERVER_RESPONSE_MESSAGE) {\n       try {\n-        mFile.close();\n+        if (mFile != null) {\n+          mFile.close();\n+        }\n       } catch (IOException e) {\n         LOG.error(mFile + \" \" + e.getMessage());\n+      } catch (Exception e) {\n+        LOG.error(mFile + \" \" + e.getMessage());\n       }\n     }\n   }\n",
        "1": "Remote read no file.",
        "2": " Fix DataServerMessage.java close() method to properly close file.",
        "3": " Fixed exception handling in DataServerMessage.java",
        "4": "do not throw an exception if the user tries to be specified .",
        "5": "Fix potential NullPointerException in DataServerMessage close() method",
        "6": "Fix NPE in close",
        "7": "Release all resources from disconnect regardless of IOException",
        "8": "Catch IAE when trying to close the stack - specific protocol class ."
    },
    {
        "diff": "diff --git a/pinot-controller/src/test/java/com/linkedin/pinot/controller/api/restlet/resources/TableSizeReaderTest.java b/pinot-controller/src/test/java/com/linkedin/pinot/controller/api/restlet/resources/TableSizeReaderTest.java\nindex aea274d6e..9ef83d200 100644\n--- a/pinot-controller/src/test/java/com/linkedin/pinot/controller/api/restlet/resources/TableSizeReaderTest.java\n+++ b/pinot-controller/src/test/java/com/linkedin/pinot/controller/api/restlet/resources/TableSizeReaderTest.java\n@@ -222,7 +222,7 @@ public class TableSizeReaderTest {\n   @Test\n   public void testNoSuchTable() {\n     TableSizeReader reader = new TableSizeReader(executor, connectionManager, helix);\n-    Assert.assertNull(reader.getTableSizeDetails(\"mytable\", 1000));\n+    Assert.assertNull(reader.getTableSizeDetails(\"mytable\", 5000));\n   }\n \n   private TableSizeReader.TableSizeDetails testRunner(final String[] servers, String table) {\n@@ -245,7 +245,7 @@ public class TableSizeReaderTest {\n         });\n \n     TableSizeReader reader = new TableSizeReader(executor, connectionManager, helix);\n-    return reader.getTableSizeDetails(table, 1000);\n+    return reader.getTableSizeDetails(table, timeoutMsec);\n   }\n \n   private Map<String, List<String>> segmentToServers(final String...servers) {\n",
        "1": "Update timeout value in TableSizeReaderTest",
        "2": "[ SMALLFIX ] Fixed style issues",
        "3": "Make query console ( / pql ? )",
        "4": " Updated TableSizeReaderTest to use variable timeoutMsec instead of hardcoded 1000.",
        "5": "Increase the timeout for TableSizeReaderTest.",
        "6": " Fixed timeout for getTableSizeDetails() in TableSizeReaderTest.",
        "7": "Fix test in TableSizeReaderTest",
        "8": "use correct exception in isFinal ."
    },
    {
        "diff": "diff --git a/platform/vcs-impl/src/com/intellij/openapi/vcs/configurable/VcsDirectoryConfigurationPanel.java b/platform/vcs-impl/src/com/intellij/openapi/vcs/configurable/VcsDirectoryConfigurationPanel.java\nindex bc9d11f..f88eec6 100644\n--- a/platform/vcs-impl/src/com/intellij/openapi/vcs/configurable/VcsDirectoryConfigurationPanel.java\n+++ b/platform/vcs-impl/src/com/intellij/openapi/vcs/configurable/VcsDirectoryConfigurationPanel.java\n@@ -492,7 +492,9 @@ public class VcsDirectoryConfigurationPanel extends JPanel implements Configurab\n     Collection<MapInfo> removedValidRoots = ContainerUtil.mapNotNull(selection, new Function<MapInfo, MapInfo>() {\n       @Override\n       public MapInfo fun(MapInfo info) {\n-        return info.type == MapInfo.Type.NORMAL ? MapInfo.unregistered(info.mapping.getDirectory(), info.mapping.getVcs()) : null;\n+        return info.type == MapInfo.Type.NORMAL && myCheckers.get(info.mapping.getVcs()) != null ?\n+               MapInfo.unregistered(info.mapping.getDirectory(), info.mapping.getVcs()) :\n+               null;\n       }\n     });\n     mappings.addAll(removedValidRoots);\n",
        "1": "notify the revision from the file and use",
        "2": " Changed how unregistered mappings are handled in VcsDirectoryConfigurationPanel.",
        "3": "[vcs] Don't treat a root as unregistered if its VCS doesn't support root checking.",
        "4": " Added check for VcsDirectoryMappingChecker when removing valid roots.",
        "5": "Fix bug in VcsDirectoryConfigurationPanel",
        "6": "do not show empty - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
        "7": "[ vcs - log ] use correct generic",
        "8": "[ vcs ] remove unused methods , cleanup"
    },
    {
        "diff": "diff --git a/jetty-client/src/test/java/org/eclipse/jetty/client/HttpClientTest.java b/jetty-client/src/test/java/org/eclipse/jetty/client/HttpClientTest.java\nindex 977a460b6b..662b32a34e 100644\n--- a/jetty-client/src/test/java/org/eclipse/jetty/client/HttpClientTest.java\n+++ b/jetty-client/src/test/java/org/eclipse/jetty/client/HttpClientTest.java\n@@ -881,9 +881,16 @@ public class HttpClientTest extends AbstractHttpClientServerTest\n     @Test\n     public void testConnectHostWithMultipleAddresses() throws Exception\n     {\n-        // Likely that the DNS for google.com returns multiple addresses.\n         String host = \"google.com\";\n-        Assume.assumeTrue(InetAddress.getAllByName(host).length > 1);\n+        try\n+        {\n+            // Likely that the DNS for google.com returns multiple addresses.\n+            Assume.assumeTrue(InetAddress.getAllByName(host).length > 1);\n+        }\n+        catch (Throwable x)\n+        {\n+            Assume.assumeNoException(x);\n+        }\n \n         startClient();\n         client.setFollowRedirects(false); // Avoid redirects from 80 to 443.\n",
        "1": "Updated test to run even when not connected to the network.",
        "2": "Added assumption to make test more robust .",
        "3": "added additional check if debug level is enabled",
        "4": " Added a try-catch block to handle exceptions when testing connectivity to hosts with multiple addresses.",
        "5": "Fix test failure",
        "6": "Fix testConnectHostWithMultipleAddresses to handle exception when DNS lookup fails.",
        "7": " Changed how DNS resolution for google.com is handled in the `HttpClientTest` class to assume that there are multiple addresses returned.",
        "8": "Added a test that verifes that only works on Windows ."
    },
    {
        "diff": "diff --git a/src/tsd/GraphHandler.java b/src/tsd/GraphHandler.java\nindex 3cd53fe..d738045 100644\n--- a/src/tsd/GraphHandler.java\n+++ b/src/tsd/GraphHandler.java\n@@ -61,9 +61,9 @@ final class GraphHandler implements HttpRpc {\n   private static final Logger LOG =\n     LoggerFactory.getLogger(GraphHandler.class);\n \n-  private static final boolean IS_WINDOWS = \n-    System.getProperty(\"os.name\").contains(\"Windows\");\n-  \n+  private static final boolean IS_WINDOWS =\n+    System.getProperty(\"os.name\", \"\").contains(\"Windows\");\n+\n   /** Number of times we had to do all the work up to running Gnuplot. */\n   private static final AtomicInteger graphs_generated\n     = new AtomicInteger();\n",
        "1": " Changed how Windows detection is handled in GraphHandler.java.",
        "2": "Refactor GraphHandler class to improve readability and maintainability.",
        "3": "Fix a typo in GraphHandler .",
        "4": "Provide a default value for os.name to avoid NPE in some cases.",
        "5": " Update GraphHandler.java to use System.getProperty('os.name', '') instead of System.getProperty('os.name') to fix issue with Windows detection.",
        "6": "Remove an errant code from linechart .",
        "7": "Fix the knob to enable / disable TSD compactions .",
        "8": "use the correct log level to let test server cluster has wrong config values ."
    },
    {
        "diff": "diff --git a/OsmAnd-java/src/net/osmand/osm/edit/OsmMapUtils.java b/OsmAnd-java/src/net/osmand/osm/edit/OsmMapUtils.java\nindex 1b5a7c0883..feca02e3cf 100644\n--- a/OsmAnd-java/src/net/osmand/osm/edit/OsmMapUtils.java\n+++ b/OsmAnd-java/src/net/osmand/osm/edit/OsmMapUtils.java\n@@ -184,8 +184,9 @@ public class OsmMapUtils {\n \t\t}\n \t\tif (cycle) {\n \t\t\tresult.add(n.get(first));\n-\t\t\tkept[first] = true;\n \t\t}\n+\t\tkept[first] = true;\n+\t\t\n \t\treturn kept;\n \t}\n \ndiff --git a/OsmAnd/src/net/osmand/plus/routing/RouteProvider.java b/OsmAnd/src/net/osmand/plus/routing/RouteProvider.java\nindex 8e8e04a5be..bff09897de 100644\n--- a/OsmAnd/src/net/osmand/plus/routing/RouteProvider.java\n+++ b/OsmAnd/src/net/osmand/plus/routing/RouteProvider.java\n@@ -421,8 +421,8 @@ public class RouteProvider {\n \t\t\t\tmemoryLimit, specialization);\n \t\tRoutingContext ctx = router.buildRoutingContext(cf, params.ctx.getInternalAPI().getNativeLibrary(), files,\n \t\t\t\t// TODO introduce\n-\t\t\t\t/*params.mode.isDerivedRoutingFrom(ApplicationMode.CAR) ?\n-\t\t\t\tRouteCalculationMode.COMPLEX : */RouteCalculationMode.NORMAL);\n+\t\t\t\tparams.mode.isDerivedRoutingFrom(ApplicationMode.CAR) ?\n+\t\t\t\tRouteCalculationMode.COMPLEX : RouteCalculationMode.NORMAL);\n \t\tctx.calculationProgress = params.calculationProgress;\n \t\tif(params.previousToRecalculate != null) {\n \t\t\tctx.previouslyCalculatedRoute = params.previousToRecalculate.getOriginalRoute();\n",
        "1": "Fix bug in OsmMapUtils",
        "2": "Test new routing provider (alpha routing should work with java for quite long distance).",
        "3": " Fixes #1234: Introduce new RouteCalculationMode.COMPLEX for car routing.",
        "4": "Fix grouper - > binding crash",
        "5": "Fix code changes in OsmMapUtils and RouteProvider classes.",
        "6": "Fix map rendering",
        "7": "Fix left side turn issue",
        "8": "Fixed bug in OsmMapUtils.java to keep nodes in the cycle (#1b5a7c0883)."
    },
    {
        "diff": "diff --git a/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java b/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java\nindex 58ceb838b..c9bb2968a 100644\n--- a/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java\n+++ b/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java\n@@ -30,7 +30,6 @@ import javax.servlet.http.HttpServletResponse;\n import org.apache.catalina.LifecycleException;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.deploy.LoginConfig;\n-import org.apache.catalina.startup.Bootstrap;\n import org.apache.catalina.util.Base64;\n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n@@ -86,7 +85,7 @@ public class SpnegoAuthenticator extends AuthenticatorBase {\n         String krb5Conf = System.getProperty(Constants.KRB5_CONF_PROPERTY);\n         if (krb5Conf == null) {\n             // System property not set, use the Tomcat default\n-            File krb5ConfFile = new File(Bootstrap.getCatalinaBase(),\n+            File krb5ConfFile = new File(container.getCatalinaBase(),\n                     Constants.DEFAULT_KRB5_CONF);\n             System.setProperty(Constants.KRB5_CONF_PROPERTY,\n                     krb5ConfFile.getAbsolutePath());\n@@ -96,7 +95,7 @@ public class SpnegoAuthenticator extends AuthenticatorBase {\n         String jaasConf = System.getProperty(Constants.JAAS_CONF_PROPERTY);\n         if (jaasConf == null) {\n             // System property not set, use the Tomcat default\n-            File jaasConfFile = new File(Bootstrap.getCatalinaBase(),\n+            File jaasConfFile = new File(container.getCatalinaBase(),\n                     Constants.DEFAULT_JAAS_CONF);\n             System.setProperty(Constants.JAAS_CONF_PROPERTY,\n                     jaasConfFile.getAbsolutePath());\n",
        "1": " Commit message: Fixes #1234567890: Improves SpnegoAuthenticator.java by updating Krb5 and JAAS configuration properties.",
        "2": " Update import statements and file paths to use container.getCatalinaBase() instead of Bootstrap.getCatalinaBase().",
        "3": "Remove dependency on Bootstrap",
        "4": "Turn off the extra headers for the session .",
        "5": "Refactor SpnegoAuthenticator to use container.getCatalinaBase() instead of Bootstrap.getCatalinaBase() for retrieving default configuration files.",
        "6": "Remove unnecessary property from the Tomcat",
        "7": "Fix directory name for indexation",
        "8": "After deprecating the Embedded class , move the package access / protection initialisation to Catalina"
    },
    {
        "diff": "diff --git a/OsmAnd/src/net/osmand/plus/views/OsmandMapTileView.java b/OsmAnd/src/net/osmand/plus/views/OsmandMapTileView.java\nindex 1aa0510742..ba4a4e555a 100644\n--- a/OsmAnd/src/net/osmand/plus/views/OsmandMapTileView.java\n+++ b/OsmAnd/src/net/osmand/plus/views/OsmandMapTileView.java\n@@ -857,11 +857,11 @@ public class OsmandMapTileView implements IMapDownloaderCallback {\n \t\t}\n \t\tfinal boolean isMultiTouch = multiTouchSupport.onTouchEvent(event);\n \t\tdoubleTapScaleDetector.onTouchEvent(event);\n-\t\t//if (!isMultiTouch && !doubleTapScaleDetector.isInZoomMode()) {\n+\t\tif (!isMultiTouch && !doubleTapScaleDetector.isInZoomMode()) {\n \t\t\tfor (int i = layers.size() - 1; i >= 0; i--) {\n \t\t\t\tlayers.get(i).onTouchEvent(event, getCurrentRotatedTileBox());\n \t\t\t}\n-\t\t//}\n+\t\t}\n \t\tgestureDetector.onTouchEvent(event);\n \t\treturn true;\n \t}\n",
        "1": "leave filter in place",
        "2": "leave out wasMultiTouchinZoomMode again for now",
        "3": "Fix city search",
        "4": " Fix gesture detection for zooming and double-tapping.",
        "5": "Fix bug in views",
        "6": "Enable touch event handling for map layers when not in zoom mode.",
        "7": " Changed how the `OsmandMapTileView` handles touch events to improve performance and user experience.",
        "8": "Connection view closes the refresh if there was no items in"
    },
    {
        "diff": "diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java\nindex dae1c91..2ffce8d 100644\n--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java\n+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java\n@@ -46,6 +46,7 @@ import android.os.Looper;\n import android.view.Surface;\n \n import java.io.IOException;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.CopyOnWriteArrayList;\n@@ -253,6 +254,9 @@ public class DemoPlayer implements ExoPlayer.Listener, ChunkSampleSource.EventLi\n \n   public void setSelectedTrack(int type, int index) {\n     player.setSelectedTrack(type, index);\n+    if (type == TYPE_TEXT && index < 0 && captionListener != null) {\n+      captionListener.onCues(Collections.<Cue>emptyList());\n+    }\n   }\n \n   public boolean getBackgrounded() {\n",
        "1": "Hide captions when the track is disabled.",
        "2": " Added method 'setSelectedTrack(int, int)' and updated caption listener handling for TYPE_TEXT tracks.",
        "3": "Add a ability to set the number of the threads for the manifest .",
        "4": "Add support for clearing captions when a negative index is selected",
        "5": " Added import statement for Collections and added a new conditional statement to handle text tracks.",
        "6": "Fix NPE in DemoPlayer .",
        "7": "Avoid copying data entries from getChildAnimations ( )",
        "8": "implemented getMetaData ( ) for prepared statements ( returns significant info only if the query was already executed )"
    },
    {
        "diff": "diff --git a/library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java b/library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java\nindex 680ca96..8bc1b53 100644\n--- a/library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java\n+++ b/library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java\n@@ -143,7 +143,9 @@ public class ContextualUndoAdapter extends BaseAdapterDecorator implements Conte\n \t\t\tcontextualUndoView.displayUndo();\n \t\t\tmCurrentRemovedView = contextualUndoView;\n \t\t\tlong millisLeft = mAutoDeleteDelayMillis - (System.currentTimeMillis() - mDismissStartMillis);\n-\t\t\tmCurrentRemovedView.updateCountDownTimer(mCountDownFormatter.getCountDownString(millisLeft));\n+\t\t\tif (mCountDownFormatter != null) {\n+\t\t\t\tmCurrentRemovedView.updateCountDownTimer(mCountDownFormatter.getCountDownString(millisLeft));\n+\t\t\t}\n \t\t} else {\n \t\t\tcontextualUndoView.displayContentView();\n \t\t}\n",
        "1": "Fix NPE in ContextualUndoAdapter",
        "2": "Fixed NullPointerException in getView of ContextualUndoAdapter",
        "3": " Added countdown timer for dismissed views",
        "4": "Adding null check to prevent NPE",
        "5": " Update CountDownTimer to use mCountDownFormatter when displaying undo.",
        "6": "Fix null pointer exception in ContextualUndoAdapter",
        "7": "Added a check so only instances of ContextualUndoView are swipeable .",
        "8": "Fixed NPE in DashAudioVideo"
    },
    {
        "diff": "diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java\nindex 8149bbeca..ad7a59a9d 100644\n--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java\n+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/BpmnParse.java\n@@ -3211,8 +3211,9 @@ public class BpmnParse extends Parse {\n   public void parseBPMNEdge(Element bpmnEdgeElement) {\n     String sequenceFlowId = bpmnEdgeElement.attribute(\"bpmnElement\");\n     if (sequenceFlowId != null && !\"\".equals(sequenceFlowId)) {\n-      TransitionImpl sequenceFlow = sequenceFlows.get(sequenceFlowId);\n-      if (sequenceFlow != null) {\n+      if (sequenceFlows != null && sequenceFlows.containsKey(sequenceFlowId)) {\n+        \n+        TransitionImpl sequenceFlow = sequenceFlows.get(sequenceFlowId);\n         List<Element> waypointElements = bpmnEdgeElement.elementsNS(BpmnParser.OMG_DI_NS, \"waypoint\");\n         if (waypointElements.size() >= 2) {\n           List<Integer> waypoints = new ArrayList<Integer>();\n",
        "1": "Fix NPE in parseBPMNEdge",
        "2": "Refactor parseBPMNEdge method in BpmnParse class",
        "3": "Fixed NPE if no filters are present",
        "4": "Added Nullpointer-check in parseBPMNEdge",
        "5": " Fix parsing of sequence flows with non-unique IDs.",
        "6": "fixed typo in warning message when using XPath",
        "7": "fixed NPE in DelayedActionSystem .",
        "8": " Fixed issue with parsing waypoint elements in BpmnParse.java, now correctly handling multiple waypoints."
    },
    {
        "diff": "diff --git a/ratpack-core/src/main/java/ratpack/launch/RatpackLauncher.java b/ratpack-core/src/main/java/ratpack/launch/RatpackLauncher.java\nindex 6d80cb3d5..6569c24a6 100644\n--- a/ratpack-core/src/main/java/ratpack/launch/RatpackLauncher.java\n+++ b/ratpack-core/src/main/java/ratpack/launch/RatpackLauncher.java\n@@ -45,7 +45,7 @@ import ratpack.server.RatpackServerBuilder;\n  *  public static void main(String[] args) throws Exception {\n  *    RatpackServer server = RatpackLauncher.launcher(r -> {\n  *      r.add(MyHandler.class, new MyHandler());\n- *    }).config( c -> {\n+ *    }).configure( c -> {\n  *      c.port(5060);\n  *    }).build(registry -> {\n  *      return registry.get(MyHandler.class);\n",
        "1": "Fix method name in Javadoc.",
        "2": "Fix a typo in the javadoc .",
        "3": "Fix comment in previous change",
        "4": " Update RatpackLauncher to use configure() instead of config() for setting up the server.",
        "5": "Fix javadoc warning .",
        "6": "Fix non - determinist .",
        "7": " Added configuration for port 5060 in RatpackLauncher.java",
        "8": "Refactor RatpackLauncher to use the configure method instead of config."
    },
    {
        "diff": "diff --git a/tests/src/test/java/alluxio/hadoop/FileSystemBlockLocationIntegrationTest.java b/tests/src/test/java/alluxio/hadoop/FileSystemBlockLocationIntegrationTest.java\nindex 622c507..bb84691 100644\n--- a/tests/src/test/java/alluxio/hadoop/FileSystemBlockLocationIntegrationTest.java\n+++ b/tests/src/test/java/alluxio/hadoop/FileSystemBlockLocationIntegrationTest.java\n@@ -56,13 +56,11 @@ public class FileSystemBlockLocationIntegrationTest {\n    */\n   @Test\n   public void basicBlockLocationTest() throws Exception {\n-    long start = 0;\n-    long len = 0;\n     FileStatus fStatus = sTFS.getFileStatus(new Path(\"/testFile1\"));\n \n     // block0.offset = start < start+len < block1.offset\n-    start = 0;\n-    len = BLOCK_SIZE - 1;\n+    long start = 0;\n+    long len = BLOCK_SIZE - 1;\n     Assert.assertEquals(1, sTFS.getFileBlockLocations(fStatus, start, len).length);\n \n     // block0.offset < start < start+len < block1.offset\n",
        "1": "Fix test failures due to core attempts .",
        "2": "[SMALLFIX] Removed redundant intializers in FileSystemBlockLocationIntegrationTest",
        "3": "Refactor variable declarations in FileSystemBlockLocationIntegrationTest",
        "4": "fix broken unit test failure .",
        "5": " Modified FileSystemBlockLocationIntegrationTest to use BLOCK_SIZE - 1 for len in basicBlockLocationTest",
        "6": "Adding support for HdfsFileInputStream . available ( ) .",
        "7": "Fix test failure",
        "8": " Added new block location test for FileSystemBlockLocationIntegrationTest."
    },
    {
        "diff": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/InputCovariant.java b/src/test/resources/com/puppycrawl/tools/checkstyle/InputCovariant.java\nindex c634728cb..66d644a2e 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/InputCovariant.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/InputCovariant.java\n@@ -109,7 +109,7 @@ class InputGenericCovariant7\n         return true;\n     }\n \n-    public <A> boolean equals(Object aObject)\n+    public boolean equals(Object aObject)\n     {\n         return false;\n     }\n",
        "1": " Fix InputCovariant.java to remove type parameter A from equals method.",
        "2": "Fix test error",
        "3": "Remove generic type parameter from equals method in InputGenericCovariant7 class",
        "4": " Changed method `equals` from generic to non-generic.",
        "5": "Input Whitespace ( is used in many UTs ) now compilable",
        "6": "Rename TransactionManagementConfigurer ' s test",
        "7": "Covariant Equals Check compilable UT inputs",
        "8": "Fix checkstyle error"
    },
    {
        "diff": "diff --git a/library/src/com/astuetz/viewpager/extensions/PagerSlidingTabStrip.java b/library/src/com/astuetz/viewpager/extensions/PagerSlidingTabStrip.java\nindex 7de9476..7af2183 100644\n--- a/library/src/com/astuetz/viewpager/extensions/PagerSlidingTabStrip.java\n+++ b/library/src/com/astuetz/viewpager/extensions/PagerSlidingTabStrip.java\n@@ -96,6 +96,8 @@ public class PagerSlidingTabStrip extends HorizontalScrollView {\n \n \tprivate int tabBackgroundResId = R.drawable.background_tab;\n \n+    private Locale mLocale;\n+\n \tpublic PagerSlidingTabStrip(Context context) {\n \t\tthis(context, null);\n \t}\n@@ -290,9 +292,12 @@ public class PagerSlidingTabStrip extends HorizontalScrollView {\n      * Performs a transformation of the textView content to upper case based on context location\n      */\n     private void makeAllCapsTransformation(TextView tv){\n-        Locale locale = getContext().getResources().getConfiguration().locale;\n+        if (mLocale == null){\n+            mLocale = getContext().getResources().getConfiguration().locale;\n+        }\n+\n         String currentText = (String) tv.getText(); tv.setAllCaps(true);\n-        tv.setText(currentText.toUpperCase(locale));\n+        tv.setText(currentText.toUpperCase(mLocale));\n     }\n \n \t@Override\n",
        "1": "Fix NPE in makeAllCapsTransformation",
        "2": "use new method",
        "3": "Add TelecomManager constructor for passing in TelecomServiceImpl",
        "4": "Add support for localization in PagerSlidingTabStrip.",
        "5": " Added locale-based uppercase transformation for PagerSlidingTabStrip",
        "6": " Added Locale mLocale field to store the locale for text transformation and updated makeAllCapsTransformation method to use it.",
        "7": "Shows all child settings so that it doesn ' t check good by default",
        "8": "Extracted Locale as a class attribute."
    },
    {
        "diff": "diff --git a/h2o-testng/src/test/java/water/TestNGUtil.java b/h2o-testng/src/test/java/water/TestNGUtil.java\nindex 9f9b490f8..4721653f5 100644\n--- a/h2o-testng/src/test/java/water/TestNGUtil.java\n+++ b/h2o-testng/src/test/java/water/TestNGUtil.java\n@@ -32,7 +32,7 @@ public class TestNGUtil extends Iced {\n             if (H2O.getCloudSize() < x) {\n                 // Leader node, where the tests execute from.\n                 String cloudName = UUID.randomUUID().toString();\n-                String[] args = new String[]{\"-name\",cloudName,\"-ice_root\",\"/Users/ece/0xdata/h2o-dev/h2o-testng/\" +\n+                String[] args = new String[]{\"-name\",cloudName,\"-ice_root\",\"h2o-testng/\" +\n                         \"build/test-results\"};\n                 H2O.main(args);\n \n",
        "1": " Fixed bug in TestNG execution by updating cloud name in configuration.",
        "2": "Temporarily , comment out checkLeakedKey",
        "3": "WIP fixed path",
        "4": " Update TestNGUtil to use relative path for ice_root.",
        "5": "Allow ' udpated ' to tmp - ' option .",
        "6": "Fix test failure",
        "7": "Refactor TestNGUtil to use relative path for ice_root",
        "8": "Rename failing example to ' debug ' header default error ."
    },
    {
        "diff": "diff --git a/library/src/uk/co/senab/actionbarpulltorefresh/library/HeaderTransformer.java b/library/src/uk/co/senab/actionbarpulltorefresh/library/HeaderTransformer.java\nindex 00c27c2..1326352 100644\n--- a/library/src/uk/co/senab/actionbarpulltorefresh/library/HeaderTransformer.java\n+++ b/library/src/uk/co/senab/actionbarpulltorefresh/library/HeaderTransformer.java\n@@ -37,12 +37,6 @@ public abstract class HeaderTransformer {\n     public void onViewCreated(Activity activity, View headerView) {}\n \n     /**\n-     * @deprecated This will be removed before v1.0. Override\n-     * {@link #onViewCreated(android.app.Activity, android.view.View)} instead.\n-     */\n-    public void onViewCreated(View headerView) {}\n-\n-    /**\n      * Called when the header should be reset. You should update any child\n      * views to reflect this.\n      * <p/>\ndiff --git a/library/src/uk/co/senab/actionbarpulltorefresh/library/PullToRefreshAttacher.java b/library/src/uk/co/senab/actionbarpulltorefresh/library/PullToRefreshAttacher.java\nindex 86eb8b9..546b990 100644\n--- a/library/src/uk/co/senab/actionbarpulltorefresh/library/PullToRefreshAttacher.java\n+++ b/library/src/uk/co/senab/actionbarpulltorefresh/library/PullToRefreshAttacher.java\n@@ -122,8 +122,6 @@ public class PullToRefreshAttacher {\n \n         // Notify transformer\n         mHeaderTransformer.onViewCreated(activity, mHeaderView);\n-        // TODO Remove the follow deprecated method call before v1.0\n-        mHeaderTransformer.onViewCreated(mHeaderView);\n \n         // Now HeaderView to Activity\n         mHandler.post(new Runnable() {\n",
        "1": "remove deprecated TODO",
        "2": " Remove deprecated method onViewCreated(View) in HeaderTransformer and update callers to use onViewCreated(Activity, View) instead.",
        "3": " Fixed deprecated method call in HeaderTransformer class.",
        "4": "Add some missing javadoc",
        "5": "Remove deprecated call from HeaderTransformer",
        "6": "Remove deprecated method call in HeaderTransformer.onViewCreated()",
        "7": "Remove unused TODO",
        "8": "Remove unused method callback"
    },
    {
        "diff": "diff --git a/library/src/main/java/com/evernote/android/job/JobBootReceiver.java b/library/src/main/java/com/evernote/android/job/JobBootReceiver.java\nindex e8d675a..9497a25 100644\n--- a/library/src/main/java/com/evernote/android/job/JobBootReceiver.java\n+++ b/library/src/main/java/com/evernote/android/job/JobBootReceiver.java\n@@ -42,9 +42,10 @@ public final class JobBootReceiver extends BroadcastReceiver {\n     @Override\n     public void onReceive(Context context, Intent intent) {\n         /*\n-         * We don't need to do anything. This receiver causes the app to be loaded. In the onCreate()\n-         * method of the Application object we initialize the JobManager. There we reschedule tasks\n-         * if necessary.\n+         * Create the job manager. We may need to reschedule jobs and some applications aren't initializing the\n+         * manager in Application.onCreate(). It may happen that some jobs can't be created if the JobCreator\n+         * wasn't registered, yet. Apps / Libraries need to figure out how to solve this themselves.\n          */\n+        JobManager.create(context);\n     }\n }\n",
        "1": " Create JobBootReceiver to initialize JobManager and reschedule tasks.",
        "2": "Refactor JobBootReceiver to create JobManager in onReceive() method.",
        "3": "Fix a bug in JobBootReceiver .",
        "4": "add header to update the ProfileDrawerLIst",
        "5": "Create the JobManager after booting.",
        "6": "Improved",
        "7": "Add an method to fix the build",
        "8": " Added JobManager.create() method to reschedule jobs in JobBootReceiver."
    },
    {
        "diff": "diff --git a/GreenDroid/src/greendroid/widget/AsyncImageView.java b/GreenDroid/src/greendroid/widget/AsyncImageView.java\nindex ff7b994..2f1d03b 100644\n--- a/GreenDroid/src/greendroid/widget/AsyncImageView.java\n+++ b/GreenDroid/src/greendroid/widget/AsyncImageView.java\n@@ -1,3 +1,18 @@\n+/*\n+ * Copyright (C) 2010 Cyril Mottier (http://www.cyrilmottier.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package greendroid.widget;\n \n import greendroid.image.ImageProcessor;\n",
        "1": "Add missing license header",
        "2": "Add license to make it",
        "3": " Added Apache License 2.0 to AsyncImageView.java.",
        "4": "Add copyright information and license to AsyncImageView.java",
        "5": "Add the missing License",
        "6": "Add of a missing license header",
        "7": "add a missing copyright",
        "8": " Added Apache License header to AsyncImageView.java"
    },
    {
        "diff": "diff --git a/grails-plugin-controllers/src/main/groovy/org/codehaus/groovy/grails/plugins/web/api/ControllersApi.java b/grails-plugin-controllers/src/main/groovy/org/codehaus/groovy/grails/plugins/web/api/ControllersApi.java\nindex 6935fc3091..f01dd08c4f 100644\n--- a/grails-plugin-controllers/src/main/groovy/org/codehaus/groovy/grails/plugins/web/api/ControllersApi.java\n+++ b/grails-plugin-controllers/src/main/groovy/org/codehaus/groovy/grails/plugins/web/api/ControllersApi.java\n@@ -330,11 +330,11 @@ public class ControllersApi extends CommonWebApi {\n         return target;\n     }\n     \n-    public <T> void bindData(Object instance, Class<T> targetType, List<T> collectionToPopulate, ServletRequest request) throws Exception {\n+    public <T> void bindData(Object instance, Class<T> targetType, Collection<T> collectionToPopulate, ServletRequest request) throws Exception {\n         DataBindingUtils.bindToCollection(targetType, collectionToPopulate, request);\n     }\n \n-    public <T> void bindData(Object instance, Class<T> targetType, List<T> collectionToPopulate, CollectionDataBindingSource collectionBindingSource) throws Exception {\n+    public <T> void bindData(Object instance, Class<T> targetType, Collection<T> collectionToPopulate, CollectionDataBindingSource collectionBindingSource) throws Exception {\n         DataBindingUtils.bindToCollection(targetType, collectionToPopulate, collectionBindingSource);\n     }\n \n",
        "1": "injecting , use the plugin instead of generics . getName ( ) .",
        "2": "bindData should accept any Collection, not just List",
        "3": " Fixed type safety issue in bindData method by updating generic type parameters.",
        "4": "fixed typo and removed unused params",
        "5": " Fix data binding method signature to use Collection instead of List.",
        "6": "implement getVersion and isVersioned to satisfy the new methods defined in the PersistentEntity interface .",
        "7": "Refactor bindData method in ControllersApi to use Collection instead of List for collectionToPopulate parameter.",
        "8": "rename bindData ( ) method"
    },
    {
        "diff": "diff --git a/packages/Shell/src/com/android/shell/BugreportProgressService.java b/packages/Shell/src/com/android/shell/BugreportProgressService.java\nindex 1c6a071..939d679 100644\n--- a/packages/Shell/src/com/android/shell/BugreportProgressService.java\n+++ b/packages/Shell/src/com/android/shell/BugreportProgressService.java\n@@ -620,7 +620,11 @@ public class BugreportProgressService extends Service {\n      * upon receiving a {@link #INTENT_BUGREPORT_STARTED}.\n      */\n     private void takeScreenshot(int id, boolean delayed) {\n-        MetricsLogger.action(this, MetricsEvent.ACTION_BUGREPORT_NOTIFICATION_ACTION_SCREENSHOT);\n+        if (delayed) {\n+            // Only logs screenshots requested from the notification action.\n+            MetricsLogger.action(this,\n+                    MetricsEvent.ACTION_BUGREPORT_NOTIFICATION_ACTION_SCREENSHOT);\n+        }\n         if (getInfo(id) == null) {\n             // Most likely am killed Shell before user tapped the notification. Since system might\n             // be too busy anwyays, it's better to ignore the notification and switch back to the\n",
        "1": "Fix crash when a View was detached",
        "2": "Don't log metrics for initial screenshot.",
        "3": "Refactor screenshot logging in BugreportProgressService",
        "4": "Added delayed screenshot taking in BugreportProgressService to only log screenshots requested from the notification action.",
        "5": "passing APP_DATA to voice intent",
        "6": "Call stopSelfWhenDone ( ) * after * canceling the notification .",
        "7": "Fix NPE in takeScreenshot . ACTION_BUGREPORT_NOTIFICATION_ACTION_SCREENSHOT .",
        "8": " Fixed issue with delayed screenshot logging for bugreport notifications."
    },
    {
        "diff": "diff --git a/test/org/mockitousage/basicapi/MocksSerializationTest.java b/test/org/mockitousage/basicapi/MocksSerializationTest.java\nindex dc147a2..93502ea 100644\n--- a/test/org/mockitousage/basicapi/MocksSerializationTest.java\n+++ b/test/org/mockitousage/basicapi/MocksSerializationTest.java\n@@ -4,22 +4,24 @@\n  */\n package org.mockitousage.basicapi;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.Ignore;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.withSettings;\n import org.mockitousage.IMethods;\n import org.mockitoutil.TestBase;\n \n import java.io.ByteArrayOutputStream;\n import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n \n-@Ignore\n public class MocksSerializationTest extends TestBase {\n \n     @Test\n+    @Ignore\n     public void shouldAllowMockToBeSerializable() throws Exception {\n         //given\n-        IMethods mock = mock(IMethods.class);\n+        IMethods mock = mock(IMethods.class, withSettings().extraInterfaces(Serializable.class));\n         ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n \n         //when\n",
        "1": "use correct web server",
        "2": "Made the test tiny bit safer .",
        "3": "Refactor MocksSerializationTest to allow the mock to be serializable",
        "4": "Added missing declaration.",
        "5": "In sample test cases should work when a default API fails .",
        "6": "[ TEST ] Fix MocksSerializationTest test",
        "7": " Fixed issue with serialization of mock objects",
        "8": " Added support for serializing mocks with the `Serializable` interface."
    },
    {
        "diff": "diff --git a/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java b/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java\nindex ec7a9b27..e52b1fcf 100644\n--- a/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java\n+++ b/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java\n@@ -18,19 +18,21 @@\n  */\n package com.graphhopper.reader.dem;\n \n-import com.graphhopper.storage.*;\n+import com.graphhopper.storage.DAType;\n+import com.graphhopper.storage.DataAccess;\n+import com.graphhopper.storage.Directory;\n+import com.graphhopper.storage.GHDirectory;\n import com.graphhopper.util.BitUtil;\n import com.graphhopper.util.Downloader;\n import com.graphhopper.util.Helper;\n import gnu.trove.map.hash.TIntObjectHashMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.*;\n import java.net.SocketTimeoutException;\n import java.util.zip.ZipInputStream;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n /**\n  * Elevation data from NASA (SRTM).\n  * <p>\n@@ -77,7 +79,8 @@ public class SRTMProvider implements ElevationProvider\n     private final double invPrecision = 1 / precision;\n     // possible alternatives see #451\n     // http://mirror.ufs.ac.za/datasets/SRTM3/\n-    private String baseUrl = \"http://dds.cr.usgs.gov/srtm/version2_1/SRTM3/\";\n+    //\"http://dds.cr.usgs.gov/srtm/version2_1/SRTM3/\"\n+    private String baseUrl = \"http://srtm.motoroute.me/SRTM3/\";\n     private boolean calcMean = false;\n \n     public SRTMProvider()\n",
        "1": " Added new base URL for SRTM data download.",
        "2": "Updated SRTM Provider URL",
        "3": " Added support for SRTM elevation data from NASA (version 3) with improved precision and updated base URL.",
        "4": "trying unsafe on Android",
        "5": "updated SRTM package",
        "6": "removed unused ' threadName ' comma",
        "7": "Update SRTMProvider.java with new baseUrl for elevation data source.",
        "8": "Fix DAType of version2_1"
    },
    {
        "diff": "diff --git a/src/main/com/mongodb/DBTCPConnector.java b/src/main/com/mongodb/DBTCPConnector.java\nindex 38f606608..1fca923e3 100644\n--- a/src/main/com/mongodb/DBTCPConnector.java\n+++ b/src/main/com/mongodb/DBTCPConnector.java\n@@ -196,6 +196,10 @@ class DBTCPConnector implements DBConnector {\n         return _curAddress;\n     }\n \n+    public List<ServerAddress> getAllAddress() {\n+        return _allHosts;\n+    }\n+\n     public String getConnectPoint(){\n         return _curAddress.toString();\n     }\ndiff --git a/src/main/com/mongodb/Mongo.java b/src/main/com/mongodb/Mongo.java\nindex 3a099df7a..b952bde45 100644\n--- a/src/main/com/mongodb/Mongo.java\n+++ b/src/main/com/mongodb/Mongo.java\n@@ -229,6 +229,14 @@ public class Mongo {\n     public ServerAddress getAddress(){\n         return _connector.getAddress();\n     }\n+\n+    public List<ServerAddress> getAllAddress() {\n+        List<ServerAddress> result = _connector.getAllAddress();\n+        if (result == null) {\n+            return Arrays.asList(getAddress());\n+        }\n+        return result;\n+    }\n     \n     final ServerAddress _addr;\n     final List<ServerAddress> _addrs;\n",
        "1": " Added method to return all server addresses in Mongo class",
        "2": "Add method to read stable ids to parse",
        "3": "add ability to return the currently used server addresses.",
        "4": "exposing db and coll stats and adding ability to check if collection is capped",
        "5": "add ServerAddress method to Mongo",
        "6": "Analyzer ' s cache blocks",
        "7": " Added method getAllAddress() to return a list of all server addresses.",
        "8": "Add getAllAddress() method to retrieve all server addresses."
    },
    {
        "diff": "diff --git a/test/org/nutz/mvc/upload/UploadingTest.java b/test/org/nutz/mvc/upload/UploadingTest.java\nindex 6f54cbc9..49c249a5 100644\n--- a/test/org/nutz/mvc/upload/UploadingTest.java\n+++ b/test/org/nutz/mvc/upload/UploadingTest.java\n@@ -17,6 +17,11 @@ import org.nutz.lang.Files;\n import org.nutz.lang.Stopwatch;\r\n import org.nutz.lang.Streams;\r\n \r\n+/**\r\n+ * test uploading's performance\r\n+ * \r\n+ * @author amosleaf\r\n+ */\r\n public class UploadingTest {\r\n \r\n \tpublic static void main(String[] args) throws IOException, UploadFailException {\r\n",
        "1": "Added performance testing for uploading feature.",
        "2": "add user name of code",
        "3": "Refactor UploadingTest.java to test uploading's performance",
        "4": " Added performance test for uploading functionality",
        "5": "Attach the JsonAdaptorTest to AllMvc",
        "6": "Add javadoc for DisplayModeSetting function",
        "7": "add test for upload",
        "8": "Added some javadoc"
    },
    {
        "diff": "diff --git a/plugins/ui-designer-core/src/com/intellij/designer/designSurface/DesignerEditorPanel.java b/plugins/ui-designer-core/src/com/intellij/designer/designSurface/DesignerEditorPanel.java\nindex ec86cb8..b09fc92 100644\n--- a/plugins/ui-designer-core/src/com/intellij/designer/designSurface/DesignerEditorPanel.java\n+++ b/plugins/ui-designer-core/src/com/intellij/designer/designSurface/DesignerEditorPanel.java\n@@ -749,6 +749,14 @@ public abstract class DesignerEditorPanel extends JPanel implements DataProvider\n \n   public abstract List<PaletteGroup> getPaletteGroups();\n \n+  /**\n+   * Returns a suitable version label from the version attribute from a {@link PaletteItem} version\n+   */\n+  @NotNull\n+  public String getVersionLabel(@Nullable String version) {\n+    return StringUtil.notNullize(version);\n+  }\n+\n   protected InputTool createDefaultTool() {\n     return new SelectionTool();\n   }\ndiff --git a/plugins/ui-designer-core/src/com/intellij/designer/palette/PaletteItemsComponent.java b/plugins/ui-designer-core/src/com/intellij/designer/palette/PaletteItemsComponent.java\nindex 2f523a6..2185b23 100644\n--- a/plugins/ui-designer-core/src/com/intellij/designer/palette/PaletteItemsComponent.java\n+++ b/plugins/ui-designer-core/src/com/intellij/designer/palette/PaletteItemsComponent.java\n@@ -84,11 +84,8 @@ public class PaletteItemsComponent extends JBList {\n         append(title, SimpleTextAttributes.REGULAR_ATTRIBUTES);\n \n         String tooltip = item.getTooltip();\n-        String version = item.getVersion();\n-        if (version == null) {\n-          version = \"\";\n-        }\n-        else {\n+        String version = myDesigner.getVersionLabel(item.getVersion());\n+        if (!version.isEmpty()) {\n           version = \"<sup><i>\" + version + \"</i></sup>\";\n         }\n         if (tooltip != null) {\n",
        "1": "Disable PSI listener for unselected designer",
        "2": "Fix broken test",
        "3": "Allow plugins to customize the version label",
        "4": "add version to version",
        "5": "Added method getVersionLabel to DesignerEditorPanel to retrieve a suitable version label from a PaletteItem's version attribute.",
        "6": " Added method getVersionLabel to PaletteItemsComponent for version label calculation",
        "7": "provide API to detect if there is no data",
        "8": "Refactor getVersionLabel method in DesignerEditorPanel and PaletteItemsComponent"
    },
    {
        "diff": "diff --git a/hazelcast/src/main/java/com/hazelcast/security/permission/InstancePermission.java b/hazelcast/src/main/java/com/hazelcast/security/permission/InstancePermission.java\nindex 759f7ee9aa..3e9f0737ed 100644\n--- a/hazelcast/src/main/java/com/hazelcast/security/permission/InstancePermission.java\n+++ b/hazelcast/src/main/java/com/hazelcast/security/permission/InstancePermission.java\n@@ -29,11 +29,11 @@ public abstract class InstancePermission extends ClusterPermission {\n     protected static final int CREATE = 1;\n     protected static final int DESTROY = 2;\n \n+    private static final WildcardConfigPatternMatcher CONFIG_PATTERN_MATCHER = new WildcardConfigPatternMatcher();\n+\n     protected final int mask;\n     protected final String actions;\n \n-    private final WildcardConfigPatternMatcher configPatternMatcher = new WildcardConfigPatternMatcher();\n-\n     public InstancePermission(String name, String... actions) {\n         super(name);\n         if (name == null || \"\".equals(name)) {\n@@ -66,7 +66,7 @@ public abstract class InstancePermission extends ClusterPermission {\n             return false;\n         }\n \n-        if (!configPatternMatcher.matches(that.getName(), this.getName())) {\n+        if (!CONFIG_PATTERN_MATCHER.matches(that.getName(), this.getName())) {\n             return false;\n         }\n \n",
        "1": "Refactor InstancePermission class to use a static WildcardConfigPatternMatcher",
        "2": "changed configPatterMatcher to static",
        "3": " Added WildcardConfigPatternMatcher for InstancePermission",
        "4": "Fixed a minor bug in NameMaps initialization .",
        "5": "Get rid of one field",
        "6": "added JavaScript as Content - Type",
        "7": "Fix a bug in InstancePermission",
        "8": " Added WildcardConfigPatternMatcher to InstancePermission to enable wildcard matching for configuration patterns."
    },
    {
        "diff": "diff --git a/jruby/src/main/java/cucumber/runtime/jruby/JRubyBackend.java b/jruby/src/main/java/cucumber/runtime/jruby/JRubyBackend.java\nindex 3b24c2cb..63aa6ccc 100644\n--- a/jruby/src/main/java/cucumber/runtime/jruby/JRubyBackend.java\n+++ b/jruby/src/main/java/cucumber/runtime/jruby/JRubyBackend.java\n@@ -6,12 +6,14 @@ import cucumber.resources.Resources;\n import cucumber.runtime.Backend;\n import cucumber.runtime.World;\n import gherkin.formatter.Reporter;\n+import gherkin.formatter.model.Comment;\n import gherkin.formatter.model.Step;\n import org.jruby.RubyObject;\n import org.jruby.embed.ScriptingContainer;\n \n import java.io.InputStreamReader;\n import java.io.UnsupportedEncodingException;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n \n@@ -48,9 +50,7 @@ public class JRubyBackend implements Backend {\n     }\n \n     public void runStep(String uri, Reporter reporter, Locale locale, String stepString) {\n-\n-        //This is probably wrong\n-        Step s = new Step(null, null, stepString, 1, null, null);\n+        Step s = new Step(Collections.<Comment>emptyList(), \"Given \", stepString, 0, null, null);\n         world.runStep(uri, s, reporter, locale);\n     }\n \n",
        "1": "This makes the appropriate step call, now the problem exists in cucumber-junit",
        "2": " Changed implementation of `JRubyBackend` to include a new `Step` constructor that takes a list of comments.",
        "3": "Fix a crash with the previous change that the path wouldn ' t be resolved .",
        "4": "Fix NPE in runStep",
        "5": "Refactor JRubyBackend to handle step execution correctly",
        "6": " Added import statement for gherkin.formatter.model.Comment and modified the construction of Step objects to use Collections.emptyList() instead of an empty array.",
        "7": "Oops , forgot the correct classname",
        "8": "implemented getMetaData ( ) for prepared statements ( returns significant info only if the query was already executed )"
    },
    {
        "diff": "diff --git a/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java b/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\nindex 5e7fb2b..e6467d3 100644\n--- a/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\n+++ b/servers/src/main/java/tachyon/worker/block/meta/BlockMeta.java\n@@ -17,20 +17,17 @@ package tachyon.worker.block.meta;\n \n import tachyon.util.CommonUtils;\n \n+import java.io.File;\n+\n /**\n  * Represents the metadata of a block in Tachyon managed storage.\n  */\n public class BlockMeta extends BlockMetaBase {\n   private final long mBlockSize;\n \n-  public BlockMeta(long blockId, long blockSize, StorageDir dir) {\n-    super(blockId, dir);\n-    mBlockSize = blockSize;\n-  }\n-\n   public BlockMeta(TempBlockMeta tempBlock) {\n     super(tempBlock.getBlockId(), tempBlock.getParentDir());\n-    mBlockSize = tempBlock.getBlockSize();\n+    mBlockSize = new File(tempBlock.getCommitPath()).length();\n   }\n \n   @Override\n",
        "1": "Removed unnecessary method calls",
        "2": " Added method to calculate block size from file size in BlockMeta.java",
        "3": " Added import statement for `java.io.File` and updated `mBlockSize` assignment in `BlockMeta` constructor to use `File.length()` instead of `tempBlock.getBlockSize()`.",
        "4": "Refactored BlockMeta constructor to use file length instead of blockSize",
        "5": "Fix BlockMeta of BlockMeta",
        "6": "Remove unused constructor",
        "7": "Make BlockMeta#size really measured from actual file length",
        "8": "Add a method in StorageDir to get a collection of blocks"
    },
    {
        "diff": "diff --git a/src/org/wordpress/android/ui/reader/ReaderActivity.java b/src/org/wordpress/android/ui/reader/ReaderActivity.java\nindex 500f6d299..2b3d0e6d6 100644\n--- a/src/org/wordpress/android/ui/reader/ReaderActivity.java\n+++ b/src/org/wordpress/android/ui/reader/ReaderActivity.java\n@@ -293,13 +293,11 @@ public class ReaderActivity extends WPActionBarActivity\n         Fragment fragment = ReaderPostDetailFragment.newInstance(blogId, postId, mIsBlogDetail);\n         FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n         ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);\n+        ft.add(R.id.fragment_container, fragment, tagForFragment);\n \n         // add to the backstack if list fragment exists\n         if (hasListFragment()) {\n-            ft.replace(R.id.fragment_container, fragment, tagForFragment);\n             ft.addToBackStack(tagForFragment);\n-        } else {\n-            ft.add(R.id.fragment_container, fragment, tagForFragment);\n         }\n \n         ft.commit();\n",
        "1": "Add fragment to backstack in ReaderActivity",
        "2": "Comment & post detail fragments now replace existing fragment rather than being added",
        "3": " Add ReaderPostDetailFragment to the fragment container and add it to the backstack if the list fragment exists.",
        "4": "Prevent KCVSLog from slicing with json content",
        "5": " Added fragment transaction for ReaderActivity",
        "6": "Don ' t show the backstack if the backstack is not be used",
        "7": "Fixed bug that caused scroll position to be lost in reader post list after returning from post detail",
        "8": "Revert \" Changed unused image color to a left time notification ."
    },
    {
        "diff": "diff --git a/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java\nindex d323122..e35c489 100644\n--- a/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java\n+++ b/src/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java\n@@ -126,7 +126,7 @@ public class OperatorOnBackpressureBuffer<T> implements Operator<T, T> {\n         @Override\n         public Object poll() {\n             Object value = queue.poll();\n-            if (capacity != null) {\n+            if (capacity != null && value != null) {\n                 capacity.incrementAndGet();\n             }\n             return value;\n",
        "1": " Fixed bug in OperatorOnBackpressureBuffer poll method by correctly checking capacity before incrementing it.",
        "2": "Remove unnecessary onStart in OperatorGroupBy",
        "3": "Fix a minor bug in the ChainSplitTests",
        "4": "Fix possible NPE",
        "5": "Fix capacity increment bug in OperatorOnBackpressureBuffer",
        "6": " Changed how backpressure buffer capacity is updated to match the new API.",
        "7": "Fix NPE in OperatorOnBackpressureBuffer",
        "8": "Added value null check"
    },
    {
        "diff": "diff --git a/platform/platform-impl/src/com/intellij/ide/RecentProjectsManagerBase.java b/platform/platform-impl/src/com/intellij/ide/RecentProjectsManagerBase.java\nindex 679248b..fd9ddd2 100644\n--- a/platform/platform-impl/src/com/intellij/ide/RecentProjectsManagerBase.java\n+++ b/platform/platform-impl/src/com/intellij/ide/RecentProjectsManagerBase.java\n@@ -27,6 +27,7 @@ import com.intellij.openapi.ui.Messages;\n import com.intellij.openapi.util.Ref;\n import com.intellij.openapi.util.SystemInfo;\n import com.intellij.openapi.util.io.FileUtil;\n+import com.intellij.util.containers.ContainerUtil;\n import com.intellij.util.messages.MessageBus;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n@@ -129,7 +130,7 @@ public abstract class RecentProjectsManagerBase implements PersistentStateCompon\n       myState.lastPath = getProjectPath(openProjects[openProjects.length - 1]);\n       myState.openPaths = new ArrayList<String>();\n       for (Project openProject : openProjects) {\n-        myState.openPaths.add(getProjectPath(openProject));\n+        ContainerUtil.addIfNotNull(myState.openPaths, getProjectPath(openProject));\n       }\n     }\n   }\n@@ -219,7 +220,9 @@ public abstract class RecentProjectsManagerBase implements PersistentStateCompon\n   private class MyProjectManagerListener extends ProjectManagerAdapter {\n     public void projectOpened(final Project project) {\n       String path = getProjectPath(project);\n-      markPathRecent(path);\n+      if (path != null) {\n+        markPathRecent(path);\n+      }\n     }\n \n     public void projectClosed(final Project project) {\n",
        "1": "Fixed problem with stale directory setting change",
        "2": " Modified RecentProjectsManagerBase to use ContainerUtil.addIfNotNull instead of adding nullable values to openPaths list.",
        "3": " Added recent project paths for opened projects.",
        "4": "Remove unused methods .",
        "5": "Could not save application settings",
        "6": "Fix NullPointerException in RecentProjectsManagerBase",
        "7": "Fix NPE when closing project editor",
        "8": "do not show openProjects in the project"
    },
    {
        "diff": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java b/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java\nindex 6ffca18..c446ac1 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java\n@@ -900,5 +900,12 @@ public interface ApplicationConfig {\n      * Value: org.atmosphere.cpr.AsynchronousProcessor.closeOnCancel\n      */\n     java.lang.String CLOSE_STREAM_ON_CANCEL = \"org.atmosphere.cpr.AsynchronousProcessor.closeOnCancel\";\n+    \n+    /**\n+     * Use init parameters specified for servlet context in addition to servlet config\n+     * Default: false\n+     * Value: org.atmosphere.cpr.AtmosphereConfig.getInitParameter\n+     */\n+    java.lang.String USE_SERVLET_CONTEXT_PARAMETERS = \"org.atmosphere.cpr.AtmosphereConfig.getInitParameter\";\n }\n \n",
        "1": "Temporarily ignore expected value type",
        "2": "Add missing parameters for init parameters",
        "3": "Add support for using init parameters specified for servlet context.",
        "4": " Changed ApplicationConfig interface to include new init parameter for using servlet context parameters.",
        "5": "Add a configuration parameter for Servlet Context Init Parameter use",
        "6": "Fix So , e co , , ents",
        "7": " Added USE_SERVLET_CONTEXT_PARAMETERS config option to enable using servlet context init parameters in addition to servlet config.",
        "8": "Adds some comments"
    },
    {
        "diff": "diff --git a/src/java/org/apache/cassandra/db/EmptyColumns.java b/src/java/org/apache/cassandra/db/EmptyColumns.java\nindex aa48375..af64628 100644\n--- a/src/java/org/apache/cassandra/db/EmptyColumns.java\n+++ b/src/java/org/apache/cassandra/db/EmptyColumns.java\n@@ -5,13 +5,13 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n \n-import com.google.common.base.Function;\n-\n-import com.sun.xml.internal.xsom.impl.scd.Iterators;\n import org.apache.cassandra.config.CFMetaData;\n import org.apache.cassandra.db.filter.ColumnSlice;\n import org.apache.cassandra.utils.Allocator;\n \n+import com.google.common.base.Function;\n+import com.google.common.collect.Iterators;\n+\n public class EmptyColumns extends AbstractThreadUnsafeSortedColumns\n {\n     public static final Factory<EmptyColumns> factory = new Factory<EmptyColumns>()\n@@ -83,12 +83,12 @@ public class EmptyColumns extends AbstractThreadUnsafeSortedColumns\n \n     public Iterator<Column> iterator(ColumnSlice[] slices)\n     {\n-        return Iterators.empty();\n+        return Iterators.emptyIterator();\n     }\n \n     public Iterator<Column> reverseIterator(ColumnSlice[] slices)\n     {\n-        return Iterators.empty();\n+        return Iterators.emptyIterator();\n     }\n \n     public boolean isInsertReversed()\n",
        "1": "Fix EmptyColumns Iterators",
        "2": "use ArrayUtil . tag to return class",
        "3": " Added empty iterator for EmptyColumns.",
        "4": "use guava's Iterators class and emptyIterator",
        "5": "Refactored EmptyColumns class to use Guava's Iterators.emptyIterator() method instead of deprecated Iterators.empty() method.",
        "6": "Use the liquid to ease running the tests using the path",
        "7": " Fix empty iterator import to use com.google.common.collect.Iterators instead of com.sun.xml.internal.xsom.impl.scd.Iterators.",
        "8": "replace assert + cast w / checkedCast"
    },
    {
        "diff": "diff --git a/sdk/jme3-core/src/com/jme3/gde/core/filters/impl/JmeCrossHatchFilter.java b/sdk/jme3-core/src/com/jme3/gde/core/filters/impl/JmeCrossHatchFilter.java\nindex 810242be2..b9025d775 100644\n--- a/sdk/jme3-core/src/com/jme3/gde/core/filters/impl/JmeCrossHatchFilter.java\n+++ b/sdk/jme3-core/src/com/jme3/gde/core/filters/impl/JmeCrossHatchFilter.java\n@@ -72,11 +72,6 @@ public class JmeCrossHatchFilter extends AbstractFilterNode {\n         set.put(makeProperty(obj, ColorRGBA.class, \"getLineColor\", \"setLineColor\", \"Line Color\"));\n         set.put(makeProperty(obj, float.class, \"getLineDistance\", \"setLineDistance\", \"Line Distance\"));\n         set.put(makeProperty(obj, float.class, \"getLineThickness\", \"setLineThickness\", \"Line Thickness\"));\n-        set.put(makeProperty(obj, float.class, \"getLuminance1\", \"setLuminance1\", \"Luminance1\"));\n-        set.put(makeProperty(obj, float.class, \"getLuminance2\", \"setLuminance2\", \"Luminance2\"));\n-        set.put(makeProperty(obj, float.class, \"getLuminance3\", \"setLuminance3\", \"Luminance3\"));\n-        set.put(makeProperty(obj, float.class, \"getLuminance4\", \"setLuminance4\", \"Luminance4\"));\n-        set.put(makeProperty(obj, float.class, \"getLuminance5\", \"setLuminance5\", \"Luminance5\"));\n         sheet.put(set);\n         return sheet;\n \n",
        "1": " Changed the `Luminance1`, `Luminance2`, `Luminance3`, `Luminance4`, and `Luminance5` properties from float to void.",
        "2": "Fix merge conflict in CommandDispatcherTestCase .",
        "3": "Fixed issue when clicking on an audioNode",
        "4": "Remove unused properties in JmeCrossHatchFilter class",
        "5": "remove unsettable crosshatch parameters",
        "6": "remove unnecessary code",
        "7": " Removed unused properties Luminance1, Luminance2, Luminance3, Luminance4, and Luminance5 from JmeCrossHatchFilter.",
        "8": "remove unused code"
    },
    {
        "diff": "diff --git a/java/java-impl/src/com/intellij/codeInsight/FunctionalInterfaceSuggester.java b/java/java-impl/src/com/intellij/codeInsight/FunctionalInterfaceSuggester.java\nindex e234b2e..a06ff51 100644\n--- a/java/java-impl/src/com/intellij/codeInsight/FunctionalInterfaceSuggester.java\n+++ b/java/java-impl/src/com/intellij/codeInsight/FunctionalInterfaceSuggester.java\n@@ -18,6 +18,7 @@ package com.intellij.codeInsight;\n import com.intellij.codeInspection.java15api.Java15APIUsageInspectionBase;\n import com.intellij.openapi.project.Project;\n import com.intellij.psi.*;\n+import com.intellij.psi.impl.source.resolve.JavaResolveUtil;\n import com.intellij.psi.search.GlobalSearchScope;\n import com.intellij.psi.search.searches.AnnotatedMembersSearch;\n import com.intellij.psi.util.PsiTreeUtil;\n@@ -122,6 +123,9 @@ public class FunctionalInterfaceSuggester {\n       @Override\n       public boolean process(PsiMember member) {\n         if (member instanceof PsiClass && !Java15APIUsageInspectionBase.isForbiddenApiUsage(member, PsiUtil.getLanguageLevel(element))) {\n+          if (!JavaResolveUtil.isAccessible(member, null, member.getModifierList(), element, null, null)) {\n+            return true;\n+          }\n           ContainerUtil.addIfNotNull(types, acceptanceChecker.fun((PsiClass)member));\n         }\n         return true;\n",
        "1": "compare classes that are not a reference file expressions",
        "2": "skip non - project packages",
        "3": "do not show empty - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
        "4": " Add import statement for JavaResolveUtil and modify FunctionalInterfaceSuggester to use it.",
        "5": " Added import for JavaResolveUtil to handle accessibility checks for functional interfaces.",
        "6": "accept only accessible members",
        "7": "Add check for accessibility in FunctionalInterfaceSuggester",
        "8": "disable static imports for code fragments"
    },
    {
        "diff": "diff --git a/WordPress/src/main/java/org/wordpress/android/models/Person.java b/WordPress/src/main/java/org/wordpress/android/models/Person.java\nindex b18b7805f..1c6a3e852 100644\n--- a/WordPress/src/main/java/org/wordpress/android/models/Person.java\n+++ b/WordPress/src/main/java/org/wordpress/android/models/Person.java\n@@ -42,6 +42,7 @@ public class Person {\n         String lastName = json.optString(\"last_name\");\n         String displayName = json.optString(\"nice_name\");\n         String avatarUrl = json.optString(\"avatar_URL\");\n+        // We don't support multiple roles, so the first role is picked just as it's in Calypso\n         Role role = Role.fromKey(json.optJSONArray(\"roles\").optString(0));\n \n         return new Person(personID, localTableBlogId, username, firstName, lastName, displayName, avatarUrl, role);\n",
        "1": "Updated another code that removed the previous commit",
        "2": "Added a note on the !",
        "3": "Add support for picking the first role in Person class.",
        "4": " Add support for Role in Person model.",
        "5": " Added support for multiple roles in Person model",
        "6": "Adds a comment which explains why we pick the first role from network response",
        "7": "Add comment for role",
        "8": "Fixed a bug where the display name wouldn ' t be updated in the db after post me / settings"
    },
    {
        "diff": "diff --git a/app/src/processing/app/EditorConsole.java b/app/src/processing/app/EditorConsole.java\nindex 34ed844..fb5ebc1 100644\n--- a/app/src/processing/app/EditorConsole.java\n+++ b/app/src/processing/app/EditorConsole.java\n@@ -257,6 +257,8 @@ public class EditorConsole extends JScrollPane {\n       // Java on Mac OS X, but is widely reported as the source of any other\n       // bug or problem that a user runs into. It may well be a Processing\n       // bug, but until we know, we're suppressing the messages.\n+    } else if (err && what.contains(\"Make pbuffer:\")) { \n+      // Remove initalization warning from LWJGL.\n     } else if (err && what.contains(\"XInitThreads() called for concurrent\")) {\n       // \"Info: XInitThreads() called for concurrent Thread support\" message on Linux\n     } else {\n",
        "1": " Fixed issue with incorrect warning message in EditorConsole.java",
        "2": " Suppressed warnings for LWJGL initialization and added a check for XInitThreads() called for concurrent Thread support on Linux.",
        "3": "suppress superfluous errors",
        "4": "remove pbuffer initialization warning from LWJGL",
        "5": "add pbuffer warning for initalization",
        "6": "Don ' t generate the TrustStore .",
        "7": "Suppress initialization warning from LWJGL in EditorConsole.java",
        "8": "improve error message ."
    },
    {
        "diff": "diff --git a/idea/src/org/jetbrains/kotlin/idea/refactoring/changeSignature/JetChangeSignatureDialog.java b/idea/src/org/jetbrains/kotlin/idea/refactoring/changeSignature/JetChangeSignatureDialog.java\nindex 419c074..7b0653b 100644\n--- a/idea/src/org/jetbrains/kotlin/idea/refactoring/changeSignature/JetChangeSignatureDialog.java\n+++ b/idea/src/org/jetbrains/kotlin/idea/refactoring/changeSignature/JetChangeSignatureDialog.java\n@@ -288,7 +288,9 @@ public class JetChangeSignatureDialog extends ChangeSignatureDialogBase<\n                                 new ItemListener() {\n                                     @Override\n                                     public void itemStateChanged(@NotNull ItemEvent e) {\n-                                        ((JetFunctionParameterTableModel)myParametersTableModel).setReceiver(item.parameter);\n+                                        ((JetFunctionParameterTableModel)myParametersTableModel).setReceiver(\n+                                                e.getStateChange() == ItemEvent.SELECTED ? item.parameter : null\n+                                        );\n                                         updateSignature();\n                                         updateNameEditor();\n                                     }\n",
        "1": " Added `e.getStateChange() == ItemEvent.SELECTED` check to update receiver parameter in JetChangeSignatureDialog",
        "2": "Fix NPE in JetChangeSignatureDialog",
        "3": "Fix compilation error",
        "4": "Refactor JetChangeSignatureDialog to update receiver parameter",
        "5": "Fix behavior of \"Receiver\" checkbox",
        "6": "add additional additional resource to the error panel",
        "7": "Fix receiver removal in the dialog",
        "8": " Refactor JetChangeSignatureDialog to use selected parameter from item event."
    },
    {
        "diff": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AbstractMessageTask.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AbstractMessageTask.java\nindex 6d3f6d2713..22f23b9d7b 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AbstractMessageTask.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/task/AbstractMessageTask.java\n@@ -38,10 +38,9 @@ import java.security.Permission;\n import java.util.logging.Level;\n \n /**\n- * Base Message task\n+ * Base Message task.\n  */\n-public abstract class AbstractMessageTask<P>\n-        implements MessageTask, SecureRequest {\n+public abstract class AbstractMessageTask<P> implements MessageTask, SecureRequest {\n \n     protected final ClientMessage clientMessage;\n \n@@ -98,7 +97,6 @@ public abstract class AbstractMessageTask<P>\n             } else {\n                 initializeAndProcessMessage();\n             }\n-\n         } catch (Throwable e) {\n             handleProcessingFailure(e);\n         }\n@@ -202,7 +200,7 @@ public abstract class AbstractMessageTask<P>\n         resultClientMessage.addFlag(ClientMessage.BEGIN_AND_END_FLAGS);\n         resultClientMessage.setVersion(ClientMessage.VERSION);\n         final Connection connection = endpoint.getConnection();\n-        //TODO framing not implemented yet, should be split into frames before writing to connection\n+        // TODO: framing not implemented yet, should be split into frames before writing to connection\n         connection.write(resultClientMessage);\n     }\n \n@@ -220,6 +218,7 @@ public abstract class AbstractMessageTask<P>\n \n     public abstract String getServiceName();\n \n+    @Override\n     public String getDistributedObjectType() {\n         return getServiceName();\n     }\n",
        "1": "added some @ Override annotation",
        "2": "Fixes a compilation error - due to a class of no",
        "3": " Modified AbstractMessageTask to implement SecureRequest and updated dependencies.",
        "4": "Fix some warnings",
        "5": "Add DeserializationContext . getAnnotationIntrospector ( ) convenience method",
        "6": "Added missing @Override annotation in AbstractMessageTask",
        "7": "Refactor AbstractMessageTask class",
        "8": " AbstractMessageTask: updated method signature for getDistributedObjectType()"
    },
    {
        "diff": "diff --git a/core/java/android/view/TextureView.java b/core/java/android/view/TextureView.java\nindex 3fd2d83..74916f0 100644\n--- a/core/java/android/view/TextureView.java\n+++ b/core/java/android/view/TextureView.java\n@@ -303,6 +303,9 @@ public class TextureView extends View {\n         return false;\n     }\n \n+    /**\n+     * @hide\n+     */\n     @Override\n     protected void destroyHardwareResources() {\n         super.destroyHardwareResources();\n",
        "1": " Add a @hide annotation to the destroyHardwareResources method to indicate it's not meant to be used by clients.",
        "2": "Fix the build",
        "3": "Don ' t update TextureView ' s surface if the Layer doesn ' t exist",
        "4": " Added hide annotation to destroyHardwareResources method",
        "5": "DO NOT MERGE add internal API API",
        "6": "Fix a build in TextureView",
        "7": "Add @hide annotation to destroyHardwareResources() method in TextureView.java",
        "8": "DO NOT MERGE Fix javadoc and some unsupported Eclipse docs"
    },
    {
        "diff": "diff --git a/extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/World.java b/extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/World.java\nindex 67e76f7..9179300 100644\n--- a/extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/World.java\n+++ b/extensions/gdx-box2d/gdx-box2d/src/com/badlogic/gdx/physics/box2d/World.java\n@@ -348,7 +348,6 @@ b2ContactFilter defaultFilter;\n \t * @param fixture */\n \tvoid destroyFixture(Body body, Fixture fixture) {\n \t\tjniDestroyFixture(addr, body.addr, fixture.addr);\n-\t\tfixture.setUserData(null);\n \t}\n \t\n \tprivate native void jniDestroyFixture(long addr, long bodyAddr, long fixtureAddr); /*\n",
        "1": " Commit message: Remove unnecessary line of code in destroyFixture method.",
        "2": "Remove setting user data to null in destroyFixture method",
        "3": "removed duplicate fixture.setUserData",
        "4": "[ fixed ] Body . destroyFixture ( ) puts fixture back in pool as well . . .",
        "5": "Fixed bug that was causing Grails applications to hang on startup .",
        "6": "leave rid of executor",
        "7": " Fixed null pointer exception in World.destroyFixture() by removing unnecessary user data setter.",
        "8": "Remove unused fixture"
    },
    {
        "diff": "diff --git a/plugins/google-app-engine/jps-plugin/src/org/jetbrains/jps/appengine/build/AppEngineEnhancerBuilder.java b/plugins/google-app-engine/jps-plugin/src/org/jetbrains/jps/appengine/build/AppEngineEnhancerBuilder.java\nindex 159d4e0..c389a56 100644\n--- a/plugins/google-app-engine/jps-plugin/src/org/jetbrains/jps/appengine/build/AppEngineEnhancerBuilder.java\n+++ b/plugins/google-app-engine/jps-plugin/src/org/jetbrains/jps/appengine/build/AppEngineEnhancerBuilder.java\n@@ -5,6 +5,7 @@ import com.intellij.openapi.application.PathManager;\n import com.intellij.openapi.util.io.FileUtil;\n import com.intellij.util.execution.ParametersListUtil;\n import gnu.trove.THashSet;\n+import org.jetbrains.annotations.NotNull;\n import org.jetbrains.jps.ModuleChunk;\n import org.jetbrains.jps.appengine.model.JpsAppEngineExtensionService;\n import org.jetbrains.jps.appengine.model.JpsAppEngineModuleExtension;\n@@ -139,13 +140,9 @@ public class AppEngineEnhancerBuilder extends ModuleLevelBuilder {\n   }\n \n \n+  @NotNull\n   @Override\n-  public String getName() {\n-    return NAME;\n-  }\n-\n-  @Override\n-  public String getDescription() {\n+  public String getPresentableName() {\n     return NAME;\n   }\n \n",
        "1": "Refactor AppEngineEnhancerBuilder class",
        "2": "remove unnecessary declarations from Kotlin class",
        "3": " Added org.jetbrains.annotations.NotNull annotation to method signatures in AppEngineEnhancerBuilder class",
        "4": "fixed builder names in messages",
        "5": "fixed updating files copied by resource compiler to module output in artifacts",
        "6": "removed BooleanExpression dependency",
        "7": " Modified AppEngineEnhancerBuilder to use @NotNull annotation and updated getPresentableName() method.",
        "8": "don ' t create empty - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
    },
    {
        "diff": "diff --git a/src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java b/src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java\nindex 34c0829..76a1411 100644\n--- a/src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java\n+++ b/src/java/org/apache/cassandra/concurrent/RetryingScheduledThreadPoolExecutor.java\n@@ -1,4 +1,25 @@\n package org.apache.cassandra.concurrent;\n+/*\n+ * \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * \n+ */\n+\n \n import java.util.concurrent.*;\n \n",
        "1": "add missing license header",
        "2": " Added license header and moved package statement to the top of the file.",
        "3": "add license header",
        "4": "add missing header header",
        "5": "Refactor RetryingScheduledThreadPoolExecutor to add license header.",
        "6": "Added license notice to RetryingScheduledThreadPoolExecutor",
        "7": "add missing license header",
        "8": "Add missing licence header"
    },
    {
        "diff": "diff --git a/presto-verifier/src/main/java/com/facebook/presto/verifier/Validator.java b/presto-verifier/src/main/java/com/facebook/presto/verifier/Validator.java\nindex 9873987..a28ed3c 100644\n--- a/presto-verifier/src/main/java/com/facebook/presto/verifier/Validator.java\n+++ b/presto-verifier/src/main/java/com/facebook/presto/verifier/Validator.java\n@@ -104,10 +104,6 @@ public class Validator\n \n     public boolean isSkipped()\n     {\n-        if (getControlResult().getState() == State.TIMEOUT || getTestResult().getState() == State.TIMEOUT) {\n-            return true;\n-        }\n-\n         if (!checkCorrectness) {\n             return false;\n         }\n@@ -124,6 +120,10 @@ public class Validator\n             return true;\n         }\n \n+        if (getTestResult().getState() == State.TIMEOUT) {\n+            return true;\n+        }\n+\n         return false;\n     }\n \n",
        "1": "Fix NPE in verifier",
        "2": "Fix NPE in SqlTaskExecution . isFinished",
        "3": "Fix theoretical bug in XMPPTCPConnection",
        "4": "Fix bug where class wouldn ' t resume",
        "5": " Changed how skipped tests are determined in Validator.java: added check for test result state instead of control result state.",
        "6": " Fix Validator isSkipped method to properly account for test timeouts.",
        "7": "Refactor isSkipped method in Validator class",
        "8": "Fix bug in Validator"
    },
    {
        "diff": "diff --git a/library/src/main/java/me/gujun/android/taggroup/TagGroup.java b/library/src/main/java/me/gujun/android/taggroup/TagGroup.java\nindex d22ff85..f2482f4 100644\n--- a/library/src/main/java/me/gujun/android/taggroup/TagGroup.java\n+++ b/library/src/main/java/me/gujun/android/taggroup/TagGroup.java\n@@ -9,8 +9,6 @@ import android.graphics.Paint;\n import android.graphics.Path;\n import android.graphics.PathEffect;\n import android.graphics.RectF;\n-import android.text.Editable;\n-import android.text.TextWatcher;\n import android.text.method.ArrowKeyMovementMethod;\n import android.util.AttributeSet;\n import android.util.TypedValue;\n@@ -477,21 +475,6 @@ public class TagGroup extends ViewGroup {\n             setTextSize(mTextSize);\n             setClickable(true);\n \n-            addTextChangedListener(new TextWatcher() {\n-                @Override\n-                public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n-                }\n-\n-                @Override\n-                public void onTextChanged(CharSequence s, int start, int before, int count) {\n-                }\n-\n-                @Override\n-                public void afterTextChanged(Editable s) {\n-                    requestLayout();\n-                }\n-            });\n-\n             mState = state;\n \n             if (state == STATE_INPUT) {\n",
        "1": "Revert \" PreferenceActivity didn ' t change method completion detection detection super .",
        "2": " Fixed layout issues in TagGroup.java",
        "3": "Remove unnecessary method calls",
        "4": " Removed unnecessary TextWatcher implementation and simplified code for TagGroup view.",
        "5": "Remove text watcher",
        "6": "use the simplest UnderlineSpan subclass",
        "7": "Remove unused code",
        "8": "Remove unused TextWatcher in TagGroup class."
    },
    {
        "diff": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java\nindex d9b363c..059094c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java\n@@ -15,13 +15,10 @@ import com.facebook.presto.sql.planner.optimizations.UnaliasSymbolReferences;\n import com.google.common.collect.ImmutableList;\n import com.google.inject.Inject;\n \n-import javax.inject.Singleton;\n-\n import java.util.List;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n-@Singleton\n public class PlanOptimizersFactory\n {\n     private final Metadata metadata;\n",
        "1": "Remove Singleton annotation from class",
        "2": " Removed unnecessary import statement for javax.inject.Singleton and added missing @Inject annotation for PlanOptimizersFactory class.",
        "3": "remove singleton annotation",
        "4": "fix missing import",
        "5": " Added Singleton annotation to PlanOptimizersFactory",
        "6": "Remove @ Ignore from @ A",
        "7": "Remove @Singleton annotation from PlanOptimizersFactory",
        "8": "Remove unused imports"
    },
    {
        "diff": "diff --git a/services/java/com/android/server/net/NetworkPolicyManagerService.java b/services/java/com/android/server/net/NetworkPolicyManagerService.java\nindex e7d6063..99569a8 100644\n--- a/services/java/com/android/server/net/NetworkPolicyManagerService.java\n+++ b/services/java/com/android/server/net/NetworkPolicyManagerService.java\n@@ -385,10 +385,6 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {\n     private void ensureActiveMobilePolicyLocked() {\n         if (LOGV) Slog.v(TAG, \"ensureActiveMobilePolicyLocked()\");\n         final String subscriberId = getActiveSubscriberId();\n-        if (subscriberId == null) {\n-            if (LOGV) Slog.v(TAG, \"no active mobile network, ignoring policy check\");\n-            return;\n-        }\n \n         // examine to see if any policy is defined for active mobile\n         boolean mobileDefined = false;\n@@ -412,6 +408,7 @@ public class NetworkPolicyManagerService extends INetworkPolicyManager.Stub {\n \n             mNetworkPolicy.add(new NetworkPolicy(\n                     TEMPLATE_MOBILE_ALL, subscriberId, cycleDay, 4 * GB_IN_BYTES, LIMIT_DISABLED));\n+            writePolicyLocked();\n         }\n     }\n \n",
        "1": "Fix NPEs in the code message .",
        "2": " Added new policy for active mobile network",
        "3": " Ensure active mobile policy is set for the current subscriber.",
        "4": "Add missing wallpaper service lock .",
        "5": "Add writePolicyLocked() method call in ensureActiveMobilePolicyLocked() method.",
        "6": "Generate default policy for devices without IMSI.",
        "7": "Fix Slog . Slog ( )",
        "8": "Fix activity stack leak ."
    },
    {
        "diff": "diff --git a/subprojects/testing-jvm/src/main/java/org/gradle/jvm/plugins/JUnitTestSuitePlugin.java b/subprojects/testing-jvm/src/main/java/org/gradle/jvm/plugins/JUnitTestSuitePlugin.java\nindex 62fcb3d..723aa26 100644\n--- a/subprojects/testing-jvm/src/main/java/org/gradle/jvm/plugins/JUnitTestSuitePlugin.java\n+++ b/subprojects/testing-jvm/src/main/java/org/gradle/jvm/plugins/JUnitTestSuitePlugin.java\n@@ -20,6 +20,7 @@ import org.gradle.api.file.FileCollection;\n import org.gradle.api.internal.file.FileOperations;\n import org.gradle.api.tasks.testing.Test;\n import org.gradle.api.tasks.testing.TestTaskReports;\n+import org.gradle.jvm.internal.WithJvmAssembly;\n import org.gradle.jvm.platform.JavaPlatform;\n import org.gradle.jvm.platform.internal.DefaultJavaPlatform;\n import org.gradle.jvm.test.JUnitTestSuiteBinarySpec;\n@@ -81,14 +82,7 @@ public class JUnitTestSuitePlugin implements Plugin<Project> {\n                 }\n \n                 private void configureTaskDependencies(final Test test) {\n-                    binary.getTasks().withType(PlatformJavaCompile.class).all(new Action<PlatformJavaCompile>() {\n-                        @Override\n-                        public void execute(PlatformJavaCompile platformJavaCompile) {\n-                            // todo: we should probably find a way to better register dependencies\n-                            // for the test task\n-                            test.dependsOn(platformJavaCompile);\n-                        }\n-                    });\n+                    test.dependsOn(((WithJvmAssembly) binary).getAssembly());\n                 }\n \n                 private File configureReports(Test test) {\n",
        "1": " Added dependency on JUnit test suite binary for Java platform.",
        "2": "Revert \" don ' t automatically show exceptions in initialize .",
        "3": "Removed dead code",
        "4": "Fix JUnitTestSuitePlugin test",
        "5": "Refactor JUnitTestSuitePlugin to use WithJvmAssembly for task dependencies.",
        "6": " Added dependency on JUnit Test Suite Binary Spec for test tasks",
        "7": "Fixed test ( no functional change )",
        "8": "Wire the `Test` task to the `JvmAssembly`, rather than the compile task"
    },
    {
        "diff": "diff --git a/WordPress/src/main/java/org/wordpress/android/util/WPUrlUtils.java b/WordPress/src/main/java/org/wordpress/android/util/WPUrlUtils.java\nindex 45b022726..157949060 100644\n--- a/WordPress/src/main/java/org/wordpress/android/util/WPUrlUtils.java\n+++ b/WordPress/src/main/java/org/wordpress/android/util/WPUrlUtils.java\n@@ -20,11 +20,7 @@ public class WPUrlUtils {\n     public static synchronized boolean isWordPressCom(String url) {\n         return UrlUtils.getHost(url).endsWith(\"wordpress.com\");\n     }\n-\n-    public static synchronized boolean isFilesWordPressCom(String url) {\n-        return UrlUtils.getHost(url).endsWith(\"files.wordpress.com\");\n-    }\n-\n+    \n     public static synchronized boolean isWordPressCom(URL url) {\n         if (url == null) {\n             return false;\n",
        "1": "Removed unneeded method",
        "2": "Remove unused method",
        "3": " Fixed endpoint for isWordPressCom method to correctly handle URL null values",
        "4": "Remove unused method",
        "5": "Remove unnecessary method isFilesWordPressCom() from WPUrlUtils.java",
        "6": "Changing isVideo utility method visibility to public .",
        "7": " Remove unused method isFilesWordPressCom and update isWordPressCom to accept URLs instead of strings",
        "8": "Removed unused method"
    },
    {
        "diff": "diff --git a/src/edu/stanford/nlp/international/spanish/process/SpanishTokenizer.java b/src/edu/stanford/nlp/international/spanish/process/SpanishTokenizer.java\nindex 7dc339d..e87e064 100644\n--- a/src/edu/stanford/nlp/international/spanish/process/SpanishTokenizer.java\n+++ b/src/edu/stanford/nlp/international/spanish/process/SpanishTokenizer.java\n@@ -350,6 +350,7 @@ public class SpanishTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n     Map<String,Integer> argOptionDefs = Generics.newHashMap();\n     argOptionDefs.put(\"help\", 0);\n     argOptionDefs.put(\"ftb\", 0);\n+    argOptionDefs.put(\"ancora\", 0);\n     argOptionDefs.put(\"lowerCase\", 0);\n     argOptionDefs.put(\"encoding\", 1);\n     argOptionDefs.put(\"orthoOpts\", 1);\n",
        "1": " Added support for the ancora option.",
        "2": "Add GuavaConverterFactory to JadConfig in Fixed broken compiler .",
        "3": " Added ancora to the map of argument options for the SpanishTokenizer.",
        "4": "Add command-line constraint",
        "5": "Add support for the \"ancora\" option in the SpanishTokenizer.",
        "6": "Add ancora ancora ancora",
        "7": "Add Spanish support",
        "8": "Expose the working command in the Chinese output"
    },
    {
        "diff": "diff --git a/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java b/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java\nindex a303cd2..158adbf 100644\n--- a/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java\n+++ b/src/test/java/redis/clients/jedis/tests/JedisPoolTest.java\n@@ -84,4 +84,15 @@ public class JedisPoolTest extends Assert {\n         newJedis.auth(\"foobared\");\n         newJedis.incr(\"foo\");\n     }\n+\n+    @Test\n+    public void securePool() {\n+        JedisPoolConfig config = new JedisPoolConfig();\n+        config.setTestOnBorrow(true);\n+        JedisPool pool = new JedisPool(config, hnp.host, hnp.port, 2000, \"foobared\");\n+        Jedis jedis = pool.getResource();\n+        jedis.set(\"foo\", \"bar\");\n+        pool.returnResource(jedis);\n+        pool.destroy();\n+    }\n }\n\\ No newline at end of file\n",
        "1": "Add accidentally removed test",
        "2": "add test to check JedisPool with password",
        "3": "Adding additional tests",
        "4": " Added test for secure pool with testOnBorrow configuration",
        "5": " Added test for secure Redis pool with authentication and setting test-on-borrow to true.",
        "6": "Add test for bar tests",
        "7": "Add unit test",
        "8": "Add securePool test to JedisPoolTest.java"
    },
    {
        "diff": "diff --git a/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ProxyServlet.java b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ProxyServlet.java\nindex b5d8ed88bd..edb887b4c1 100644\n--- a/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ProxyServlet.java\n+++ b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ProxyServlet.java\n@@ -173,7 +173,9 @@ public class ProxyServlet extends HttpServlet\n      */\n     protected Logger createLogger()\n     {\n-        return Log.getLogger(getServletConfig().getServletName());\n+        String name = getServletConfig().getServletName();\n+        name = name.replace('-', '.');\n+        return Log.getLogger(name);\n     }\n \n     public void destroy()\n",
        "1": " Modified ProxyServlet.java to replace hyphens with dots in logger name.",
        "2": " Fixed logging configuration in ProxyServlet to use proper namespace",
        "3": "Encoded special characters in toString ( ) .",
        "4": "Refactor logger creation in ProxyServlet",
        "5": "Reduce ThreadLocal . remove ( ) weak reference garbage",
        "6": "Fixing the build",
        "7": "Mangling the logger name for better configurability.",
        "8": "Fix NPE in destroy"
    },
    {
        "diff": "diff --git a/python/educational-core/student/src/com/jetbrains/edu/learning/courseFormat/Task.java b/python/educational-core/student/src/com/jetbrains/edu/learning/courseFormat/Task.java\nindex 89d613d..75275b1 100644\n--- a/python/educational-core/student/src/com/jetbrains/edu/learning/courseFormat/Task.java\n+++ b/python/educational-core/student/src/com/jetbrains/edu/learning/courseFormat/Task.java\n@@ -28,6 +28,7 @@ public class Task implements StudyItem {\n   private int myIndex;\n   private StudyStatus myStatus = StudyStatus.Unchecked;\n \n+  @SerializedName(\"stepic_id\")\n   @Expose private int myStepicId;\n   \n   @SerializedName(\"task_files\")\n",
        "1": "eliminate eclipse warnings",
        "2": "Added stepic_id field to Task class",
        "3": " Changed the `stepic_id` field from optional to required in `Task` class.",
        "4": "add new position for the pull annotation",
        "5": "add stepic_id \" stepic_id \"",
        "6": " Added field `stepic_id` to Task class for storing Stepik task ID.",
        "7": "Add expose annotation to stepic id field in Task",
        "8": "Minor remove my prefix from stepic id serialization name"
    },
    {
        "diff": "diff --git a/java/org/apache/tomcat/util/net/NioEndpoint.java b/java/org/apache/tomcat/util/net/NioEndpoint.java\nindex 23f603a8c..f981f85c9 100644\n--- a/java/org/apache/tomcat/util/net/NioEndpoint.java\n+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java\n@@ -1644,6 +1644,8 @@ public class NioEndpoint extends AbstractEndpoint {\n                         ExceptionUtils.handleThrowable(letsHopeWeDontGetHere);\n                     }\n                 }\n+            } catch (VirtualMachineError vme) {\n+                ExceptionUtils.handleThrowable(vme);\n             }catch ( Throwable t ) {\n                 log.error(\"\",t);\n                 if (socket != null) {\n",
        "1": "Don ' t log an an error rather than warning",
        "2": "NIO endpoint should not be swallowing Virtual machine errors",
        "3": " Fix issue with NioEndpoint's handling of VirtualMachineError.",
        "4": "Handle VirtualMachineError in NioEndpoint",
        "5": "Don ' t try catch multiple parameters .",
        "6": "Catch everything , as any unexpected exception would kill the server .",
        "7": " Added catch block for VirtualMachineError and Throwable in NioEndpoint.java",
        "8": "Added VirtualMachineError to NioEndpoint VirtualMachineError"
    },
    {
        "diff": "diff --git a/compiler/tests/org/jetbrains/jet/codegen/TestlibTest.java b/compiler/tests/org/jetbrains/jet/codegen/TestlibTest.java\nindex d1758fc..90b416a 100644\n--- a/compiler/tests/org/jetbrains/jet/codegen/TestlibTest.java\n+++ b/compiler/tests/org/jetbrains/jet/codegen/TestlibTest.java\n@@ -95,7 +95,8 @@ public class TestlibTest extends UsefulTestCase {\n \n         configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY, JetParsingTest.getTestDataDir() + \"/../../libraries/stdlib/test\");\n         configuration.add(CommonConfigurationKeys.SOURCE_ROOTS_KEY, JetParsingTest.getTestDataDir() + \"/../../libraries/kunit/src\");\n-        configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY, MessageCollectorPlainTextToStream.PLAIN_TEXT_TO_SYSTEM_ERR);\n+        configuration.put(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY,\n+                          new MessageCollectorPlainTextToStream(System.out, MessageCollectorPlainTextToStream.NON_VERBOSE));\n \n         myEnvironment = new JetCoreEnvironment(getTestRootDisposable(), configuration);\n \ndiff --git a/compiler/tests/org/jetbrains/jet/codegen/forTestCompile/ForTestCompileRuntime.java b/compiler/tests/org/jetbrains/jet/codegen/forTestCompile/ForTestCompileRuntime.java\nindex e8e1bcf..7aa470e 100644\n--- a/compiler/tests/org/jetbrains/jet/codegen/forTestCompile/ForTestCompileRuntime.java\n+++ b/compiler/tests/org/jetbrains/jet/codegen/forTestCompile/ForTestCompileRuntime.java\n@@ -58,7 +58,7 @@ public class ForTestCompileRuntime {\n     }\n \n     private static void compileStdlib(File destdir) throws IOException {\n-        ExitCode exitCode = new K2JVMCompiler().exec(System.err,\n+        ExitCode exitCode = new K2JVMCompiler().exec(System.out,\n                 \"-output\", destdir.getPath(),\n                 \"-src\", \"./libraries/stdlib/src\",\n                 \"-noStdlib\",\n",
        "1": "Fix test failure",
        "2": "Fixed failing tests",
        "3": "switch off compilation of stdlib and jdk - headers",
        "4": "Refactor code to use a more verbose message collector in TestlibTest and ForTestCompileRuntime.",
        "5": "Fix method naming",
        "6": "Replaced sout with serr in some test to reduce noise.",
        "7": " Fixed compilation of stdlib sources in ForTestCompileRuntime.",
        "8": " Update message collector to use plain text instead of System.err"
    },
    {
        "diff": "diff --git a/src/net/java/sip/communicator/impl/protocol/sip/SipStackSharing.java b/src/net/java/sip/communicator/impl/protocol/sip/SipStackSharing.java\nindex 7ff1ee8b1..8415e5551 100644\n--- a/src/net/java/sip/communicator/impl/protocol/sip/SipStackSharing.java\n+++ b/src/net/java/sip/communicator/impl/protocol/sip/SipStackSharing.java\n@@ -1031,7 +1031,13 @@ public class SipStackSharing\n         while (iterPP.hasNext())\n         {\n             ProtocolProviderServiceSipImpl candidate = iterPP.next();\n-\n+            if(candidate.getAccountID()\n+                .getAccountPropertyBoolean(\n+                    ProtocolProviderFactory.FORCE_PROXY_BYPASS, false))\n+            {\n+                // Proxy check is disabled all connections are ok (HA sipXecs, sipXcom, ...)\n+                continue;\n+            }\n             if(candidate.getRegistrarConnection() == null)\n             {\n                 //RegistrarLess connections are ok\n",
        "1": "Added additional check for proxy filter by address.",
        "2": "Fix crash when disabled connections is not disabled",
        "3": " Added check to skip Proxy check for connections with disabled Proxy check (HA sipXecs, sipXcom, ...)",
        "4": "Disable proxy check for certain SIP providers.",
        "5": "Allow end of chat window for RTP - video and free on demand .",
        "6": " Disabled proxy bypass for account ID 'accountID' in SipStackSharing.",
        "7": "Fix / disabled search scroll handling",
        "8": "Adds property to be able to set ptime sdp attribute for sip calls ."
    },
    {
        "diff": "diff --git a/common/src/main/java/tachyon/util/io/FileUtils.java b/common/src/main/java/tachyon/util/io/FileUtils.java\nindex b8d5128..f9a21ca 100644\n--- a/common/src/main/java/tachyon/util/io/FileUtils.java\n+++ b/common/src/main/java/tachyon/util/io/FileUtils.java\n@@ -168,4 +168,27 @@ public class FileUtils {\n       throw new IOException(\"Failed to delete \" + file);\n     }\n   }\n+  \n+  /**\n+   * Create the storage directory path, including any necessary but nonexistent parent directories.\n+   * If the directory already exists, do nothing. \n+   * \n+   * Also, appropriate directory permissions (777 + StickyBit, namely \"drwxrwxrwt\") are set.\n+   * \n+   * @param path storage directory path to create\n+   * @throws IOException when fails to create storage directory path\n+   */\n+  public static void createStorageDirPath(String path) throws IOException {\n+    File dir = new File(path);\n+    String absolutePath = dir.getAbsolutePath();\n+    if (!dir.exists()) {\n+      if (dir.mkdirs()) {\n+        changeLocalFileToFullPermission(absolutePath);\n+        setLocalFileStickyBit(absolutePath);\n+        LOG.info(\"Folder {} was created!\", path);\n+      } else {\n+        throw new IOException(\"Failed to create folder \" + path);\n+      }\n+    }\n+  }\n }\n",
        "1": "Add createStorageDirPath directory to FileUtils",
        "2": "Add a little more tests for optional nodes",
        "3": " Added method to create storage directory path with proper permissions and sticky bit (#168-27)",
        "4": "Add method to create storage directory path with appropriate permissions.",
        "5": "Add util method 'createStorageDirPath' in tachyon.util.io.FileUtils.java",
        "6": "Add a message for hinting in the message dialog",
        "7": " Added createStorageDirPath method to create storage directory path with appropriate permissions.",
        "8": "Add file existence checking in FileUtils"
    },
    {
        "diff": "diff --git a/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java\nindex 002c6f6..67ce298 100644\n--- a/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java\n+++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java\n@@ -85,10 +85,7 @@ public class FsBlobContainer extends AbstractBlobContainer {\n     @Override\n     public void deleteBlob(String blobName) throws IOException {\n         Path blobPath = path.resolve(blobName);\n-        if (!Files.deleteIfExists(blobPath)) {\n-            // blobPath does not exist\n-            throw new IOException(\"File [\" + blobPath.toString() + \"] does not exist\");\n-        }\n+        Files.delete(blobPath);\n     }\n \n     @Override\n",
        "1": "Changed Files.deleteIfExists to Files.delete in FsBlobContainer",
        "2": "Only resolve host if explicitly allowed .",
        "3": "Fix bug in FsBlobContainer",
        "4": "remove chatty leniency",
        "5": "don ' t throw exception here ( instead of directories )",
        "6": " Deletes blob file if it exists, otherwise throws an IOException.",
        "7": "Refactor deleteBlob method in FsBlobContainer to simplify code and improve error handling.",
        "8": " Fixed issue where deleteBlob() would throw an exception if the blob path did not exist, now uses Files.delete() instead."
    },
    {
        "diff": "diff --git a/src/main/java/com/zaxxer/hikari/HikariConfig.java b/src/main/java/com/zaxxer/hikari/HikariConfig.java\nindex daae86a..3d24b36 100644\n--- a/src/main/java/com/zaxxer/hikari/HikariConfig.java\n+++ b/src/main/java/com/zaxxer/hikari/HikariConfig.java\n@@ -829,7 +829,6 @@ public class HikariConfig implements HikariConfigMXBean\n \n       if (idleTimeout + TimeUnit.SECONDS.toMillis(1) > maxLifetime && maxLifetime > 0) {\n          LOGGER.warn(\"idleTimeout is close to or greater than maxLifetime, disabling it.\");\n-         maxLifetime = idleTimeout;\n          idleTimeout = 0;\n       }\n \n",
        "1": "",
        "2": "do not set maxLifetime when disabling idle timeout",
        "3": "removed unnecessary continue statement",
        "4": "Remove unnecessary check",
        "5": " Fixed issue with idleTimeout being close to or greater than maxLifetime, disabling it.",
        "6": " Disable idle timeout when it's close to or greater than max lifetime.",
        "7": "\"Disable idleTimeout if it is close to or greater than maxLifetime\"",
        "8": "Cleared dead code"
    },
    {
        "diff": "diff --git a/hystrix-core/src/test/java/com/netflix/hystrix/HystrixObservableCollapserTest.java b/hystrix-core/src/test/java/com/netflix/hystrix/HystrixObservableCollapserTest.java\nindex a3212ff..3b47d29 100644\n--- a/hystrix-core/src/test/java/com/netflix/hystrix/HystrixObservableCollapserTest.java\n+++ b/hystrix-core/src/test/java/com/netflix/hystrix/HystrixObservableCollapserTest.java\n@@ -780,7 +780,7 @@ public class HystrixObservableCollapserTest {\n         private final Collection<CollapsedRequest<String, String>> requests;\n \n         TestCollapserCommand(Collection<CollapsedRequest<String, String>> requests) {\n-            super(testPropsBuilder().setCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionTimeoutInMilliseconds(50)));\n+            super(testPropsBuilder().setCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionTimeoutInMilliseconds(1000)));\n             this.requests = requests;\n         }\n \n",
        "1": "Increased timeout value in HystrixObservableCollapserTest to accomodate slow Travis",
        "2": " Fixed execution timeout in HystrixObservableCollapserTest to 1000 milliseconds for better test performance.",
        "3": "Fix test in HystrixObservableCollapserTest",
        "4": "Fixed a test bug",
        "5": " Updated execution timeout to 1000 milliseconds in TestCollapserCommand constructor.",
        "6": "Increased batch command timeout in HystrixCollapserTest to accommodate Travis slowness",
        "7": "Increased batch command timeout in HystrixCollapserTest to accommodate Travis slowness",
        "8": "Increase execution timeout in TestCollapserCommand constructor"
    },
    {
        "diff": "diff --git a/h2o-algos/src/main/java/hex/glm/GLMModel.java b/h2o-algos/src/main/java/hex/glm/GLMModel.java\nindex c4cf0ac94..195184702 100755\n--- a/h2o-algos/src/main/java/hex/glm/GLMModel.java\n+++ b/h2o-algos/src/main/java/hex/glm/GLMModel.java\n@@ -55,7 +55,16 @@ public class GLMModel extends Model<GLMModel,GLMModel.GLMParameters,GLMModel.GLM\n   public double [] beta() { return _output._global_beta;}\n   public String [] names(){ return _output._names;}\n \n-\n+  @Override\n+  public double deviance(double w, double y, double f) {\n+    if (w == 0) {\n+      return 0;\n+    } else if (w == 1) {\n+      return _parms.deviance(y, f);\n+    } else {\n+      return Double.NaN; //TODO: add deviance(w, y, f)\n+    }\n+  }\n \n   public static class GLMParameters extends Model.Parameters {\n     // public int _response; // TODO: the standard is now _response_column in SupervisedModel.SupervisedParameters\n",
        "1": " Added deviance function for GLMModel with three parameters: w, y, and f.",
        "2": "Adding a method to clear the image URI .",
        "3": "Fixed model rank computation for multinomial glm",
        "4": " Added deviance function for GLMModel",
        "5": "Add deviance calculation for weighted observations in GLMModel.",
        "6": "Added additional test for bulk input .",
        "7": "Add deviance to GLM .",
        "8": "Add proper deviance(w,y,f) for GLMModel, wasn't overriding base class implementation with Gaussian."
    },
    {
        "diff": "diff --git a/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java b/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java\nindex 7b165a7..f0aad36 100644\n--- a/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java\n+++ b/src/test/java/org/elasticsearch/index/mapper/geo/GeoShapeFieldMapperTests.java\n@@ -189,7 +189,7 @@ public class GeoShapeFieldMapperTests extends ElasticsearchSingleNodeTest {\n \n \n             DocumentMapper defaultMapper = parser.parse(mapping);\n-            FieldMapper fieldMapper = defaultMapper.mappers().name(\"location\").mapper();\n+            FieldMapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n             assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n \n             GeoShapeFieldMapper geoShapeFieldMapper = (GeoShapeFieldMapper) fieldMapper;\n",
        "1": "Fix broken maven tests",
        "2": "Refactor the code to use the getMapper() method instead of the deprecated name() method.",
        "3": "unbreak the COMPILE",
        "4": "[ TEST ] Fix the failing test .",
        "5": " Added GeoShapeFieldMapper to 'location' field in GeoShapeFieldMapperTests",
        "6": " Update GeoShapeFieldMapperTests to use getMapper instead of name-based lookup for location field.",
        "7": "Fix test case",
        "8": "Improve test stability"
    },
    {
        "diff": "diff --git a/JodaTime/src/java/org/joda/time/convert/StringConverter.java b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\nindex 941dc6e..d39b533 100644\n--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n@@ -206,7 +206,7 @@ class StringConverter extends AbstractConverter\n             throw new IllegalArgumentException(\"Format invalid: \" + str);\n         }\n \n-        DateTimeParser dateTimeParser = ISODateTimeFormat.getInstance().dateTimeParser();\n+        DateTimeParser dateTimeParser = ISODateTimeFormat.getInstance(chrono).dateTimeParser();\n         PeriodFormatter periodParser = ISOPeriodFormat.getInstance().standard();\n         long startInstant = 0, endInstant = 0;\n         Period period = null;\n",
        "1": "Fix a bug in timezone obtaining",
        "2": "Update DateTimeParser initialization in StringConverter class",
        "3": " Replace ISODateTimeFormat.getInstance() with ISODateTimeFormat.getInstance(chrono) to use the specified chronology.",
        "4": "Ensure chronology used in parse",
        "5": " Added ISODateTimeFormat instance for date-time parser",
        "6": "Fix a bug in the invalid invalid invalid invalid",
        "7": "Fixed a bug where channelInactive ( ) is not triggered for local transport",
        "8": "Fixed copy / paste error"
    },
    {
        "diff": "diff --git a/library/src/main/java/com/mikepenz/materialdrawer/DrawerBuilder.java b/library/src/main/java/com/mikepenz/materialdrawer/DrawerBuilder.java\nindex 43a22ef..ce6626f 100644\n--- a/library/src/main/java/com/mikepenz/materialdrawer/DrawerBuilder.java\n+++ b/library/src/main/java/com/mikepenz/materialdrawer/DrawerBuilder.java\n@@ -915,7 +915,7 @@ public class DrawerBuilder {\n      *\n      * @return\n      */\n-    protected FastAdapter getAdapter() {\n+    protected FastAdapter<IDrawerItem> getAdapter() {\n         if (mAdapter == null) {\n             mAdapter = new FastAdapter();\n             mAdapter.setHasStableIds(mHasStableIds);\n@@ -923,15 +923,15 @@ public class DrawerBuilder {\n         return mAdapter;\n     }\n \n-    protected IItemAdapter getItemAdapter() {\n+    protected IItemAdapter<IDrawerItem> getItemAdapter() {\n         return mItemAdapter;\n     }\n \n-    protected IItemAdapter getHeaderAdapter() {\n+    protected IItemAdapter<IDrawerItem> getHeaderAdapter() {\n         return mHeaderAdapter;\n     }\n \n-    protected IItemAdapter getFooterAdapter() {\n+    protected IItemAdapter<IDrawerItem> getFooterAdapter() {\n         return mFooterAdapter;\n     }\n \ndiff --git a/library/src/main/java/com/mikepenz/materialdrawer/MiniDrawer.java b/library/src/main/java/com/mikepenz/materialdrawer/MiniDrawer.java\nindex 7d5b4c0..b943978 100644\n--- a/library/src/main/java/com/mikepenz/materialdrawer/MiniDrawer.java\n+++ b/library/src/main/java/com/mikepenz/materialdrawer/MiniDrawer.java\n@@ -174,7 +174,7 @@ public class MiniDrawer {\n         return mRecyclerView;\n     }\n \n-    public FastAdapter getDrawerAdapter() {\n+    public FastAdapter<IDrawerItem> getDrawerAdapter() {\n         return mAdapter;\n     }\n \n",
        "1": " Fixes adapter inheritance and stability issue",
        "2": "add possibility to set the MiniDrawer in RTL mode to display the shadow on the other side",
        "3": "add protected to EP_NAME",
        "4": " Update adapter classes to use generic type parameters for improved type safety.",
        "5": "type the getter for the adapters",
        "6": "Update generic types in DrawerBuilder and MiniDrawer classes",
        "7": "make IItemAdapter IItemAdapter",
        "8": "made self method protected"
    },
    {
        "diff": "diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/OALAudioTrack.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/OALAudioTrack.java\nindex 531934a..763fe07 100644\n--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/OALAudioTrack.java\n+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/objectal/OALAudioTrack.java\n@@ -55,7 +55,7 @@ public class OALAudioTrack extends NSObject {\n \t@Property\n \tpublic native void setPaused (boolean paused);\n \n-\t@Property(selector = \"isPlaying\")\n+\t@Property\n \tpublic native boolean isPlaying ();\n \n \t@Property\n",
        "1": "removed obsolete parameter",
        "2": "[ fixed ] empty metrics in metagun touchMoved - > mouseMoved",
        "3": "Fixed selector used for the isPlaying() method in OALAudioTrack.",
        "4": "RoboVM doesn ' t expose duration , even though OALAudioTrack does .",
        "5": "Fix isPlaying property in OALAudioTrack class",
        "6": "Fix bug in OALAudioTrack",
        "7": " Replace `isPlaying` getter with a synthesized getter for `playing` property.",
        "8": " Fixed getter for isPlaying property"
    },
    {
        "diff": "diff --git a/java/org/apache/coyote/AbstractProcessor.java b/java/org/apache/coyote/AbstractProcessor.java\nindex 908ee8902..5a6b5e860 100644\n--- a/java/org/apache/coyote/AbstractProcessor.java\n+++ b/java/org/apache/coyote/AbstractProcessor.java\n@@ -20,6 +20,7 @@ import java.io.IOException;\n import java.io.InterruptedIOException;\n import java.nio.ByteBuffer;\n import java.util.Iterator;\n+import java.util.concurrent.RejectedExecutionException;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import javax.servlet.RequestDispatcher;\n@@ -157,7 +158,7 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement\n     protected void execute(Runnable runnable) {\n         SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n         if (socketWrapper == null) {\n-            getLog().warn(sm.getString(\"abstractProcessor.noExecute\"), new Exception());\n+            throw new RejectedExecutionException(sm.getString(\"abstractProcessor.noExecute\"));\n         } else {\n             socketWrapper.getExecutor().execute(runnable);\n         }\n",
        "1": "Use the standard RejectedExecutionException",
        "2": "handle Compression . NONE in CassandraServer",
        "3": "Throw RejectedExecutionException if socketWrapper is null",
        "4": " Added concurrent rejection mechanism for AbstractProcessor.",
        "5": " Added import statement for `java.util.concurrent.RejectedExecutionException` and threw a `RejectedExecutionException` instead of logging a warning when the `socketWrapper` is null.",
        "6": "Fix NPE in AbstractProcessor . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute . noExecute",
        "7": "Turn off an log information",
        "8": "Remove unnecessary code"
    },
    {
        "diff": "diff --git a/core/java/android/net/NetworkStatsHistory.java b/core/java/android/net/NetworkStatsHistory.java\nindex c917af9..4ba44ca 100644\n--- a/core/java/android/net/NetworkStatsHistory.java\n+++ b/core/java/android/net/NetworkStatsHistory.java\n@@ -424,8 +424,8 @@ public class NetworkStatsHistory implements Parcelable {\n         final NetworkStats.Entry entry = new NetworkStats.Entry(\n                 IFACE_ALL, UID_ALL, TAG_NONE, 0L, 0L, 0L, 0L, 0L);\n         final Random r = new Random();\n-        while (rxBytes > 1024 && rxPackets > 128 && txBytes > 1024 && txPackets > 128\n-                && operations > 32) {\n+        while (rxBytes > 1024 || rxPackets > 128 || txBytes > 1024 || txPackets > 128\n+                || operations > 32) {\n             final long curStart = randomLong(r, start, end);\n             final long curEnd = randomLong(r, curStart, end);\n \n",
        "1": " Added randomized sampling for network statistics histograms.",
        "2": "Fix NPE in NetworkStatsHistory .",
        "3": "Fix issue where network traffic accounting might be lost",
        "4": "Fixing logical error in NetworkStatsHistory.java",
        "5": "Fix random stats generation for debugging.",
        "6": " Relaxed constraints on network stats history to allow for more varied data",
        "7": "Fix checkstyle issue",
        "8": "Remove the allocation of the filter view ."
    },
    {
        "diff": "diff --git a/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerDowngrader.java b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerDowngrader.java\nindex 189e2cd..2f0aecc 100644\n--- a/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerDowngrader.java\n+++ b/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ServerDowngrader.java\n@@ -29,6 +29,7 @@ import io.netty.handler.codec.http.HttpResponse;\n import io.netty.handler.codec.http.HttpVersion;\n import io.netty.handler.codec.http.LastHttpContent;\n import io.netty.util.ReferenceCountUtil;\n+import io.netty.util.internal.UnstableApi;\n \n import java.util.List;\n \n@@ -40,6 +41,7 @@ import java.util.List;\n  * HttpObject}, and back.  For simplicity, it converts to chunked encoding\n  * unless the entire stream is a single header.\n  */\n+@UnstableApi\n public class Http2ServerDowngrader extends MessageToMessageCodec<Http2StreamFrame, HttpObject> {\n \n     private final boolean validateHeaders;\n",
        "1": "Make NetworkEventFiringHandler sharable",
        "2": " Added support for chunked encoding in Http2ServerDowngrader",
        "3": "Annotate Http2ServerDowngrader with @UnstableApi",
        "4": " Added import statement for 'io.netty.util.internal.UnstableApi'; added 'UnstableApi' annotation to class 'Http2ServerDowngrader'.",
        "5": "Fix a compilation error",
        "6": "Adding thread safety annotations for tachyon . underfs in common module .",
        "7": "Add missing UnstableApi UnstableApi",
        "8": "Add @UnstableApi annotation to Http2ServerDowngrader class."
    },
    {
        "diff": "diff --git a/platform/core-impl/src/com/intellij/ide/plugins/PluginManagerCore.java b/platform/core-impl/src/com/intellij/ide/plugins/PluginManagerCore.java\nindex 803fb49..101dc09 100644\n--- a/platform/core-impl/src/com/intellij/ide/plugins/PluginManagerCore.java\n+++ b/platform/core-impl/src/com/intellij/ide/plugins/PluginManagerCore.java\n@@ -94,7 +94,7 @@ public class PluginManagerCore {\n       if (ourBuildNumber == null) {\n         ourBuildNumber = BUILD_NUMBER == null ? null : BuildNumber.fromString(BUILD_NUMBER);\n         if (ourBuildNumber == null) {\n-          ourBuildNumber = BuildNumber.fallback();\n+          ourBuildNumber = BuildNumber.fromString(\"SNAPSHOT\");\n         }\n       }\n       return ourBuildNumber;\n",
        "1": "use plugin name for plugin",
        "2": "do not show \" SNAPSHOT \"",
        "3": " Changed how build number is initialized in PluginManagerCore to use a hardcoded snapshot value instead of null or a fallback mechanism.",
        "4": "Set fallback build number to \"SNAPSHOT\" if it is not provided.",
        "5": "if version missed in plugin descriptor , set it to SNAPSHOT",
        "6": "retrieve file and spaces",
        "7": " Update PluginManagerCore to use SNAPSHOT as the fallback build number instead of the default fallback implementation.",
        "8": "use correct snapshot build number"
    },
    {
        "diff": "diff --git a/platform/util/testSrc/com/intellij/openapi/util/io/FileAttributesNio2ReadingTest.java b/platform/util/testSrc/com/intellij/openapi/util/io/FileAttributesNio2ReadingTest.java\nindex 68f2e88..d1d2c39 100644\n--- a/platform/util/testSrc/com/intellij/openapi/util/io/FileAttributesNio2ReadingTest.java\n+++ b/platform/util/testSrc/com/intellij/openapi/util/io/FileAttributesNio2ReadingTest.java\n@@ -17,7 +17,6 @@ package com.intellij.openapi.util.io;\n \n import com.intellij.openapi.util.SystemInfo;\n import org.junit.AfterClass;\n-import org.junit.Before;\n import org.junit.BeforeClass;\n \n import static org.junit.Assert.assertEquals;\n@@ -26,6 +25,8 @@ import static org.junit.Assume.assumeTrue;\n public class FileAttributesNio2ReadingTest extends FileAttributesReadingTest {\n   @BeforeClass\n   public static void setUpClass() throws Exception {\n+    assumeTrue(SystemInfo.isJavaVersionAtLeast(\"1.7\"));\n+\n     System.setProperty(FileSystemUtil.FORCE_USE_NIO2_KEY, \"true\");\n     FileSystemUtil.resetMediator();\n     assertEquals(\"NIO2\", FileSystemUtil.getMediatorName());\n@@ -36,11 +37,4 @@ public class FileAttributesNio2ReadingTest extends FileAttributesReadingTest {\n     System.setProperty(FileSystemUtil.FORCE_USE_NIO2_KEY, \"\");\n     FileSystemUtil.resetMediator();\n   }\n-\n-  @Override\n-  @Before\n-  public void setUp() throws Exception {\n-    assumeTrue(SystemInfo.isJavaVersionAtLeast(\"1.7\"));\n-    super.setUp();\n-  }\n }\n",
        "1": "Fixed assumption of Java 1.7 in FileAttributesNio2ReadingTest to ensure correct behavior.",
        "2": "Fix test setup in FileAttributesNio2ReadingTest",
        "3": "fixed test cases",
        "4": "Fix test expectations",
        "5": " Added assumption for Java version 1.7 or higher for NIO2 support in FileAttributesNio2ReadingTest.",
        "6": "commit last change",
        "7": "use BeforeClass , AfterClass to improve test executing speed",
        "8": "remove unnecessary test"
    },
    {
        "diff": "diff --git a/compiler/src/main/java/org/robovm/compiler/target/ios/SigningIdentity.java b/compiler/src/main/java/org/robovm/compiler/target/ios/SigningIdentity.java\nindex 43ef5b1a7..b582dcb78 100644\n--- a/compiler/src/main/java/org/robovm/compiler/target/ios/SigningIdentity.java\n+++ b/compiler/src/main/java/org/robovm/compiler/target/ios/SigningIdentity.java\n@@ -69,6 +69,8 @@ public class SigningIdentity implements Comparable<SigningIdentity> {\n     \n     protected static List<SigningIdentity> parse(String securityOutput) {\n         /* Output from security looks like this:\n+         *   [... ommitted output ...]\n+         *   Valid identities only\n          *   1) 433D4A1CD97F77226F67959905A2840265A92D31 \"iPhone Developer: Rolf Hudson (HS5OW37HQP)\" (CSSMERR_TP_CERT_REVOKED)\n          *   2) F8E60167BD74A2E9FC39B239E58CCD73BE1112E6 \"iPhone Developer: Rolf Hudson (HS5OW37HQP)\"\n          *   3) AC2EC9D4D26889649DE4196FBFD54BF5924169F9 \"iPhone Distribution: Acme Inc\"\n@@ -80,7 +82,7 @@ public class SigningIdentity implements Comparable<SigningIdentity> {\n             line = line.trim();\n             Matcher matcher = pattern.matcher(line);\n             if (!matcher.find()) {\n-                break;\n+                continue;\n             }\n             String name = matcher.group(2);\n             String fingerprint = matcher.group(1);\n",
        "1": " Added support for additional signing identities in iOS app signing.",
        "2": "Fix a bug in SigningIdentity . SigningIdentity .",
        "3": "Fix a bug in the SigningIdentity class related to parsing security output.",
        "4": " Fix parsing of security output to handle revoked certificates.",
        "5": "Fixed test on windows",
        "6": "Don ' t use deprecated method .",
        "7": "Continue loop in SigningIdentity",
        "8": "Fixed problem with JAR files that couldn ' t be found when launching iOS apps on device and simulator ."
    },
    {
        "diff": "diff --git a/library/src/main/java/com/pokegoapi/auth/GoogleUserCredentialProvider.java b/library/src/main/java/com/pokegoapi/auth/GoogleUserCredentialProvider.java\nindex 8f1ddc4..c902700 100644\n--- a/library/src/main/java/com/pokegoapi/auth/GoogleUserCredentialProvider.java\n+++ b/library/src/main/java/com/pokegoapi/auth/GoogleUserCredentialProvider.java\n@@ -104,8 +104,6 @@ public class GoogleUserCredentialProvider extends CredentialProvider {\n \t\t\tthrows LoginFailedException, RemoteServerException {\n \t\tthis.time = time;\n \t\tthis.client = client;\n-\n-\t\tauthbuilder = AuthInfo.newBuilder();\n \t}\n \n \t/**\n@@ -119,8 +117,6 @@ public class GoogleUserCredentialProvider extends CredentialProvider {\n \t\t\tthrows LoginFailedException, RemoteServerException {\n \t\tthis.time = new SystemTimeImpl();\n \t\tthis.client = client;\n-\n-\t\tauthbuilder = AuthInfo.newBuilder();\n \t}\n \n \n@@ -219,6 +215,8 @@ public class GoogleUserCredentialProvider extends CredentialProvider {\n \t\t\t\t+ (googleAuth.getExpiresIn() * 1000 - REFRESH_TOKEN_BUFFER_TIME);\n \t\ttokenId = googleAuth.getIdToken();\n \t\trefreshToken = googleAuth.getRefreshToken();\n+\t\t\n+\t\tauthbuilder = AuthInfo.newBuilder();\n \t}\n \n \t@Override\n",
        "1": "Do not pack main frame when a new plugin is added .",
        "2": "Only show progress dialog activity on pre - L",
        "3": "Defer building AuthInfo to after a refresh token is obtained",
        "4": "Fix bug in GoogleUserCredentialProvider",
        "5": "Merge remote-tracking branch 'origin/master' into local 'master'",
        "6": "Remove unnecessary code in GoogleUserCredentialProvider.",
        "7": "changed mx2 / my2 back",
        "8": " Fixed expiresIn value in GoogleUserCredentialProvider to avoid token expiration"
    },
    {
        "diff": "diff --git a/src/main/java/org/graylog2/restclient/lib/timeranges/TimeRange.java b/src/main/java/org/graylog2/restclient/lib/timeranges/TimeRange.java\nindex 82fafce..37a5491 100644\n--- a/src/main/java/org/graylog2/restclient/lib/timeranges/TimeRange.java\n+++ b/src/main/java/org/graylog2/restclient/lib/timeranges/TimeRange.java\n@@ -20,9 +20,6 @@ package org.graylog2.restclient.lib.timeranges;\n \n import java.util.Map;\n \n-/**\n- * @author Lennart Koopmann <lennart@torch.sh>\n- */\n public abstract class TimeRange {\n \n     public enum Type {\n@@ -85,7 +82,7 @@ public abstract class TimeRange {\n \n         switch (Type.valueOf(rangeType.toUpperCase())) {\n             case RELATIVE:\n-                return new RelativeRange(((Double) timerangeConfig.get(\"range\")).intValue());\n+                return new RelativeRange(((Number) timerangeConfig.get(\"range\")).intValue());\n             case ABSOLUTE:\n                 return new AbsoluteRange((String) timerangeConfig.get(\"from\"), (String) timerangeConfig.get(\"to\"));\n             case KEYWORD:\n",
        "1": " Added support for relative time ranges with integer values.",
        "2": "don ' t create a START_BILLING event for MIGRATE_ENTITLEMENT",
        "3": "Remove not - null bind to override master client certificate ( Prasanth Jayachandran , reviewed by Ashutosh Chauhan )",
        "4": "Fix TimeRange of TimeRange",
        "5": "Fix type casting issue in TimeRange class",
        "6": " Refactor TimeRange class to use Number instead of Double for relative ranges",
        "7": "reverted and deprecated getStringField methods",
        "8": "Cast range to Number instead of Double"
    },
    {
        "diff": "diff --git a/graylog2-shared/src/main/java/org/graylog2/shared/initializers/RestApiService.java b/graylog2-shared/src/main/java/org/graylog2/shared/initializers/RestApiService.java\nindex 3e5193e..7691893 100644\n--- a/graylog2-shared/src/main/java/org/graylog2/shared/initializers/RestApiService.java\n+++ b/graylog2-shared/src/main/java/org/graylog2/shared/initializers/RestApiService.java\n@@ -272,6 +272,7 @@ public class RestApiService extends AbstractIdleService {\n         ResourceConfig rc = new ResourceConfig()\n                 .property(NettyContainer.PROPERTY_BASE_URI, listenUri)\n                 .property(ServerProperties.BV_SEND_ERROR_IN_RESPONSE, true)\n+                .property(ServerProperties.WADL_FEATURE_DISABLE, true)\n                 .registerClasses(\n                         JacksonJaxbJsonProvider.class,\n                         JsonProcessingExceptionMapper.class,\n",
        "1": " Added property wadlFeatureDisable to disable WADL feature.",
        "2": "disable WADL generation for jersey",
        "3": "Set mOrientationChangeComplete ' s ' true ' setting",
        "4": "set default state for input stream .",
        "5": "add TODO for error reporting",
        "6": "Fix bug in RestApiService",
        "7": "Disable WADL feature in RestApiService.",
        "8": " Disable WADL feature in RestApiService."
    },
    {
        "diff": "diff --git a/main/java/uk/co/real_logic/sbe/PrimitiveType.java b/main/java/uk/co/real_logic/sbe/PrimitiveType.java\nindex 4caf5ab0..236c7ea2 100644\n--- a/main/java/uk/co/real_logic/sbe/PrimitiveType.java\n+++ b/main/java/uk/co/real_logic/sbe/PrimitiveType.java\n@@ -17,7 +17,8 @@\n package uk.co.real_logic.sbe;\n \n /**\n- * primitiveTypes\n+ * Primitive types from which all other types are composed.\n+ *\n  * <p/>\n  * <table>\n  *     <thead>\n@@ -183,7 +184,7 @@ public enum PrimitiveType\n      */\n     public static PrimitiveType lookup(final String value)\n     {\n-        for (final PrimitiveType p : values())\n+        for (final PrimitiveType p : Singleton.values)\n         {\n             if (value.equals(p.name))\n             {\n@@ -193,4 +194,13 @@ public enum PrimitiveType\n \n         throw new IllegalArgumentException(\"No PrimitiveType for value: \" + value);\n     }\n+\n+    /**\n+     * Used to hold a reference to the values array without having it defensively copied\n+     * on every call to {@link PrimitiveType#values()}\n+     */\n+    static class Singleton\n+    {\n+        public static final PrimitiveType[] values = PrimitiveType.values();\n+    }\n }\n",
        "1": " Added Singleton class to hold static reference to PrimitiveType.values() array.",
        "2": "Adds Calendars sync only columns to the contract",
        "3": " Added PrimitiveType.SINGLETON to hold values array without defensive copying.",
        "4": "Made identity immutable and not public ' s Javadoc",
        "5": "Refactor PrimitiveType class to improve performance and readability.",
        "6": "Use a cached singleton for PrimitiveType.lookup(name) to avoid defensive copy of values array.",
        "7": "added a flag for testing .",
        "8": "Added a values for the values that are not be values ."
    },
    {
        "diff": "diff --git a/src/net/java/sip/communicator/impl/protocol/jabber/ProtocolProviderServiceJabberImpl.java b/src/net/java/sip/communicator/impl/protocol/jabber/ProtocolProviderServiceJabberImpl.java\nindex 9f21ce558..bc05e9808 100644\n--- a/src/net/java/sip/communicator/impl/protocol/jabber/ProtocolProviderServiceJabberImpl.java\n+++ b/src/net/java/sip/communicator/impl/protocol/jabber/ProtocolProviderServiceJabberImpl.java\n@@ -2073,7 +2073,8 @@ public class ProtocolProviderServiceJabberImpl\n                     {\n                         logger.info(\"Jingle Nodes discovery terminated!\");\n                         logger.info(\"Found \" + nodes.getRelayEntries().size() +\n-                                \" Jingle Nodes relay\");\n+                                \" Jingle Nodes relay for account: \" +\n+                                accountID.getAccountAddress());\n                     }\n \n                     service.addEntries(nodes);\n",
        "1": " Added logging statement to include account ID in Jingle Nodes discovery message.",
        "2": "Adds account JID information for the Jingle Nodes relay numbers logging.",
        "3": "Add warning for non - physical resources .",
        "4": "Fix crash when closing a relay relay",
        "5": "Include domain name in SRV lookup log",
        "6": "Added logging for Jingle Nodes relay discovery.",
        "7": " Fixed bug in Jingle Nodes discovery logic for account  + accountID.getAccountAddress().",
        "8": "Add a null check for the versioned value object in convertStringToObject"
    },
    {
        "diff": "diff --git a/android/config/app/src/main/java/com/google/samples/quickstart/config/MainActivity.java b/android/config/app/src/main/java/com/google/samples/quickstart/config/MainActivity.java\nindex d424d41..9bf1378 100644\n--- a/android/config/app/src/main/java/com/google/samples/quickstart/config/MainActivity.java\n+++ b/android/config/app/src/main/java/com/google/samples/quickstart/config/MainActivity.java\n@@ -49,16 +49,17 @@ public class MainActivity extends AppCompatActivity implements GoogleApiClient.C\n \n     public void onConnected(Bundle connectionHint) {\n         Log.i(TAG, \"onConnected\");\n-\n+        // [START fetch_config_request]\n         ConfigApi.FetchConfigRequest request = new ConfigApi.FetchConfigRequest.Builder()\n                 .addCustomVariable(\"build\", \"dev\")\n                 .build();\n+        // [END fetch_config_request]\n+        // [START fetch_config_callback]\n         Config.ConfigApi.fetchConfig(mClient, request)\n                 .setResultCallback(new ResultCallback<ConfigApi.FetchConfigResult>() {\n                     @Override\n                     public void onResult(ConfigApi.FetchConfigResult fetchConfigResult) {\n                         Log.i(TAG, \"onResult\");\n-                        int statusCode = fetchConfigResult.getStatus().getStatusCode();\n                         if (fetchConfigResult.getStatus().isSuccess()) {\n                             long price = 100;\n                             boolean isPromo =\n@@ -85,6 +86,7 @@ public class MainActivity extends AppCompatActivity implements GoogleApiClient.C\n                         }\n                     }\n                 });\n+                // [END fetch_config_callback]\n     }\n \n     @Override\n",
        "1": "Add fetch config functionality and callback in MainActivity.java",
        "2": "Add missing fetch_config_callback fetch_config_callback",
        "3": " Fetched config with 'build' variable and updated it with value 'dev'.",
        "4": "Add regions for include code",
        "5": " Added custom variable to ConfigApi.FetchConfigRequest and updated callback to include promo pricing.",
        "6": "Analytics screen view tracking",
        "7": "Disable RT activity again .",
        "8": "temporarily remove unused variable \""
    },
    {
        "diff": "diff --git a/platform/lang-impl/src/com/intellij/codeInsight/completion/CompletionUtil.java b/platform/lang-impl/src/com/intellij/codeInsight/completion/CompletionUtil.java\nindex 30c3259..dbea5da 100644\n--- a/platform/lang-impl/src/com/intellij/codeInsight/completion/CompletionUtil.java\n+++ b/platform/lang-impl/src/com/intellij/codeInsight/completion/CompletionUtil.java\n@@ -137,6 +137,7 @@ public class CompletionUtil {\n   public static void emulateInsertion(LookupElement item, int offset, InsertionContext context) {\n     context.getOffsetMap().addOffset(CompletionInitializationContext.START_OFFSET, offset);\n     context.getOffsetMap().addOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET, offset);\n+    context.getOffsetMap().addOffset(CompletionInitializationContext.SELECTION_END_OFFSET, offset);\n     context.setTailOffset(offset);\n \n     final Editor editor = context.getEditor();\n",
        "1": "disable UI on showing",
        "2": "set minimum font size to Editor ' s text",
        "3": " Added offset for selection end in CompletionUtil.emulateInsertion.",
        "4": " Added SelectionEndOffset to CompletionInitializationContext for improved insertion experience.",
        "5": "do not show completion for completion",
        "6": "avoid scrolling to a non - primary caret on completion",
        "7": "missing offset when emulating lookup item insertion",
        "8": "Add offset for selection end in CompletionUtil.java."
    },
    {
        "diff": "diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java\nindex 6787d79a..e93453a3 100644\n--- a/src/main/java/org/bukkit/entity/LivingEntity.java\n+++ b/src/main/java/org/bukkit/entity/LivingEntity.java\n@@ -269,4 +269,13 @@ public interface LivingEntity extends Entity {\n      * @return A collection of {@link PotionEffect}s\n      */\n     public Collection<PotionEffect> getActivePotionEffects();\n+\n+    /**\n+     * Checks whether the entity has block line of sight to another.<br />\n+     * This uses the same algorithm that hostile mobs use to find the closest player.\n+     *\n+     * @param other The entity to determine line of sight to.\n+     * @return true if there is a line of sight, false if not.\n+     */\n+    public boolean hasLineOfSight(Entity other);\n }\ndiff --git a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java\nindex 4a4032b6..15e60c14 100644\n--- a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java\n+++ b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java\n@@ -756,4 +756,8 @@ public class TestPlayer implements Player {\n     public boolean isBlocking() {\n         throw new UnsupportedOperationException(\"Not supported yet.\");\n     }\n+\n+    public boolean hasLineOfSight(Entity other) {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n }\n",
        "1": "Add hasLineOfSight method to LivingEntity interface",
        "2": "Add an isValid ( ) method to Entity .",
        "3": "add the chat view for the tests .",
        "4": "Added ( String / remove ) World .",
        "5": "Added hasLineOfSight method to LivingEntity class",
        "6": " Add method hasLineOfSight(Entity other) to LivingEntity interface and implement it in TestPlayer class.",
        "7": "Add a method for the entity line .",
        "8": "Add LivingEntity.hasLineOfSight."
    },
    {
        "diff": "diff --git a/src/net/java/sip/communicator/impl/protocol/jabber/OperationSetPersistentPresenceJabberImpl.java b/src/net/java/sip/communicator/impl/protocol/jabber/OperationSetPersistentPresenceJabberImpl.java\nindex 69c168cf8..2d40ac1bf 100644\n--- a/src/net/java/sip/communicator/impl/protocol/jabber/OperationSetPersistentPresenceJabberImpl.java\n+++ b/src/net/java/sip/communicator/impl/protocol/jabber/OperationSetPersistentPresenceJabberImpl.java\n@@ -1528,6 +1528,19 @@ public class OperationSetPersistentPresenceJabberImpl\n                                         o2, parentProvider).getStatus()\n                                       - jabberStatusToPresenceStatus(\n                                             o1, parentProvider).getStatus();\n+                                // We have run out of \"logical\" ways to order\n+                                // the presences inside the TreeSet. We have\n+                                // make sure we are consinstent with equals.\n+                                // We do this by comparing the unique resource\n+                                // names. If this evaluates to 0 again, then we\n+                                // can safely assume this presence object \n+                                // represents the same resource and by that the\n+                                // same client.\n+                                if(res == 0)\n+                                {\n+                                    res = o1.getFrom().compareTo(\n+                                        o2.getFrom());\n+                                }\n                             }\n \n                             return res;\n",
        "1": " Fixes ordering issue in PersistentPresenceJabberImpl by comparing unique resource names when all other comparison methods fail.",
        "2": "Fix ordering issue in OperationSetPersistentPresenceJabberImpl",
        "3": "Fixing TreeSet's Comparator",
        "4": "Avoid crash on BusinessProcess . isAssociated",
        "5": "Handle OPTIONS requests .",
        "6": "Improve send even if user is used .",
        "7": "Fix a bug where the presence is not be used",
        "8": " Added new logic to handle cases where the presences inside the TreeSet have the same unique resource names, improving consistency and equality comparison."
    },
    {
        "diff": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java\nindex 497d051..b26e80d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java\n@@ -143,7 +143,7 @@ public abstract class BroadcasterFactory {\n      * Return the default {@link BroadcasterFactory}.\n      *\n      * @return the default {@link BroadcasterFactory}.\n-     * @deprecated Use {@link org.atmosphere.cpr.AtmosphereConfig#resourcesFactory()}\n+     * @deprecated Use {@link org.atmosphere.cpr.AtmosphereConfig#getBroadcasterFactory()}\n      */\n     public synchronized static BroadcasterFactory getDefault() {\n         return factory;\n",
        "1": " Deprecated method 'getDefault()' in 'BroadcasterFactory' replaced with 'getBroadcasterFactory()' in version b26e80d.",
        "2": "Refactor deprecated method in BroadcasterFactory",
        "3": "Fix typo in javadoc",
        "4": "Add a convenience method in order to retrieve the underlying AtmosphereResource representing this Meteor",
        "5": "Fix wrong link",
        "6": "Fix parameter link in class description",
        "7": "Fix deprecated deprecated deprecated deprecated",
        "8": " Deprecate use of AtmosphereConfig#resourcesFactory() in favor of AtmosphereConfig#getBroadcasterFactory()."
    },
    {
        "diff": "diff --git a/fml/common/cpw/mods/fml/common/Loader.java b/fml/common/cpw/mods/fml/common/Loader.java\nindex 6566ac0a9..db591a80b 100644\n--- a/fml/common/cpw/mods/fml/common/Loader.java\n+++ b/fml/common/cpw/mods/fml/common/Loader.java\n@@ -497,11 +497,10 @@ public class Loader\n                 mod.nextState();\n             }\n         }\n-        catch (Exception e)\n+        catch (Throwable e)\n         {\n             log.warning(String.format(\"Failed to load mod class %s in %s\", classFileName, classSource.getAbsoluteFile()));\n             log.throwing(\"fml.server.Loader\", \"attemptLoad\", e);\n-            state = State.ERRORED;\n         }\n     }\n \n",
        "1": "don ' t fail the exception if it ' s not there .",
        "2": " Changed catch block to catch Throwable instead of Exception to handle unexpected errors.",
        "3": "Fix exception handling in Loader.java",
        "4": "Fix NPE when branding isn ' t present",
        "5": "Catch throwable (NoClassDefFoundError) and don't abort loading- it's probably a badly named class file.",
        "6": " Fixed exception handling in Loader.java to correctly log and handle errors.",
        "7": "Fix NPE in Loader .",
        "8": "Catch IllegalStateException when trying to load the stack trace jar service ."
    },
    {
        "diff": "diff --git a/src/main/java/org/opentripplanner/profile/ProfileRouter.java b/src/main/java/org/opentripplanner/profile/ProfileRouter.java\nindex d00280a20..f932543ca 100644\n--- a/src/main/java/org/opentripplanner/profile/ProfileRouter.java\n+++ b/src/main/java/org/opentripplanner/profile/ProfileRouter.java\n@@ -312,6 +312,7 @@ public class ProfileRouter {\n         rr.setRoutingContext(graph);\n         // Set batch after context, so both origin and dest vertices will be found.\n         rr.setBatch(true);\n+        rr.setWalkSpeed(request.walkSpeed);\n         // If this is not set, searches are very slow.\n         int worstElapsedTime = request.accessTime * 60; // from minutes to seconds\n         if (back) worstElapsedTime *= -1;\n@@ -351,6 +352,8 @@ public class ProfileRouter {\n         // Impose a max time to protect against very slow searches.\n         int worstElapsedTime = request.streetTime * 60;\n         rr.setWorstTime(rr.dateTime + worstElapsedTime);\n+        rr.setWalkSpeed(request.walkSpeed);\n+        rr.setBikeSpeed(request.bikeSpeed);\n         GenericAStar astar = new GenericAStar();\n         astar.setNPaths(1);\n         ShortestPathTree spt = astar.getShortestPathTree(rr, System.currentTimeMillis() + 5000);\n",
        "1": "remove unused \" fake target stop \"",
        "2": "Set walk and bike speed in ProfileRouter",
        "3": "apply walk and bike speeds",
        "4": " Added walk and bike speed settings to ProfileRouter.",
        "5": "set User - Agent query to be correct in pool manager",
        "6": " Commit message: Added walkSpeed and bikeSpeed parameters to ProfileRouter for improved search performance.",
        "7": "Fix bug in worstElapsedTime batch",
        "8": "Shorten the default graph ID to filter"
    },
    {
        "diff": "diff --git a/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonConnector.java b/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonConnector.java\nindex 369b9ea..c07054d 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonConnector.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/client/DefaultDaemonConnector.java\n@@ -63,6 +63,8 @@ public class DefaultDaemonConnector implements DaemonConnector {\n     private DaemonConnection findConnection(List<DaemonInfo> daemonInfos, Spec<? super DaemonContext> constraint) {\n         for (DaemonInfo daemonInfo : daemonInfos) {\n             if (!constraint.isSatisfiedBy(daemonInfo.getContext())) {\n+                LOGGER.debug(\"Found daemon {} however it's context does not match the desired criteria: {}.\"\n+                        + \" Looking for a different daemon...\", daemonInfo, constraint);\n                 continue;\n             }\n \ndiff --git a/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/context/DaemonCompatibilitySpec.java b/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/context/DaemonCompatibilitySpec.java\nindex 834e52a..3765ad5 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/context/DaemonCompatibilitySpec.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/launcher/daemon/context/DaemonCompatibilitySpec.java\n@@ -29,4 +29,9 @@ public class DaemonCompatibilitySpec implements Spec<DaemonContext> {\n         return potentialContext.getJavaHome().equals(desiredContext.getJavaHome())\n                 && potentialContext.getDaemonOpts().equals(desiredContext.getDaemonOpts());\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"Desired daemon context: \" + desiredContext;\n+    }\n }\n\\ No newline at end of file\n",
        "1": "Add toString ( ) to DiscreteDomains",
        "2": "Make the DaemonContext contract require that getJavaHome ( ) return the canonical file .",
        "3": " Added logging statement to DefaultDaemonConnector to debug when a daemon's context does not match the desired criteria.",
        "4": "Added debug to the daemon daemon daemon",
        "5": "Refactor DefaultDaemonConnector and DaemonCompatibilitySpec",
        "6": " Fixed compatibility check for DaemonConnector to match desired context.",
        "7": "Added a bit more logging for the daemon criteria matching.",
        "8": "added toString ( ) method to Segment . toString ( ) ."
    },
    {
        "diff": "diff --git a/sonar-server/src/test/java/org/sonar/server/rule2/RuleDataMediumTest.java b/sonar-server/src/test/java/org/sonar/server/rule2/RuleDataMediumTest.java\nindex d53f001852..8fe89796d6 100644\n--- a/sonar-server/src/test/java/org/sonar/server/rule2/RuleDataMediumTest.java\n+++ b/sonar-server/src/test/java/org/sonar/server/rule2/RuleDataMediumTest.java\n@@ -51,8 +51,7 @@ import static org.fest.assertions.Assertions.assertThat;\n public class RuleDataMediumTest {\n \n   @ClassRule\n-  public static ServerTester tester = new ServerTester()\n-    .setProperty(\"sonar.es.http.port\",\"9200\");\n+  public static ServerTester tester = new ServerTester();\n \n   RuleDao dao = tester.get(RuleDao.class);\n   RuleIndex index = tester.get(RuleIndex.class);\n",
        "1": "Fix quality flaw ( constant rename )",
        "2": "Fix test flaw",
        "3": " Added test for rule data medium.",
        "4": "fix quality flaw (es debug output)",
        "5": "Removed debug port",
        "6": " Remove unused 'sonar.es.http.port' property from RuleDataMediumTest.",
        "7": "Refactor RuleDataMediumTest class and remove unnecessary code.",
        "8": "Removed debug port"
    },
    {
        "diff": "diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationIT.java b/core/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationIT.java\nindex c236ea5..f34f46a 100644\n--- a/core/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationIT.java\n+++ b/core/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationIT.java\n@@ -19,6 +19,7 @@\n \n package org.elasticsearch.cluster.routing;\n \n+import org.apache.lucene.util.LuceneTestCase;\n import org.elasticsearch.action.index.IndexRequestBuilder;\n import org.elasticsearch.cluster.ClusterState;\n import org.elasticsearch.cluster.metadata.IndexMetaData;\n@@ -36,6 +37,7 @@ import static org.hamcrest.Matchers.equalTo;\n /**\n  */\n @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0)\n+@LuceneTestCase.AwaitsFix(bugUrl = \"http://build-us-00.elastic.co/job/es_core_master_windows-2012-r2/2074/testReport/ (boaz on it)\")\n public class DelayedAllocationIT extends ESIntegTestCase {\n \n     /**\n",
        "1": "Fix bug causing test failure in DelayedAllocationIT",
        "2": "[ TEST ] mark IndexWithShadowReplicasIT with awaitsfix",
        "3": " Added import for Apache Lucene utility class",
        "4": " Added LuceneTestCase.AwaitsFix annotation to delay allocation IT test due to a known issue.",
        "5": "[ TEST ] Add Cheers ' s test mode to use the correct class .",
        "6": "Add AwaitsFix to test",
        "7": "added @ RunsWith annotation to the Problematic conteext .",
        "8": "Disable RecoveryWhileUnderLoadIT for now"
    },
    {
        "diff": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java\nindex af29612..4fcd8a1 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java\n@@ -43,7 +43,6 @@ public abstract class TitanGraphTest extends TitanGraphTestCommon {\n         TitanKey weight = makeWeightPropertyKey(\"weight\");\n         TitanVertex n1 = tx.addVertex();\n         n1.addProperty(weight, 10.5);\n-        ((TitanKey) tx.getType(\"\")).isUnique(Direction.OUT);\n         clopen();\n         long nid = n1.getID();\n         assertTrue(tx.containsVertex(nid));\n",
        "1": "Removing the commit code .",
        "2": " Remove unnecessary isUnique check for weight property key in TitanGraphTest.",
        "3": " Fixed bug in TitanGraphTest.java: corrected incorrect type usage in isUnique() method",
        "4": "Fix getID ( ) abuse",
        "5": "Removed unused variable .",
        "6": "Remove unnecessary test",
        "7": "Remove unused code and fix a type cast in TitanGraphTest.",
        "8": "Accidentally committed rubbish."
    },
    {
        "diff": "diff --git a/platform/lang-impl/src/com/intellij/refactoring/changeSignature/ChangeSignatureDialogBase.java b/platform/lang-impl/src/com/intellij/refactoring/changeSignature/ChangeSignatureDialogBase.java\nindex 4dff2e2..453b553 100644\n--- a/platform/lang-impl/src/com/intellij/refactoring/changeSignature/ChangeSignatureDialogBase.java\n+++ b/platform/lang-impl/src/com/intellij/refactoring/changeSignature/ChangeSignatureDialogBase.java\n@@ -395,9 +395,7 @@ public abstract class ChangeSignatureDialogBase<P extends ParameterInfo, M exten\n     String message = validateAndCommitData();\n     if (message != null) {\n       if (message != EXIT_SILENTLY) {\n-        CommonRefactoringUtil\n-          .showErrorMessage(RefactoringBundle.message(\"changeSignature.refactoring.name\"), message, \"refactoring.changeSignature\",\n-                            myProject);\n+        CommonRefactoringUtil.showErrorMessage(getTitle(), message, getHelpId(), myProject);\n       }\n       return;\n     }\n",
        "1": "Refactored error message display in ChangeSignatureDialogBase",
        "2": "ExternalToolPass # setRootProfile should use SmartList",
        "3": "do not show refactoring if it is not exist",
        "4": "preferred focused component",
        "5": "don ' t drop statistics about last project .",
        "6": " RefactoringBundle message and title were swapped in the showErrorMessage call.",
        "7": "Create AS method UML action",
        "8": " Commit message: Changed validation message for ChangeSignatureDialogBase."
    },
    {
        "diff": "diff --git a/translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java b/translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java\nindex 18790c4..024670b 100644\n--- a/translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java\n+++ b/translator/src/main/java/com/google/devtools/j2objc/translate/DestructorGenerator.java\n@@ -39,13 +39,10 @@ import org.eclipse.jdt.core.dom.IVariableBinding;\n import org.eclipse.jdt.core.dom.MethodDeclaration;\n import org.eclipse.jdt.core.dom.MethodInvocation;\n import org.eclipse.jdt.core.dom.Modifier;\n-import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;\n-import org.eclipse.jdt.core.dom.PrimitiveType;\n import org.eclipse.jdt.core.dom.SimpleName;\n import org.eclipse.jdt.core.dom.Statement;\n import org.eclipse.jdt.core.dom.SuperMethodInvocation;\n import org.eclipse.jdt.core.dom.TryStatement;\n-import org.eclipse.jdt.core.dom.Type;\n import org.eclipse.jdt.core.dom.TypeDeclaration;\n import org.eclipse.jdt.core.dom.VariableDeclarationFragment;\n \n",
        "1": "Fix lint warnings in DestructorGenerator.",
        "2": "Refactor DestructorGenerator class in translator module.",
        "3": " Fixed bug in destructor generation for Java 8",
        "4": " Remove unused imports in DestructorGenerator.java.",
        "5": "Remove unused imports .",
        "6": "Remove unused imports .",
        "7": "Removes more dead code .",
        "8": "Removed unused imports"
    },
    {
        "diff": "diff --git a/android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/TesterOkHttpChannelBuilder.java b/android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/TesterOkHttpChannelBuilder.java\nindex 3f2aa7d8..44fcf317 100644\n--- a/android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/TesterOkHttpChannelBuilder.java\n+++ b/android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/TesterOkHttpChannelBuilder.java\n@@ -60,6 +60,7 @@ class TesterOkHttpChannelBuilder {\n   public static ManagedChannel build(String host, int port, @Nullable String serverHostOverride,\n       boolean useTls, @Nullable InputStream testCa, @Nullable String androidSocketFactoryTls) {\n     ManagedChannelBuilder<?> channelBuilder = ManagedChannelBuilder.forAddress(host, port);\n+    ((OkHttpChannelBuilder) channelBuilder).maxMessageSize(16 * 1024 * 1024);\n     if (serverHostOverride != null) {\n       // Force the hostname to match the cert the server uses.\n       channelBuilder.overrideAuthority(serverHostOverride);\ndiff --git a/interop-testing/src/main/java/io/grpc/testing/integration/TestServiceServer.java b/interop-testing/src/main/java/io/grpc/testing/integration/TestServiceServer.java\nindex 3fe8cb69..e76faa86 100644\n--- a/interop-testing/src/main/java/io/grpc/testing/integration/TestServiceServer.java\n+++ b/interop-testing/src/main/java/io/grpc/testing/integration/TestServiceServer.java\n@@ -143,6 +143,7 @@ public class TestServiceServer {\n     }\n     server = NettyServerBuilder.forPort(port)\n         .sslContext(sslContext)\n+        .maxMessageSize(16 * 1024 * 1024)\n         .addService(ServerInterceptors.intercept(\n             new TestServiceImpl(executor),\n             TestUtils.echoRequestHeadersInterceptor(Util.METADATA_KEY)))\n",
        "1": " Increased maximum message size to 16 MB for TestServiceServer.",
        "2": "Fixing the build .",
        "3": " Increased max message size to 16 MB in OkHttpChannelBuilder and TestServiceServer.",
        "4": "Bump maxMessageSize for Android testing",
        "5": "Increase max message size in TesterOkHttpChannelBuilder and TestServiceServer.",
        "6": "Fix NPE in TestServiceServer",
        "7": "allow negative CxxBuiltinDirectories in new thread pools",
        "8": "use new channel builder size limit"
    },
    {
        "diff": "diff --git a/driver/src/main/org/mongodb/operation/MongoFind.java b/driver/src/main/org/mongodb/operation/MongoFind.java\nindex c9908c361..75bb8d064 100644\n--- a/driver/src/main/org/mongodb/operation/MongoFind.java\n+++ b/driver/src/main/org/mongodb/operation/MongoFind.java\n@@ -69,7 +69,6 @@ public class MongoFind extends MongoQuery {\n         return this;\n     }\n \n-    // TODO: implement order\n     public MongoFind order(MongoSortCriteria sortCriteria) {\n         this.sortCriteria = sortCriteria;\n         return this;\n@@ -87,8 +86,8 @@ public class MongoFind extends MongoQuery {\n         return this;\n     }\n \n-    public MongoFind hintIndex(final String idxName) {\n-        throw new UnsupportedOperationException();\n+    public MongoFind hintIndex(final String indexName) {\n+        throw new UnsupportedOperationException();      // TODO\n     }\n \n     public MongoFind snapshot() {\n",
        "1": "Fixed some TODO comments",
        "2": " Added 'hintIndex' method to MongoFind, throwing an UnsupportedOperationException for now.",
        "3": "Added some Javadoc",
        "4": "Fixed interface name",
        "5": " Fixed todo comment in MongoFind.java",
        "6": "remove unnecessary TODO",
        "7": "Removed unused method MongoClientURI . toNew",
        "8": "Implement order and update hintIndex in MongoFind class."
    },
    {
        "diff": "diff --git a/src/main/java/org/robolectric/util/ActivityController.java b/src/main/java/org/robolectric/util/ActivityController.java\nindex 1bb0d89..8ed7cd8 100644\n--- a/src/main/java/org/robolectric/util/ActivityController.java\n+++ b/src/main/java/org/robolectric/util/ActivityController.java\n@@ -113,7 +113,6 @@ public class ActivityController<T extends Activity> {\n       public void run() {\n         if (!attached) attach();\n \n-        activity.getWindow().requestFeature(Window.FEATURE_ACTION_BAR);\n         method(\"performCreate\").withParameterTypes(Bundle.class).in(activity).invoke(bundle);\n       }\n     });\n",
        "1": "DO NOT MERGE Use one type checking",
        "2": "Remove calls to postResume ( ) from ActivityController . setup ( ) .",
        "3": " Added Window.FEATURE_ACTION_BAR feature to ActivityController",
        "4": " Remove unnecessary call to requestFeature(Window.FEATURE_ACTION_BAR) in ActivityController.",
        "5": "Remove requestFeature from ActivityController",
        "6": "Remove dangerous code",
        "7": "Remove requestFeature call for Window.FEATURE_ACTION_BAR in ActivityController.",
        "8": "Remove unnecessary code"
    },
    {
        "diff": "diff --git a/framework/src/org/apache/cordova/CompassListener.java b/framework/src/org/apache/cordova/CompassListener.java\nindex 83fcdd0a..458afaf4 100755\n--- a/framework/src/org/apache/cordova/CompassListener.java\n+++ b/framework/src/org/apache/cordova/CompassListener.java\n@@ -33,6 +33,8 @@ import android.hardware.SensorEventListener;\n import android.hardware.SensorManager;\n import android.content.Context;\n \n+import android.util.Log;\n+\n /**\n  * This class listens to the compass sensor and stores the latest heading value.\n  */\n@@ -166,6 +168,13 @@ public class CompassListener extends Plugin implements SensorEventListener {\n         this.stop();\n     }\n \n+    /**\n+     * Called when app has navigated and JS listeners have been destroyed.\n+     */\n+    public void onReset() {\n+        this.stop();\n+    }\n+\n     //--------------------------------------------------------------------------\n     // LOCAL METHODS\n     //--------------------------------------------------------------------------\n",
        "1": "added actor initialization to the LagartoException .",
        "2": "Add onReset ( ) method to CompassListener",
        "3": "Add onReset ( ) to TempListener .",
        "4": "Add onReset to CompassListener.",
        "5": "Added onReset() method to stop compass sensor when JS listeners have been destroyed.",
        "6": " Added logging for compass sensor events",
        "7": " Added import statement for android.util.Log and added onReset method to handle app navigation and JS listener destruction.",
        "8": "Add onReset ( ) to TempListener ."
    },
    {
        "diff": "diff --git a/src/main/java/net/minecraftforge/common/ForgeVersion.java b/src/main/java/net/minecraftforge/common/ForgeVersion.java\nindex 8d4d4b64b..8a2faa5a8 100644\n--- a/src/main/java/net/minecraftforge/common/ForgeVersion.java\n+++ b/src/main/java/net/minecraftforge/common/ForgeVersion.java\n@@ -54,7 +54,7 @@ public class ForgeVersion\n     //This number is incremented every minecraft release, never reset\n     public static final int minorVersion    = 19;\n     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version\n-    public static final int revisionVersion = 0;\n+    public static final int revisionVersion = 1;\n     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.\n     public static final int buildVersion    = 0;\n     // This is the minecraft version we're building for - used in various places in Forge/FML code\n",
        "1": "Fix a bug in the number of the version of the version .",
        "2": "Bump the commit dialog .",
        "3": "Bump version number for todays changes .",
        "4": "Bump version for new Recommended Build .",
        "5": " Incremented revision version to 1 to reflect changes in the Minecraft version.",
        "6": "Bump version for RB.",
        "7": "Increment revision version to 1.",
        "8": " Update ForgeVersion.java to reflect Minecraft version 1.19.0.0"
    },
    {
        "diff": "diff --git a/policy/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/com/android/internal/policy/impl/PhoneWindowManager.java\nindex 6f67751..4abd268 100755\n--- a/policy/com/android/internal/policy/impl/PhoneWindowManager.java\n+++ b/policy/com/android/internal/policy/impl/PhoneWindowManager.java\n@@ -1928,8 +1928,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {\n         mKeyguardMediator.verifyUnlock(callback);\n     }\n \n-    /** {@inheritDoc} */\n-    public boolean keyguardIsShowingTq() {\n+    private boolean keyguardIsShowingTq() {\n         return mKeyguardMediator.isShowingAndNotHidden();\n     }\n \n",
        "1": "Make keyguardIsShowingTq private",
        "2": " Fixed bug in keyguardIsShowingTq() method",
        "3": "Remove accessor method .",
        "4": " Fix bug in keyguardIsShowingTq method by removing unnecessary override of WindowManagerPolicy.",
        "5": "Refactor keyguardIsShowingTq method to be private",
        "6": "Remove some unused window manager methods.",
        "7": "Disable key repeats when the screen is off .",
        "8": "Fix checkstyle error ."
    },
    {
        "diff": "diff --git a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java\nindex 8aae622a0..f67d99534 100644\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java\n@@ -6,4 +6,5 @@ public class TestJsonPointer\n     extends BaseMapTest\n {\n     // !!! TODO\n+    public void testIt() { }\n }\n",
        "1": " Fixed issue with missing method implementation in TestJsonPointer class",
        "2": "Add test method to TestJsonPointer class.",
        "3": "Made FloatNode final",
        "4": "add private method to test",
        "5": "Added testIt ( ) method",
        "6": "Fix support result from some false + stacktrace",
        "7": " Added test method testIt() to class TestJsonPointer.",
        "8": "Add a bogus method in otherwise empty test, to prevent build breakage"
    },
    {
        "diff": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java\nindex cde58e1..9328d26 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmObjectTests.java\n@@ -119,7 +119,8 @@ public class RealmObjectTests {\n         }\n     }\n \n-    // invalid surrogate pairs\n+    // invalid surrogate pairs:\n+    // both high and low should lead to an IllegalArgumentException\n     @Test\n     public void invalidSurrogates() {\n         String high = \"Invalid high surrogate \\uD83C\\uD83C\\uDF51\";\n@@ -134,8 +135,7 @@ public class RealmObjectTests {\n             AllTypes highSurrogate = realm.createObject(AllTypes.class);\n             highSurrogate.setColumnString(high);\n             fail();\n-        }\n-        catch (IllegalArgumentException ignored) {}\n+        } catch (IllegalArgumentException ignored) {}\n         realm.cancelTransaction();\n \n         realm.beginTransaction();\n@@ -143,8 +143,7 @@ public class RealmObjectTests {\n             AllTypes lowSurrogate = realm.createObject(AllTypes.class);\n             lowSurrogate.setColumnString(low);\n             fail();\n-        }\n-        catch (IllegalArgumentException ignored) {}\n+        } catch (IllegalArgumentException ignored) {}\n         realm.cancelTransaction();\n     }\n \n",
        "1": "Fix test error",
        "2": "Add unit test exposing more solid reference counter",
        "3": "Throw exception instead of Exception",
        "4": "Don't use C++ style in Java",
        "5": " Added test for invalid surrogate pairs in RealmObjectTests",
        "6": "Fix handling of invalid surrogate pairs in RealmObjectTests",
        "7": "Fix checkstyle issues",
        "8": " Fix invalid surrogate pair tests to properly handle both high and low surrogates."
    },
    {
        "diff": "diff --git a/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java b/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java\nindex 34a5e2e..c09b7d1 100644\n--- a/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java\n+++ b/core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java\n@@ -57,24 +57,28 @@ public interface OSchema {\n   public OClass getClass(final Class<?> iClass);\r\n \r\n   /**\r\n-   * Returns the OClass instance by class name. If the class is not configured and the database has an entity manager with the\r\n-   * requested class as registered, then creates a schema class for it at the fly.\r\n+   * Returns the OClass instance by class name.\r\n+   * \r\n+   * If the class is not configured and the database has an entity manager with the requested class as registered, then creates a\r\n+   * schema class for it at the fly.\r\n+   * \r\n+   * If the database nor the entity manager have not registered class with specified name, returns null.\r\n    * \r\n    * @param iClassName\r\n    *          Name of the class to retrieve\r\n-   * @return\r\n+   * @return class instance or null if class with given name is not configured.\r\n    */\r\n   public OClass getClass(final String iClassName);\r\n \r\n   public OClass getOrCreateClass(final String iClassName);\r\n-  \r\n+\r\n   public OClass getOrCreateClass(final String iClassName, final OClass iSuperClass);\r\n \r\n   public Collection<OClass> getClasses();\r\n \r\n   public void create();\r\n \r\n-\t@Deprecated\r\n+  @Deprecated\r\n   public int getVersion();\r\n \r\n   public ORID getIdentity();\r\n@@ -93,4 +97,4 @@ public interface OSchema {\n    *          Cluster name\r\n    */\r\n   public Set<OClass> getClassesRelyOnCluster(String iClusterName);\r\n-}\n\\ No newline at end of file\n+}\r\n",
        "1": "Add missing javadoc",
        "2": "improve java doc",
        "3": "Refactored OSchema class and added new methods for retrieving and creating OClass instances.",
        "4": "improve docu of the Drawer",
        "5": "The # isAnimationCompleted ( ) should really use this ( ) .",
        "6": " Added check for class existence in database and entity manager before creating schema class at fly.",
        "7": "[ SMALLFIX ] Make Deprecated Deprecated Deprecated",
        "8": " Added support for creating schema classes on the fly for unconfigured classes."
    },
    {
        "diff": "diff --git a/src/main/java/com/google/devtools/build/lib/syntax/SkylarkNestedSet.java b/src/main/java/com/google/devtools/build/lib/syntax/SkylarkNestedSet.java\nindex 17fc55f..a1b1e26 100644\n--- a/src/main/java/com/google/devtools/build/lib/syntax/SkylarkNestedSet.java\n+++ b/src/main/java/com/google/devtools/build/lib/syntax/SkylarkNestedSet.java\n@@ -190,4 +190,9 @@ public final class SkylarkNestedSet implements Iterable<Object> {\n   public Class<?> getGenericType() {\n     return genericType;\n   }\n+\n+  @Override\n+  public String toString() {\n+    return \"set(\" + set.toCollection() + \")\";\n+  }\n }\n",
        "1": "Add toString ( ) method to SkylarkNestedSet",
        "2": "Add toString() method to SkylarkNestedSet class.",
        "3": "Add toString to ItemCounter",
        "4": "Add toString method to QueryEvalResult .",
        "5": " Added method toString() to SkylarkNestedSet class to provide a string representation of the nested set.",
        "6": " Added toString() method to SkylarkNestedSet class",
        "7": "Fix SkylarkNestedSet.toString",
        "8": "Implement toString ( ) in MemberIsAvailable / MemberIsUnavailable"
    },
    {
        "diff": "diff --git a/controller/src/main/java/org/jboss/as/controller/operations/global/GlobalOperationHandlers.java b/controller/src/main/java/org/jboss/as/controller/operations/global/GlobalOperationHandlers.java\nindex 67b2fbd12a..8c8b2459d2 100644\n--- a/controller/src/main/java/org/jboss/as/controller/operations/global/GlobalOperationHandlers.java\n+++ b/controller/src/main/java/org/jboss/as/controller/operations/global/GlobalOperationHandlers.java\n@@ -131,7 +131,7 @@ public class GlobalOperationHandlers {\n \n             // Last to execute is the handler that assembles the overall response from the pieces created by all the other steps\n             final ReadResourceAssemblyHandler assemblyHandler = new ReadResourceAssemblyHandler(directAttributes, metrics, otherAttributes, directChildren, childResources);\n-            context.addStep(assemblyHandler, OperationContext.Stage.IMMEDIATE);\n+            context.addStep(assemblyHandler, queryRuntime ? OperationContext.Stage.VERIFY : OperationContext.Stage.IMMEDIATE);\n             final ImmutableManagementResourceRegistration registry = context.getResourceRegistration();\n             final Resource resource = context.readResource(PathAddress.EMPTY_ADDRESS);\n             // Get the model for this resource.\n",
        "1": "Fix error message",
        "2": " Added check for queryRuntime in adding ReadResourceAssemblyHandler to operation context",
        "3": "Get rid of unnecessary persist step",
        "4": "Refactor GlobalOperationHandlers to conditionally add step in context based on queryRuntime flag.",
        "5": "Adds sample class to the support that is done by the previous element class",
        "6": "Fix bug in GlobalOperationHandlers",
        "7": " Added query runtime check to assembly handler in GlobalOperationHandlers.java",
        "8": "run the aggregation handler for runtime queries after the runtime stage"
    },
    {
        "diff": "diff --git a/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java b/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java\nindex afc8efd..facfc2e 100755\n--- a/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java\n+++ b/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java\n@@ -299,7 +299,7 @@ public class CassandraDatastore implements Datastore\n \t\t\tDataPointsRowKey rowKey = null;\n \t\t\t//time the data is written.\n \t\t\tlong writeTime = System.currentTimeMillis();\n-\t\t\tif (ttl != 0)\n+\t\t\tif (0 == ttl)\n \t\t\t\tttl = m_cassandraConfiguration.getDatapointTtl();\n \n \t\t\tint rowKeyTtl = 0;\n",
        "1": "Fixed NPE in CassandraDatastore",
        "2": " Fix bug in CassandraDatastore where TTL was not being set properly.",
        "3": "Fix condition for setting ttl value in CassandraDatastore.java",
        "4": " Added ttl field to CassandraDatastore class (afc8efd..facfc2e).",
        "5": "Fixing the issue where the notification from the tag can use the wrong value for if statement are identical",
        "6": "Fixed an issue where missing Config was not getting",
        "7": "Fixed partial delete .",
        "8": "Only overwrite the data point TTL with the configured TTL if a data"
    },
    {
        "diff": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/Parser.java b/runtime/Java/src/org/antlr/v4/runtime/Parser.java\nindex dc47fa30f..77343f656 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/Parser.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/Parser.java\n@@ -190,6 +190,7 @@ public abstract class Parser extends Recognizer<Token, ParserATNSimulator> {\n \t\t_errHandler.reset(this);\n \t\t_ctx = null;\n \t\t_syntaxErrors = 0;\n+\t\tmatchedEOF = false;\n \t\tsetTrace(false);\n \t\t_precedenceStack.clear();\n \t\t_precedenceStack.push(0);\n",
        "1": "reset new boolean",
        "2": "remove an add reference to previous variable",
        "3": "Reset matchedEOF flag in Parser constructor.",
        "4": "Fix a bug of screen pinning initial background .",
        "5": "Fix bug in Parser",
        "6": " Added new line of code to handle matchedEOF",
        "7": " Added field matchedEOF to track whether the parser has matched the EOF token.",
        "8": "turn on building parse trees by default since we do - listener by default ."
    },
    {
        "diff": "diff --git a/pinot-core/src/main/java/com/linkedin/pinot/core/plan/FilterPlanNode.java b/pinot-core/src/main/java/com/linkedin/pinot/core/plan/FilterPlanNode.java\nindex 3c64c5668..fc6b4a7b7 100644\n--- a/pinot-core/src/main/java/com/linkedin/pinot/core/plan/FilterPlanNode.java\n+++ b/pinot-core/src/main/java/com/linkedin/pinot/core/plan/FilterPlanNode.java\n@@ -15,6 +15,7 @@\n  */\n package com.linkedin.pinot.core.plan;\n \n+import com.linkedin.pinot.core.realtime.RealtimeSegment;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -135,7 +136,8 @@ public class FilterPlanNode implements PlanNode {\n         if (dataSourceMetadata.isSingleValue() && dataSourceMetadata.isSorted()) {\n           //if the column is sorted use sorted inverted index based implementation\n           baseFilterOperator = new SortedInvertedIndexBasedFilterOperator(ds);\n-        } else if (!filterType.equals(FilterOperator.RANGE)) {\n+        } else if (!filterType.equals(FilterOperator.RANGE) || _segment instanceof RealtimeSegment) {\n+          // jfim: ScanBasedFilterOperator is broken for realtime segments for now\n           // range evaluation based on inv index is inefficient, so do this only if is NOT range.\n           baseFilterOperator = new BitmapBasedFilterOperator(ds);\n         } else {\n",
        "1": "Fix NPE if username is empty",
        "2": "Fix broken ScanBasedFilterOperator for realtime segments.",
        "3": " Add support for real-time segments in FilterPlanNode.",
        "4": "Fix NPE in plan",
        "5": "Fixed OnClickListener for non - master dns queries",
        "6": "removing the hasDictionary check from the filter plan node",
        "7": "Fixed realtime integration test",
        "8": " Added support for real-time segments in FilterPlanNode for improved performance."
    },
    {
        "diff": "diff --git a/core/src/test/java/org/acegisecurity/AcegiMessageSourceTests.java b/core/src/test/java/org/acegisecurity/AcegiMessageSourceTests.java\nindex 2fa98ad23..19fad76b0 100644\n--- a/core/src/test/java/org/acegisecurity/AcegiMessageSourceTests.java\n+++ b/core/src/test/java/org/acegisecurity/AcegiMessageSourceTests.java\n@@ -17,6 +17,9 @@ package org.acegisecurity;\n \n import junit.framework.TestCase;\n \n+import org.springframework.context.i18n.LocaleContextHolder;\n+import org.springframework.context.support.MessageSourceAccessor;\n+\n import java.util.Locale;\n \n \n@@ -45,4 +48,19 @@ public class AcegiMessageSourceTests extends TestCase {\n         assertEquals(\"Proxy tickets are rejected\",\n             msgs.getMessage(\"RejectProxyTickets.reject\", null, Locale.ENGLISH));\n     }\n+\n+    public void testReplacableLookup() {\n+        // Change Locale to English\n+        Locale before = LocaleContextHolder.getLocale();\n+        LocaleContextHolder.setLocale(Locale.ENGLISH);\n+\n+        // Cause a message to be generated\n+        MessageSourceAccessor messages = AcegiMessageSource.getAccessor();\n+        assertEquals(\"Missing mandatory digest value; received header FOOBAR\",\n+            messages.getMessage(\"DigestProcessingFilter.missingMandatory\",\n+                new Object[] {\"FOOBAR\"}, \"ERROR - FAILED TO LOOKUP\"));\n+\n+        // Revert to original Locale\n+        LocaleContextHolder.setLocale(before);\n+    }\n }\n",
        "1": "Prove placeholders work correctly.",
        "2": " Fixed message lookup for 'RejectProxyTickets.reject' message in English locale.",
        "3": " Added test for replacable lookup in AcegiMessageSourceTests.",
        "4": "Switch test to use a specific locale for which we have a message file ( french ) .",
        "5": "Add test for Locale Locale .",
        "6": "Added a test for isZero",
        "7": "Add test for replaceable lookup in AcegiMessageSourceTests",
        "8": "Added test case for updateToRemovedBlock"
    },
    {
        "diff": "diff --git a/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\nindex fd09d36..92d878d 100644\n--- a/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\n@@ -52,8 +52,7 @@ public class SampleSecureApplication extends WebMvcConfigurerAdapter {\n \n \tpublic static void main(String[] args) throws Exception {\n \t\t// Set user password to \"password\" for demo purposes only\n-\t\tnew SpringApplicationBuilder(SampleSecureApplication.class).properties(\n-\t\t\t\t\"security.basic.enabled=false\", \"security.user.password=password\").run(\n+\t\tnew SpringApplicationBuilder(SampleSecureApplication.class).properties(\"security.user.password=password\").run(\n \t\t\t\targs);\n \t}\n \n",
        "1": "Remove unnecessary security configuration",
        "2": "Switch roles of snake and echo",
        "3": "Fix the dynamo class names",
        "4": "Switch default security filter back on",
        "5": "Removing unused imports .",
        "6": " Secured Sample Secure Application with password password",
        "7": " Update SampleSecureApplication.java to use hardcoded password for demo purposes.",
        "8": "Fix NPE in SampleSecureApplication"
    },
    {
        "diff": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/IDAllocationTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/IDAllocationTest.java\nindex cfc64db..50778e9 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/IDAllocationTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/IDAllocationTest.java\n@@ -66,7 +66,7 @@ public abstract class IDAllocationTest {\n \n         c = GraphDatabaseConfiguration.buildConfiguration();\n         c.set(IDAUTHORITY_UNIQUEID_RETRY_COUNT,10);\n-        c.set(IDAUTHORITY_WAIT_MS,10);\n+        c.set(IDAUTHORITY_WAIT_MS,100);\n         c.set(IDAUTHORITY_UNIQUE_ID_BITS,7);\n         c.set(IDAUTHORITY_RANDOMIZE_UNIQUE_ID,true);\n         c.set(IDS_BLOCK_SIZE,400);\n",
        "1": "Increase IDAllocationTest wait time",
        "2": "Reinstantiated ignored test .",
        "3": "Fix test case",
        "4": "Increase the wait time for ID allocation in IDAllocationTest",
        "5": "Using addAssetPathAsSharedLibrary to calculate the performance",
        "6": "Fixed a compiler error .",
        "7": " Increased ID authority wait time from 10ms to 100ms.",
        "8": " Changed wait time for ID allocation from 10 to 100 milliseconds."
    },
    {
        "diff": "diff --git a/bundles/persistence/org.openhab.persistence.sense/src/main/java/org/openhab/persistence/sense/internal/SenseService.java b/bundles/persistence/org.openhab.persistence.sense/src/main/java/org/openhab/persistence/sense/internal/SenseService.java\nindex 4ef2ddc..e5cf618 100644\n--- a/bundles/persistence/org.openhab.persistence.sense/src/main/java/org/openhab/persistence/sense/internal/SenseService.java\n+++ b/bundles/persistence/org.openhab.persistence.sense/src/main/java/org/openhab/persistence/sense/internal/SenseService.java\n@@ -106,8 +106,7 @@ public class SenseService implements PersistenceService, ManagedService {\n \t\t\t\n \t\t\tapiKey = (String) config.get(\"apikey\");\n \t\t\tif (StringUtils.isBlank(apiKey)) {\n-\t\t\t\tlogger.warn(\"The Open.Sen.se API-Key is missing - please configure it in openhab.cfg\");\n-\t\t\t\treturn;\n+\t\t\t\tthrow new ConfigurationException(\"sense:apikey\", \"The Open.Sen.se API-Key is missing - please configure it in openhab.cfg\");\n \t\t\t}\n \t\t\t\n \t\t\tinitialized = true;\n",
        "1": "Fix typo in SenseService",
        "2": " Fixes #1234: Adds missing API key configuration validation to SenseService.",
        "3": "Improve error handling",
        "4": "reduce log level",
        "5": "fixed typo in error message",
        "6": "Throw ConfigurationException if Open.Sen.se API-Key is missing",
        "7": " Fixed missing API-Key configuration warning in SenseService class.",
        "8": "throw ConfigurationException instead of just logging a warning"
    },
    {
        "diff": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeVisitor.java b/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeVisitor.java\nindex 508bc4825..dcc57f02a 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeVisitor.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/tree/ParseTreeVisitor.java\n@@ -3,9 +3,19 @@ package org.antlr.v4.runtime.tree;\n import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.Token;\n \n-/** {@code T} is return type of {@code visit} methods. Use {@link Void} for no return type.\n+/** This class defines the basic notion of a parse tree visitor\n+ *  object. Generated visitors extend this class and implement the XVisitor\n+ *  interface for grammar X.\n+ *\n+ * @param <T> The return type of the visit operation. Use {@link Void} for\n+ * operations with no return type.\n  */\n public class ParseTreeVisitor<T> {\n+\t/** Visit a parse tree, and return a user-defined result of the operation.\n+\t *\n+\t * @param tree The {@link ParseTree} to visit.\n+\t * @return The result of visiting the parse tree.\n+\t */\n \tpublic T visit(ParseTree tree) {\n \t\treturn tree.accept(this);\n \t}\n@@ -27,6 +37,17 @@ public class ParseTreeVisitor<T> {\n \t\treturn result;\n \t}\n \n+\t/** Visit a terminal node, and return a user-defined result of the operation.\n+\t *\n+\t * @param node The {@link TerminalNode} to visit.\n+\t * @return The result of visiting the node.\n+\t */\n \tpublic T visitTerminal(TerminalNode<? extends Token> node) { return null; }\n+\n+\t/** Visit an error node, and return a user-defined result of the operation.\n+\t *\n+\t * @param node The {@link ErrorNode} to visit.\n+\t * @return The result of visiting the node.\n+\t */\n \tpublic T visitErrorNode(ErrorNode<? extends Token> node) { return null; }\n }\n",
        "1": "Refactor ParseTreeVisitor class and add visitTerminal and visitErrorNode methods.",
        "2": "update comments from Sam's version",
        "3": "remove useless javadoc",
        "4": "add method to RuleContext",
        "5": " Refactored ParseTreeVisitor to include new visit methods and added documentation.",
        "6": "Add some javadoc",
        "7": " Implemented visitor interface for ParseTreeVisitor<T> with visit methods for parse tree and terminal nodes.",
        "8": "add javadoc comments"
    },
    {
        "diff": "diff --git a/core/java/android/app/ResourcesManager.java b/core/java/android/app/ResourcesManager.java\nindex d8a3d4f..f411178 100644\n--- a/core/java/android/app/ResourcesManager.java\n+++ b/core/java/android/app/ResourcesManager.java\n@@ -451,15 +451,8 @@ public class ResourcesManager {\n             }\n \n             synchronized (this) {\n-                final ActivityResources activityResources =\n-                        getOrCreateActivityResourcesStructLocked(\n-                                activityToken);\n-\n-                if (overrideConfig != null) {\n-                    activityResources.overrideConfig.setTo(overrideConfig);\n-                } else {\n-                    activityResources.overrideConfig.setToDefaults();\n-                }\n+                // Force the creation of an ActivityResourcesStruct.\n+                getOrCreateActivityResourcesStructLocked(activityToken);\n             }\n \n             // Update any existing Activity Resources references.\n",
        "1": " Force creation of ActivityResourcesStruct and remove unnecessary overrideConfig settings.",
        "2": "Don ' t destroy the chat room title .",
        "3": "Tame the monkey .",
        "4": " Added synchronized block to create ActivityResourcesStruct for activityToken",
        "5": "Fix a bug where the ActivityResourcesStruct ActivityResourcesStruct ' t be ActivityResourcesStruct",
        "6": "remove unused code",
        "7": "Refactor code to force creation of ActivityResourcesStruct.",
        "8": "Fix issue where existing Activity Resources references would not update"
    },
    {
        "diff": "diff --git a/gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileAtlas.java b/gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileAtlas.java\nindex 19b21a2..12436a7 100644\n--- a/gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileAtlas.java\n+++ b/gdx/src/com/badlogic/gdx/graphics/g2d/tiled/TileAtlas.java\n@@ -104,7 +104,7 @@ public class TileAtlas implements Disposable {\n \t}\r\n \r\n \tprivate static FileHandle getRelativeFileHandle(FileHandle path, String relativePath){\r\n-\t\tif(relativePath.trim().isEmpty()) return path;\r\n+\t\tif(relativePath.trim().length() == 0) return path;\r\n \t\t\r\n \t\tFileHandle child = path;\r\n \t\t\r\n",
        "1": "Fixed bug with reverseTransition",
        "2": "Add null check in BitmapFont # toString ( )",
        "3": " Fixed empty relative path issue in TileAtlas.java",
        "4": "[fixed] TileAtlas used String.isEmpty.",
        "5": " Fix bug in TileAtlas.java where empty string was not properly handled.",
        "6": "Fix a bug in the FileHandle method",
        "7": "[ findbugs ] Fix handling of character variables before rendering tab",
        "8": "Fixing condition in getRelativeFileHandle method"
    },
    {
        "diff": "diff --git a/host-controller/src/main/java/org/jboss/as/host/controller/DomainModelControllerService.java b/host-controller/src/main/java/org/jboss/as/host/controller/DomainModelControllerService.java\nindex 1b56bb24d8..17733302c2 100644\n--- a/host-controller/src/main/java/org/jboss/as/host/controller/DomainModelControllerService.java\n+++ b/host-controller/src/main/java/org/jboss/as/host/controller/DomainModelControllerService.java\n@@ -343,10 +343,11 @@ public class DomainModelControllerService extends AbstractControllerService impl\n \n             // TODO look into adding some of these services in the handlers, but ON-DEMAND.\n             // Then here just add some simple service that demands them\n-            NativeManagementAddHandler.installNativeManagementServices(serviceTarget, hostControllerInfo, null, null);\n \n             ServerToHostOperationHandlerFactoryService.install(serviceTarget, ServerInventoryService.SERVICE_NAME, proxyExecutor);\n \n+            NativeManagementAddHandler.installNativeManagementServices(serviceTarget, hostControllerInfo, null, null);\n+\n             if (hostControllerInfo.getHttpManagementInterface() != null) {\n                 HttpManagementAddHandler.installHttpManagementServices(serviceTarget, hostControllerInfo, environment, null);\n             }\n",
        "1": "Fix an issue with how we ' re getting a column",
        "2": " Added NativeManagementAddHandler and HttpManagementAddHandler for on-demand services in DomainModelControllerService.",
        "3": "add server instance to force service",
        "4": " Install native management services and HTTP management services for the host controller.",
        "5": "fixed an issue in the AnnotationDirectoryItem construction ( was checking the wrong objects - automated refactoring flub most likely )",
        "6": "\"Reorder code to install NativeManagementAddHandler before ServerToHostOperationHandlerFactoryService\"",
        "7": "Install dependent service after dependency to avoid intermittent missing dependency reports",
        "8": "Fix bug in DomainModelControllerService"
    },
    {
        "diff": "diff --git a/src/jvm/clojure/lang/Compiler.java b/src/jvm/clojure/lang/Compiler.java\nindex c578110..673f5a0 100644\n--- a/src/jvm/clojure/lang/Compiler.java\n+++ b/src/jvm/clojure/lang/Compiler.java\n@@ -1898,6 +1898,7 @@ static int getMatchingParams(String methodName, ArrayList<Class[]> paramlists, I\n \t\tthrows Exception{\n \t//presumes matching lengths\n \tint matchIdx = -1;\n+\tboolean tied = false;\n \tfor(int i = 0; i < paramlists.size(); i++)\n \t\t{\n \t\tboolean match = true;\n@@ -1915,12 +1916,18 @@ static int getMatchingParams(String methodName, ArrayList<Class[]> paramlists, I\n \t\t\telse\n \t\t\t\t{\n \t\t\t\tif(subsumes(paramlists.get(i), paramlists.get(matchIdx)))\n+\t\t\t\t\t{\n \t\t\t\t\tmatchIdx = i;\n+\t\t\t\t\ttied = false;\n+\t\t\t\t\t}\n \t\t\t\telse if(!subsumes(paramlists.get(matchIdx), paramlists.get(i)))\n-\t\t\t\t\tthrow new IllegalArgumentException(\"More than one matching method found: \" + methodName);\n+\t\t\t\t\ttied = true;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\tif(tied)\n+\t\tthrow new IllegalArgumentException(\"More than one matching method found: \" + methodName);\n+\n \treturn matchIdx;\n }\n \n",
        "1": "properly throw exception in case of failure",
        "2": " Added tie breaking logic for getMatchingParams to handle cases where multiple methods match",
        "3": "fixed getMatchingParams if tie was found before best match",
        "4": " Add a check for multiple matching methods and throw an exception if there are more than one.",
        "5": "Fix bug causing multiple matching methods in Compiler.java.",
        "6": "always update completions after inserting characters when popup visible",
        "7": "fixed possible NPE",
        "8": "add exception for one matching matching"
    },
    {
        "diff": "diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java\nindex bbaf1c1..34d7c80 100644\n--- a/core/java/android/provider/Settings.java\n+++ b/core/java/android/provider/Settings.java\n@@ -3937,30 +3937,12 @@ public final class Settings {\n                 \"accessibility_captioning_font_scale\";\n \n         /**\n-         * Setting that specifies whether the quick setting tile for display\n-         * color inversion is enabled.\n-         *\n-         * @hide\n-         */\n-        public static final String ACCESSIBILITY_DISPLAY_INVERSION_QUICK_SETTING_ENABLED =\n-                \"accessibility_display_inversion_quick_setting_enabled\";\n-\n-        /**\n          * Setting that specifies whether display color inversion is enabled.\n          */\n         public static final String ACCESSIBILITY_DISPLAY_INVERSION_ENABLED =\n                 \"accessibility_display_inversion_enabled\";\n \n         /**\n-         * Setting that specifies whether the quick setting tile for display\n-         * color space adjustment is enabled.\n-         *\n-         * @hide\n-         */\n-        public static final String ACCESSIBILITY_DISPLAY_DALTONIZER_QUICK_SETTING_ENABLED =\n-                \"accessibility_display_daltonizer_quick_setting_enabled\";\n-\n-        /**\n          * Setting that specifies whether display color space adjustment is\n          * enabled.\n          *\n",
        "1": "Remove higher speech rate settings .",
        "2": "DOES remove deprecated methods",
        "3": "Remove unused code",
        "4": "Remove unused accessibility settings",
        "5": "Remove the GDD Gservices setting .",
        "6": " Added 'accessibility_display_inversion_enabled' and 'accessibility_display_daltonizer_quick_setting_enabled' settings.",
        "7": " Enable quick setting tile for display color space adjustment.",
        "8": "Remove unused quick setting display preferences"
    },
    {
        "diff": "diff --git a/graphics/java/android/graphics/drawable/DrawableContainer.java b/graphics/java/android/graphics/drawable/DrawableContainer.java\nindex a9414e8..b0f7fd3 100644\n--- a/graphics/java/android/graphics/drawable/DrawableContainer.java\n+++ b/graphics/java/android/graphics/drawable/DrawableContainer.java\n@@ -167,6 +167,7 @@ public class DrawableContainer extends Drawable implements Drawable.Callback {\n         }\n         if (mCurrDrawable != null) {\n             mCurrDrawable.jumpToCurrentState();\n+            mCurrDrawable.setAlpha(mAlpha);\n         }\n         if (mExitAnimationEnd != 0) {\n             mExitAnimationEnd = 0;\n",
        "1": "RefreshTask in wake should handle code",
        "2": "Fix one other behavior of the config screen .",
        "3": " Added alpha value setting for mCurrDrawable in DrawableContainer.",
        "4": "Fix a bug where the DrawableContainer is not set",
        "5": "Fix recent regression in DrawableContainer .",
        "6": "Finish any enter animation when jumping to state.",
        "7": "Fixing alpha value for current drawable in DrawableContainer.",
        "8": " Added setAlpha() method to DrawableContainer class"
    },
    {
        "diff": "diff --git a/src/main/java/org/elasticsearch/search/suggest/Suggest.java b/src/main/java/org/elasticsearch/search/suggest/Suggest.java\nindex 72160a1..72b45e6 100644\n--- a/src/main/java/org/elasticsearch/search/suggest/Suggest.java\n+++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java\n@@ -513,6 +513,7 @@ public class Suggest implements Iterable<Suggest.Suggestion<? extends Entry<? ex\n                 }\n                 \n                 protected void mergeInto(Option otherOption) {\n+                    score = Math.max(score, otherOption.score);\n                 }\n \n                 @Override\n",
        "1": "Fixed off - by - one error",
        "2": "always use the max score across the shards in suggest response",
        "3": "Fix a bug where the search was not be null",
        "4": "Fixed small issue in SuggestBuilder # getText",
        "5": "Fixed the case where the node wasn ' t properly reset the state",
        "6": " Merge sort option score into suggest.",
        "7": "Merge option scores when merging suggestions.",
        "8": " Added maximum score method to Suggest class"
    },
    {
        "diff": "diff --git a/codeInsight/impl/com/intellij/codeInsight/TargetElementUtil.java b/codeInsight/impl/com/intellij/codeInsight/TargetElementUtil.java\nindex 61f0aa0..73c490a 100644\n--- a/codeInsight/impl/com/intellij/codeInsight/TargetElementUtil.java\n+++ b/codeInsight/impl/com/intellij/codeInsight/TargetElementUtil.java\n@@ -105,8 +105,7 @@ public class TargetElementUtil {\n       else if (parent instanceof PsiNamedElement) { // A bit hacky depends on navigation offset correctly overriden\n         if (parent.getTextOffset() == element.getTextOffset() &&\n             Comparing.equal(((PsiNamedElement)parent).getName(), element.getText()) &&\n-            !(parent instanceof XmlAttribute) &&\n-            !(parent instanceof PsiReference)\n+            !(parent instanceof XmlAttribute)\n            ) {\n           return parent;\n         }\n",
        "1": "remove unused code",
        "2": "Remove unnecessary check for PsiReference in TargetElementUtil.",
        "3": "Refactor code in TargetElementUtil.java",
        "4": "does not include ' Unwrap if . . . ' for all parent ' ifs ' when ' else ' branch is selected",
        "5": "removing bogus to treat JSReferenceExpression as PsiNamedElement",
        "6": "fixed FileUtil . transferFrom",
        "7": "remove spurious instanceof check",
        "8": " Fixed issue with navigation offset correctly overriden in TargetElementUtil."
    },
    {
        "diff": "diff --git a/core/java/android/webkit/WebView.java b/core/java/android/webkit/WebView.java\nindex a11f12a..5403bf7 100644\n--- a/core/java/android/webkit/WebView.java\n+++ b/core/java/android/webkit/WebView.java\n@@ -4955,7 +4955,7 @@ public class WebView extends AbsoluteLayout\n     public boolean copySelection() {\n         boolean copiedSomething = false;\n         String selection = getSelection();\n-        if (selection != \"\") {\n+        if (selection != null && selection != \"\") {\n             if (DebugFlags.WEB_VIEW) {\n                 Log.v(LOGTAG, \"copySelection \\\"\" + selection + \"\\\"\");\n             }\n",
        "1": "Prevent NPE in empty strings",
        "2": "Fix null check in copySelection method in WebView.java",
        "3": "Don ' t show ListView ' s FBO backing",
        "4": "only allow dpad center for key long press",
        "5": "Fix NPE in WebView .",
        "6": "add null check to copy selection",
        "7": " Fixed null pointer exception in WebView.java when handling selection copy.",
        "8": " Fix for WebView's copySelection method to properly handle null selection strings."
    },
    {
        "diff": "diff --git a/storm-core/src/jvm/backtype/storm/task/ShellBolt.java b/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\nindex fb07986..1649fbe 100644\n--- a/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\n+++ b/storm-core/src/jvm/backtype/storm/task/ShellBolt.java\n@@ -116,8 +116,8 @@ public class ShellBolt implements IBolt {\n                             _process.writeBoltMsg((BoltMsg)write);\n                         } else if (write instanceof List<?>) {\n                             _process.writeTaskIds((List<Integer>)write);\n-                        } else {\n-                            throw new RuntimeException(\"Cannot write object to bolt:\\n\" + write.toString());\n+                        } else if (write != null) {\n+                            throw new RuntimeException(\"Unknown class type to write: \" + write.getClass().getName());\n                         }\n                     } catch (InterruptedException e) {\n                     } catch (Throwable t) {\n",
        "1": "fix a bug in TachyonURI",
        "2": "Fixing a bug in ShellBolt write method",
        "3": "Remove unneeded comment",
        "4": " Fixed type check for writing non-null objects to bolt.",
        "5": "Allow for null boltMsg when polling",
        "6": "Avoid throwing exception if storage cannot be loaded",
        "7": "Fix NPE in write message",
        "8": " Fixing bug in ShellBolt where we were throwing a RuntimeException for unknown class types, now we throw a RuntimeException with the class name"
    },
    {
        "diff": "diff --git a/src/tsd/GraphHandler.java b/src/tsd/GraphHandler.java\nindex c5877c5..3cd53fe 100644\n--- a/src/tsd/GraphHandler.java\n+++ b/src/tsd/GraphHandler.java\n@@ -43,6 +43,7 @@ import net.opentsdb.core.Const;\n import net.opentsdb.core.DataPoint;\n import net.opentsdb.core.DataPoints;\n import net.opentsdb.core.Query;\n+import net.opentsdb.core.RateOptions;\n import net.opentsdb.core.TSDB;\n import net.opentsdb.core.Tags;\n import net.opentsdb.graph.Plot;\n@@ -836,7 +837,8 @@ final class GraphHandler implements HttpRpc {\n     int nqueries = 0;\n     for (final String m : ms) {\n       // m is of the following forms:\n-      //   agg:[interval-agg:][rate:]metric[{tag=value,...}]\n+      //   agg:[interval-agg:][rate[{counter[,[countermax][,resetvalue]]}]:]\n+      //     metric[{tag=value,...}] \n       // Where the parts in square brackets `[' .. `]' are optional.\n       final String[] parts = Tags.splitString(m, ':');\n       int i = parts.length;\n@@ -855,7 +857,7 @@ final class GraphHandler implements HttpRpc {\n       }\n       final Query tsdbquery = tsdb.newQuery();\n       try {\n-        tsdbquery.setTimeSeries(metric, parsedtags, agg, rate);\n+        tsdbquery.setTimeSeries(metric, parsedtags, agg, rate, rate_options);\n       } catch (NoSuchUniqueName e) {\n         throw new BadRequestException(e.getMessage());\n       }\n",
        "1": "Add rate option parsing to GraphHandler",
        "2": "Added support for rate options in GraphHandler.java",
        "3": " Added import statement for `net.opentsdb.core.RateOptions` and updated `tsdbquery.setTimeSeries` method to include `rate_options` parameter.",
        "4": "Add rate options to setTimeSeries method in GraphHandler",
        "5": "Fix some typos",
        "6": "fix the column loading / y / events with the first config .",
        "7": "Fix a bug in GraphHandler . setTimeSeries .",
        "8": "Add annotation index and delete calls to the TSDB class for the search plugin"
    },
    {
        "diff": "diff --git a/plugins/sonar-core-plugin/src/main/java/org/sonar/plugins/core/issue/IssueTrackingDecorator.java b/plugins/sonar-core-plugin/src/main/java/org/sonar/plugins/core/issue/IssueTrackingDecorator.java\nindex 27ee9a8ca6..37276d00f8 100644\n--- a/plugins/sonar-core-plugin/src/main/java/org/sonar/plugins/core/issue/IssueTrackingDecorator.java\n+++ b/plugins/sonar-core-plugin/src/main/java/org/sonar/plugins/core/issue/IssueTrackingDecorator.java\n@@ -114,7 +114,7 @@ public class IssueTrackingDecorator implements Decorator {\n     for (Issue issue : issueCache.byComponent(resource.getEffectiveKey())) {\n       issues.add((DefaultIssue) issue);\n     }\n-    issueCache.removeAll(resource.getEffectiveKey());\n+    issueCache.clear(resource.getEffectiveKey());\n     // issues = all the issues created by rule engines during this module scan and not excluded by filters\n \n     // all the issues that are not closed in db before starting this module scan, including manual issues\ndiff --git a/sonar-batch/src/main/java/org/sonar/batch/issue/IssueCache.java b/sonar-batch/src/main/java/org/sonar/batch/issue/IssueCache.java\nindex 7fd894bca6..f804fc62ef 100644\n--- a/sonar-batch/src/main/java/org/sonar/batch/issue/IssueCache.java\n+++ b/sonar-batch/src/main/java/org/sonar/batch/issue/IssueCache.java\n@@ -49,7 +49,7 @@ public class IssueCache implements BatchComponent {\n     return this;\n   }\n \n-  public boolean removeAll(String componentKey) {\n-    return cache.remove(componentKey);\n+  public void clear(String componentKey) {\n+    cache.clear(componentKey);\n   }\n }\n",
        "1": "Fix copy / paste error",
        "2": " Fix issue caching to use clear instead of removeAll.",
        "3": "Fix quality flaws",
        "4": "Fix quality flaw",
        "5": "Fix issue tracking regression after last optimizations",
        "6": "Clear issue cache for a specific component key",
        "7": " Update to IssueCache: removed unnecessary cache entry for resource key.",
        "8": "Fix quality flaws"
    },
    {
        "diff": "diff --git a/library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java b/library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java\nindex 8f158b5..e7fa64f 100644\n--- a/library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java\n+++ b/library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java\n@@ -805,7 +805,7 @@ public class SlidingUpPanelLayout extends ViewGroup {\n         // Compute the top of the panel if its collapsed\n         return mIsSlidingUp\n                 ? getMeasuredHeight() - getPaddingBottom() - mPanelHeight - slidePixelOffset\n-                : getPaddingTop() + slidePixelOffset;\n+                : getPaddingTop() - panelHeight + mPanelHeight + slidePixelOffset;\n     }\n \n     /*\n@@ -957,7 +957,7 @@ public class SlidingUpPanelLayout extends ViewGroup {\n         result = super.drawChild(canvas, child, drawingTime);\n         canvas.restoreToCount(save);\n \n-        if (drawScrim && mCoveredFadeColor > 0) {\n+        if (drawScrim && mCoveredFadeColor != 0) {\n             final int baseAlpha = (mCoveredFadeColor & 0xff000000) >>> 24;\n             final int imag = (int) (baseAlpha * mSlideOffset);\n             final int color = imag << 24 | (mCoveredFadeColor & 0xffffff);\n",
        "1": "Fix panel height calculation and covered fade color condition",
        "2": "Fix NPE in slidePixelOffset",
        "3": " Added new panel height calculation for sliding up panel layout",
        "4": "Fix last commit",
        "5": " Fixes issue #1234: Changed SlidingUpPanelLayout to correctly calculate the top of the panel when collapsed and to correctly apply the covered fade color.",
        "6": "Fixed the top gravity support and dimming",
        "7": "Added ability to disable sliding",
        "8": "Fix off centred scrolling calculations to rotate correct values"
    },
    {
        "diff": "diff --git a/core/src/main/java/com/zaxxer/hikari/javassist/AgentRegistrationElf.java b/core/src/main/java/com/zaxxer/hikari/javassist/AgentRegistrationElf.java\nindex b698f97..31d8017 100644\n--- a/core/src/main/java/com/zaxxer/hikari/javassist/AgentRegistrationElf.java\n+++ b/core/src/main/java/com/zaxxer/hikari/javassist/AgentRegistrationElf.java\n@@ -44,7 +44,7 @@ public class AgentRegistrationElf\n         String agentJarPath = getAgentJarPath();\n         if (agentJarPath == null)\n         {\n-            LOGGER.warn(\"Cannot find the HikariCP-agent jar file through introspection.\");\n+            LOGGER.info(\"Cannot find the HikariCP-agent jar file through introspection.\");\n             return false;\n         }\n \n",
        "1": " Fixed warning message in AgentRegistrationElf.java to be more informative.",
        "2": "Change log level from warn to info in AgentRegistrationElf",
        "3": "Fix typo in warning message .",
        "4": "Clarify warning message .",
        "5": " Changed logging level for Cannot find the HikariCP-agent jar file through introspection message from WARN to INFO.",
        "6": "Log log message message",
        "7": "Demote warn log to info.",
        "8": "Clarify warning message ."
    },
    {
        "diff": "diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java\nindex b5c6d4bc..8a406bfe 100644\n--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java\n+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java\n@@ -18,7 +18,6 @@ package org.springframework.security.oauth2.provider.endpoint;\n \n import java.security.Principal;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n \n import org.springframework.http.HttpHeaders;\n",
        "1": " Removed import statement for HashMap in TokenEndpoint.java.",
        "2": "Fix compiler warnings",
        "3": " Fixed issue with empty response body in TokenEndpoint.",
        "4": "Remove unused imports",
        "5": "Delete unnecessary import",
        "6": "Drop unused import",
        "7": "Remove unused import statement in TokenEndpoint.java",
        "8": "Remove unused import"
    },
    {
        "diff": "diff --git a/library/src/main/java/com/h6ah4i/android/widget/advrecyclerview/draggable/RecyclerViewDragDropManager.java b/library/src/main/java/com/h6ah4i/android/widget/advrecyclerview/draggable/RecyclerViewDragDropManager.java\nindex 5e85ba7..b934538 100644\n--- a/library/src/main/java/com/h6ah4i/android/widget/advrecyclerview/draggable/RecyclerViewDragDropManager.java\n+++ b/library/src/main/java/com/h6ah4i/android/widget/advrecyclerview/draggable/RecyclerViewDragDropManager.java\n@@ -389,7 +389,7 @@ public class RecyclerViewDragDropManager {\n                             }\n                         }\n                     };\n-                    ViewCompat.postOnAnimation(mRecyclerView, mDeferredCancelProcess);\n+                    mRecyclerView.post(mDeferredCancelProcess);\n                 }\n             }\n         }\n@@ -399,6 +399,12 @@ public class RecyclerViewDragDropManager {\n     private void finishDragging(boolean result) {\n         final RecyclerView.ViewHolder draggedItem = mDraggingItem;\n \n+        // cancel deferred request\n+        if (mDeferredCancelProcess != null) {\n+            mRecyclerView.removeCallbacks(mDeferredCancelProcess);\n+            mDeferredCancelProcess = null;\n+        }\n+\n         // NOTE: setOverScrollMode() have to be called before calling removeItemDecoration()\n         if (mRecyclerView != null && mDraggingItem != null) {\n             ViewCompat.setOverScrollMode(mRecyclerView, mOrigOverScrollMode);\n@@ -643,7 +649,9 @@ public class RecyclerViewDragDropManager {\n     }\n \n     private void stopScrollOnDraggingProcess() {\n-        mScrollOnDraggingProcess.stop();\n+        if (mScrollOnDraggingProcess != null) {\n+            mScrollOnDraggingProcess.stop();\n+        }\n     }\n \n     private void swapItems(RecyclerView rv, RecyclerView.ViewHolder draggingItem, RecyclerView.ViewHolder swapTargetHolder) {\n",
        "1": " Fixed deferred cancel process in RecyclerViewDragDropManager to use mRecyclerView.post() instead of ViewCompat.postOnAnimation()",
        "2": "Add null check to make the cancelDrag ( ) method safe before attaching RecyclerView",
        "3": "Fix NullPointerException issue",
        "4": " Commit message: Fixes issue with deferred cancel process not being called after dragging item is dropped.",
        "5": "Fix NPE in RecyclerViewDragDropManager",
        "6": "Fix issue with cancelling deferred request and stopping scroll on dragging process in RecyclerViewDragDropManager",
        "7": "Add null check for instanceManager",
        "8": "Fix NPE when there is no items"
    },
    {
        "diff": "diff --git a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\nindex 5792373..a36125d 100644\n--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\n@@ -128,7 +128,7 @@ public abstract class AbstractReadableInstantFieldProperty implements Serializab\n      * @return the current text value\n      * @see DateTimeField#getAsText\n      */\n-    public final String getAsText() {\n+    public String getAsText() {\n         return getAsText(null);\n     }\n \n@@ -159,7 +159,7 @@ public abstract class AbstractReadableInstantFieldProperty implements Serializab\n      * @return the current text value\n      * @see DateTimeField#getAsShortText\n      */\n-    public final String getAsShortText() {\n+    public String getAsShortText() {\n         return getAsShortText(null);\n     }\n \n",
        "1": "Remove final keyword from getAsText() and getAsShortText() methods.",
        "2": "Fix a typo in Http2ClientStream .",
        "3": "Fix Application . error generated as it ' s not serializable .",
        "4": "Removed plugin methods that are no longer used .",
        "5": "Remove final method qualifier to match AbstractPartialFieldProperty",
        "6": " Fix getAsText() and getAsShortText() methods to return String instead of final String.",
        "7": "Make getAsText public",
        "8": " Added method to return short text value for AbstractReadableInstantFieldProperty."
    },
    {
        "diff": "diff --git a/subprojects/plugins/src/main/groovy/org/gradle/api/tasks/compile/JavaCompile.java b/subprojects/plugins/src/main/groovy/org/gradle/api/tasks/compile/JavaCompile.java\nindex b021b38..29c5661 100644\n--- a/subprojects/plugins/src/main/groovy/org/gradle/api/tasks/compile/JavaCompile.java\n+++ b/subprojects/plugins/src/main/groovy/org/gradle/api/tasks/compile/JavaCompile.java\n@@ -49,6 +49,9 @@ import java.io.File;\n  *     compileJava {\n  *         //enable compilation in a separate daemon process\n  *         options.fork = true\n+ *\n+ *         //enable incremental compilation\n+ *         options.incremental = true\n  *     }\n  * </pre>\n  */\n",
        "1": "Documented incremental java compilation in the DSL for JavaCompile task.",
        "2": " Enable incremental compilation and separate daemon process for JavaCompile task.",
        "3": "Added incremental compilation to the JavaCompile compilation",
        "4": " Fixed incremental compilation for JavaCompile task.",
        "5": "Add a comment about the bufferLock",
        "6": "added missing @ since comment .",
        "7": "Enable incremental compilation in JavaCompile task.",
        "8": "Fix absolutely braindead mistake ( mine ) which caused file to be closed before it was used ."
    },
    {
        "diff": "diff --git a/moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java b/moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java\nindex aea00d4b..7951fcda 100644\n--- a/moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java\n+++ b/moco-core/src/main/java/com/github/dreamhead/moco/resource/reader/TemplateResourceReader.java\n@@ -70,7 +70,6 @@ public class TemplateResourceReader implements ContentResourceReader {\n         Configuration cfg = new Configuration(CURRENT_VERSION);\n         cfg.setObjectWrapper(new DefaultObjectWrapperBuilder(CURRENT_VERSION).build());\n         cfg.setDefaultEncoding(\"UTF-8\");\n-        cfg.setIncompatibleImprovements(new Version(2, 3, 20));\n         cfg.setTemplateLoader(templateLoader);\n         return cfg;\n     }\n",
        "1": "removed http setting",
        "2": " Fixed version number in Configuration cfg.setIncompatibleImprovements() to match the current version.",
        "3": "corrected template parse error message",
        "4": "corrected umatched version for template",
        "5": " Remove incompatible improvements from TemplateResourceReader configuration.",
        "6": "remove unnecessary code",
        "7": "Remove unnecessary setting in TemplateResourceReader",
        "8": "removed the field - level for performance reasons"
    },
    {
        "diff": "diff --git a/core/java/android/view/ViewPropertyAnimator.java b/core/java/android/view/ViewPropertyAnimator.java\nindex e6bf420..500dc16 100644\n--- a/core/java/android/view/ViewPropertyAnimator.java\n+++ b/core/java/android/view/ViewPropertyAnimator.java\n@@ -309,8 +309,8 @@ public class ViewPropertyAnimator {\n      */\n     public ViewPropertyAnimator setStartDelay(long startDelay) {\n         if (startDelay < 0) {\n-            throw new IllegalArgumentException(\"Animators cannot have negative duration: \" +\n-                    startDelay);\n+            throw new IllegalArgumentException(\"Animators cannot have negative start \" +\n+                \"delay: \" + startDelay);\n         }\n         mStartDelaySet = true;\n         mStartDelay = startDelay;\n",
        "1": "Clarify typo in a warning message .",
        "2": "Fix a typo in ViewPropertyAnimator . setStartDelay .",
        "3": "Only buildLayer ( ) on attached views",
        "4": "Refactor exception message in setStartDelay method",
        "5": "Don ' t throw exception if not enough ( ) to be thrown",
        "6": "Fix a copy/paste typo in ViewPropertyAnimator",
        "7": " Fixes illegal argument exception message for negative start delay.",
        "8": " Fixes IllegalArgumentException when setting start delay to negative value"
    },
    {
        "diff": "diff --git a/bundles/io/org.openhab.io.multimedia.tts.freetts/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceFreeTTS.java b/bundles/io/org.openhab.io.multimedia.tts.freetts/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceFreeTTS.java\nindex 1c19522..ee69f75 100644\n--- a/bundles/io/org.openhab.io.multimedia.tts.freetts/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceFreeTTS.java\n+++ b/bundles/io/org.openhab.io.multimedia.tts.freetts/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceFreeTTS.java\n@@ -78,7 +78,7 @@ public class TTSServiceFreeTTS implements TTSService {\n \t/**\r\n \t * {@inheritDoc}\r\n \t */\r\n-\tpublic void speak(String text, String voiceName) {\r\n+\tpublic void say(String text, String voiceName) {\r\n \r\n \t\tif(text==null) {\r\n \t\t\treturn;\r\n",
        "1": "added generic modifier",
        "2": "Make speak to say",
        "3": "Change speak method to say in TTSServiceFreeTTS class.",
        "4": " Added say() method with voiceName parameter in TTSServiceFreeTTS class",
        "5": "renamed method in PlanConfiguration",
        "6": "renamed speak to say",
        "7": "fixed bug which prevented hyphens to be used in TTS on Mac",
        "8": " Rename 'speak' method to 'say' in TTSServiceFreeTTS class."
    },
    {
        "diff": "diff --git a/src/main/java/org/graylog2/indexer/MessageGateway.java b/src/main/java/org/graylog2/indexer/MessageGateway.java\nindex 161d7fb..afb0b1b 100644\n--- a/src/main/java/org/graylog2/indexer/MessageGateway.java\n+++ b/src/main/java/org/graylog2/indexer/MessageGateway.java\n@@ -22,6 +22,8 @@ package org.graylog2.indexer;\n import org.elasticsearch.action.ActionFuture;\n import org.elasticsearch.action.count.CountRequestBuilder;\n import org.elasticsearch.action.count.CountResponse;\n+import static org.elasticsearch.index.query.QueryBuilders.filteredQuery;\n+import static org.elasticsearch.index.query.FilterBuilders.rangeFilter;\n import org.elasticsearch.index.query.QueryBuilder;\n import org.graylog2.Core;\n import org.graylog2.plugin.streams.Stream;\n@@ -41,7 +43,9 @@ public class MessageGateway {\n     \n     public int streamMessageCount(Stream stream, int sinceTimestamp) {\n         CountRequestBuilder b = server.getIndexer().getClient().prepareCount();\n-        final QueryBuilder qb = matchQuery(\"streams\", stream.getId().toString());\n+        final QueryBuilder qb = filteredQuery(\n+                matchQuery(\"streams\", stream.getId().toString()),\n+                rangeFilter(\"created_at\").gte(sinceTimestamp));\n         \n         b.setIndices(server.getDeflector().getAllDeflectorIndexNames());\n         b.setQuery(qb);\n",
        "1": "improve toString method",
        "2": "set indexe consistency level to ONE",
        "3": "Add filter to count only messages since a specific timestamp in MessageGateway.",
        "4": " Added filter for stream message count query to only include messages created after a certain timestamp.",
        "5": "fix missing range in streamMessageCount()",
        "6": "Do not name out / final values in Android",
        "7": " Added filter query for message count in MessageGateway",
        "8": "Fix MessageGateway of filteredQuery"
    },
    {
        "diff": "diff --git a/source/com/intellij/openapi/module/JavaModuleType.java b/source/com/intellij/openapi/module/JavaModuleType.java\nindex 1ef19f0..f88872b 100644\n--- a/source/com/intellij/openapi/module/JavaModuleType.java\n+++ b/source/com/intellij/openapi/module/JavaModuleType.java\n@@ -86,6 +86,7 @@ public class JavaModuleType extends ModuleType<JavaModuleBuilder> {\n                                               final ModulesProvider modulesProvider) {\n     final ProjectWizardStepFactory wizardFactory = ProjectWizardStepFactory.getInstance();\n     ArrayList<ModuleWizardStep> steps = new ArrayList<ModuleWizardStep>();\n+    steps.add(wizardFactory.createSourcePathsStep(wizardContext, moduleBuilder, getWizardIcon(), \"project.creatingModules.page3\"));\n     steps.add(wizardFactory.createProjectJdkStep(wizardContext));\n     final ModuleWizardStep[] wizardSteps = steps.toArray(new ModuleWizardStep[steps.size()]);\n     return ArrayUtil.mergeArrays(wizardSteps, super.createWizardSteps(wizardContext, moduleBuilder, modulesProvider), ModuleWizardStep.class);\n",
        "1": "Add source paths step to module creation wizard.",
        "2": "restore src step",
        "3": " Added a new step to the Java module wizard to configure source paths.",
        "4": "restore src step",
        "5": "set test local names only to be the same in the tree list",
        "6": " Added new step to create source paths.",
        "7": "do not show project in the project",
        "8": "update default dir"
    },
    {
        "diff": "diff --git a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\nindex e8f437df18..caaedd891b 100644\n--- a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n+++ b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n@@ -67,9 +67,6 @@ public class BinaryInspector {\n \t\t\t\t//\"-zoom=16\",\n \t\t\t\t//\"-bbox=4,55,7,50\", \n //\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"\n-\t\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Ukraine_europe.obf\"\n-//\t\t\t\t \"/home/victor/projects/osmand/osm-gen/World_basemap_2_b.obf___\"\n-//\t\t\t\t\t\"/home/victor/projects/osmand/osm-gen/World_basemap_2.obf__\"\n \t\t\t\t\t});\n \t\t} else {\n \t\t\tin.inspector(args);\n",
        "1": "Remove obsolete lines",
        "2": "Remove unnecessary code and update file paths in BinaryInspector.java",
        "3": "remove obsolete home",
        "4": " Changed inspection of binary files to exclude unnecessary paths.",
        "5": "Fix binary inspector",
        "6": " Commit message: Update BinaryInspector.java to change the path of the obf files.",
        "7": "Remove local lines",
        "8": "Add missing comment"
    },
    {
        "diff": "diff --git a/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/distributed/IMapRegionCache.java b/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/distributed/IMapRegionCache.java\nindex d388ada025..e3a8d021a3 100644\n--- a/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/distributed/IMapRegionCache.java\n+++ b/hazelcast-hibernate/src/main/java/com/hazelcast/hibernate/distributed/IMapRegionCache.java\n@@ -94,12 +94,12 @@ public class IMapRegionCache implements RegionCache {\n                     return false;\n                 }\n             } else if (previousVersion == null || versionComparator.compare(currentVersion, previousVersion) > 0) {\n-                map.set(key, value, 0, TimeUnit.MILLISECONDS);\n+                map.set(key, value);\n                 return true;\n             }\n             return false;\n         } else {\n-            map.set(key, value, 0, TimeUnit.MILLISECONDS);\n+            map.set(key, value);\n             return true;\n         }\n     }\n",
        "1": " Fixes issue #1234: Removed unnecessary timeout parameter from IMapRegionCache.set(key, value) method.",
        "2": "Refactor IMapRegionCache set method",
        "3": "changes set behaviour to old one (before changing logic of zero ttl)",
        "4": "Fixing open bugs",
        "5": "Fixed the build",
        "6": "Fixed bug in IMapRegionCache",
        "7": " Fixed bug where map.set() was not being called with the correct time unit.",
        "8": "added get / setInt ( ) to Bundle"
    },
    {
        "diff": "diff --git a/openapi/src/com/intellij/openapi/vcs/AbstractVcs.java b/openapi/src/com/intellij/openapi/vcs/AbstractVcs.java\nindex 92e3ee2..52840c7 100644\n--- a/openapi/src/com/intellij/openapi/vcs/AbstractVcs.java\n+++ b/openapi/src/com/intellij/openapi/vcs/AbstractVcs.java\n@@ -25,7 +25,6 @@ import com.intellij.openapi.vcs.changes.ChangeProvider;\n import com.intellij.openapi.vcs.checkin.CheckinEnvironment;\n import com.intellij.openapi.vcs.diff.DiffProvider;\n import com.intellij.openapi.vcs.diff.RevisionSelector;\n-import com.intellij.openapi.vcs.fileView.FileViewEnvironment;\n import com.intellij.openapi.vcs.history.VcsHistoryProvider;\n import com.intellij.openapi.vcs.history.VcsRevisionNumber;\n import com.intellij.openapi.vcs.update.UpdateEnvironment;\n@@ -115,10 +114,6 @@ public abstract class AbstractVcs {\n     myIsStarted = false;\n   }\n \n-  @Nullable public FileViewEnvironment getFileViewEnvironment() {\n-    return null;\n-  }\n-\n   /**\n    * Returns the interface for performing checkin / commit / submit operations.\n    *\n",
        "1": "Remove unused method getFileViewEnvironment() in AbstractVcs",
        "2": "delete obsolete method",
        "3": " Commit message: Remove unused method getFileViewEnvironment() from AbstractVcs.",
        "4": "delete file view API leftovers",
        "5": "remove unused imports",
        "6": "remove unused method",
        "7": "( go ) function must be used",
        "8": " Update to AbstractVcs: removed unused FileViewEnvironment getter."
    },
    {
        "diff": "diff --git a/opentripplanner-gui/src/main/java/org/opentripplanner/gui/VizGui.java b/opentripplanner-gui/src/main/java/org/opentripplanner/gui/VizGui.java\nindex 5aaa7bc5d..f6ce19bba 100644\n--- a/opentripplanner-gui/src/main/java/org/opentripplanner/gui/VizGui.java\n+++ b/opentripplanner-gui/src/main/java/org/opentripplanner/gui/VizGui.java\n@@ -261,13 +261,14 @@ public class VizGui extends JFrame implements VertexSelectionListener {\n     public VizGui(String graphName) {\n         super();\n  \n-\n         GraphServiceImpl graphService = new GraphServiceImpl();\n         graphService.setGraphPath(new File(graphName));\n         graphService.refreshGraph();\n             \n         setGraph(graphService);\n         \n+        setTitle(\"VizGui: \" + graphName);\n+\n         init();\n     }\n     \n",
        "1": "use more debug info",
        "2": "fix up VizGui after reach refactor",
        "3": "Make the window have a somewhat sensible title.",
        "4": "do not show setGraphPath ( )",
        "5": " Added title to VizGui frame for improved user experience",
        "6": "Add title to VizGui window",
        "7": "Add more logging",
        "8": " Added title bar with graph name to VizGui frame."
    },
    {
        "diff": "diff --git a/h2o-algos/src/main/java/hex/DataInfo.java b/h2o-algos/src/main/java/hex/DataInfo.java\nindex 1d8c8d465..8f844c58e 100644\n--- a/h2o-algos/src/main/java/hex/DataInfo.java\n+++ b/h2o-algos/src/main/java/hex/DataInfo.java\n@@ -504,7 +504,10 @@ public class DataInfo extends Keyed<DataInfo> {\n     _responses = dinfo._responses;\n     _cats = catLevels.length;\n     _nums = fr.numCols()-_cats - dinfo._responses - (_offset?1:0) - (_weights?1:0) - (_fold?1:0);\n-    _numOffsets = _nums==0?new int[0]:dinfo._numOffsets;\n+    _numOffsets = _nums==0?new int[0]:dinfo._numOffsets.clone();\n+    int diff = _numOffsets.length>0?_numOffsets[0]-s:0;\n+    for(int i=0;i<_numOffsets.length; i++)  // need to shift everyone down by the offset!\n+      _numOffsets[i] -= diff;\n     _useAllFactorLevels = true;//dinfo._useAllFactorLevels;\n     _numMeans = new double[_nums];\n     _normMul = normMul;\n@@ -1173,5 +1176,4 @@ public class DataInfo extends Keyed<DataInfo> {\n     }\n     return rows;\n   }\n-\n }\n",
        "1": "Fix NPE in DataInfo .",
        "2": "Fix offset bug in GLM .",
        "3": "Flip a variable in Frame . java .",
        "4": " Added clone method for _numOffsets to preserve original values",
        "5": " Clone _numOffsets array and shift elements down by the offset to account for new data.",
        "6": "Fix offset calculation in DataInfo class.",
        "7": "adjust _numOffsets when filtering expanded columns",
        "8": "Make test not throw execptiopn"
    },
    {
        "diff": "diff --git a/core/java/android/provider/Calendar.java b/core/java/android/provider/Calendar.java\nindex 2286bb2..5e36852 100644\n--- a/core/java/android/provider/Calendar.java\n+++ b/core/java/android/provider/Calendar.java\n@@ -583,6 +583,20 @@ public final class Calendar {\n          */\n         public static final Uri CONTENT_URI = Uri.parse(\"content://calendar/event_entities\");\n \n+        /**\n+         * The name of the account instance to which this row belongs, which when paired with\n+         * {@link #ACCOUNT_TYPE} identifies a specific account.\n+         * <P>Type: TEXT</P>\n+         */\n+        public static final String ACCOUNT_NAME = \"account_name\";\n+\n+        /**\n+         * The type of account to which this row belongs, which when paired with\n+         * {@link #ACCOUNT_NAME} identifies a specific account.\n+         * <P>Type: TEXT</P>\n+         */\n+        public static final String ACCOUNT_TYPE = \"account_type\";\n+\n         public static EntityIterator newEntityIterator(Cursor cursor, ContentResolver resolver) {\n             return new EntityIteratorImpl(cursor, resolver);\n         }\n",
        "1": "Add account name and type fields in Calendar provider.",
        "2": "Add account name / type query parameters for calendar Events.",
        "3": "Add a new helper column type",
        "4": " Added fields for account name and account type to the Calendar class.",
        "5": "Add a method to the Calendar",
        "6": "Add AGGREGATION_INTERVAL_SECONDS ( ) API to MediaStore . . .",
        "7": " Added new fields to the Calendar provider: ACCOUNT_NAME and ACCOUNT_TYPE.",
        "8": "add new columns ."
    },
    {
        "diff": "diff --git a/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java b/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java\nindex a744f47..77d7886 100644\n--- a/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java\n+++ b/samples/flickr/src/com/bumptech/glide/samples/flickr/FlickrPhotoGrid.java\n@@ -13,7 +13,7 @@ import android.widget.ImageView;\n import com.actionbarsherlock.app.SherlockFragment;\n import com.bumptech.glide.Glide;\n import com.bumptech.glide.ListPreloader;\n-import com.bumptech.glide.loader.bitmap.BaseBitmapLoadFactory;\n+import com.bumptech.glide.loader.bitmap.ImageVideoBitmapLoadFactory;\n import com.bumptech.glide.loader.bitmap.model.Cache;\n import com.bumptech.glide.loader.bitmap.transformation.CenterCrop;\n import com.bumptech.glide.loader.image.ImageManagerLoader;\n@@ -142,7 +142,7 @@ public class FlickrPhotoGrid extends SherlockFragment implements PhotoViewer {\n                 // reason why ImagePresenter is used here and not in FlickrPhotoList.\n                 final Animation fadeIn = AnimationUtils.loadAnimation(context, R.anim.fade_in);\n                 imagePresenter = new ImagePresenter.Builder<Photo, ImageViewTarget>()\n-                        .setBitmapLoadFactory(new BaseBitmapLoadFactory<Photo, InputStream, Void>(\n+                        .setBitmapLoadFactory(new ImageVideoBitmapLoadFactory<Photo, InputStream, Void>(\n                                 new FlickrModelLoader(context, urlCache), Downsampler.AT_LEAST,\n                                 new CenterCrop<Photo>()))\n                         .setTarget(new ImageViewTarget(imageView), context)\n",
        "1": "Fix rename in Flickr sample",
        "2": " Update FlickrPhotoGrid to use ImageVideoBitmapLoadFactory instead of BaseBitmapLoadFactory for loading bitmaps.",
        "3": " Commit message: Updated FlickrPhotoGrid to use ImageVideoBitmapLoadFactory for loading bitmaps.",
        "4": "Fix bug in flickr",
        "5": "Change bitmap load factory in FlickrPhotoGrid to use ImageVideoBitmapLoadFactory.",
        "6": "Fix a typo in a test . . .",
        "7": "Properly handle null disk caches .",
        "8": "Rename LambdaTest to LambdaIT"
    },
    {
        "diff": "diff --git a/contrib/platform/src/com/sun/jna/platform/mac/XAttrUtil.java b/contrib/platform/src/com/sun/jna/platform/mac/XAttrUtil.java\nindex da1db0e..8f2349c 100644\n--- a/contrib/platform/src/com/sun/jna/platform/mac/XAttrUtil.java\n+++ b/contrib/platform/src/com/sun/jna/platform/mac/XAttrUtil.java\n@@ -25,7 +25,7 @@ public class XAttrUtil {\n \n \tpublic static List<String> listXAttr(String path) {\n \t\t// get required buffer size\n-\t\tlong bufferLength = XAttr.INSTANCE.listxattr(path, Pointer.NULL, 0, 0);\n+\t\tlong bufferLength = XAttr.INSTANCE.listxattr(path, null, 0, 0);\n \n \t\tif (bufferLength < 0)\n \t\t\treturn null;\n@@ -44,7 +44,7 @@ public class XAttrUtil {\n \n \tpublic static String getXAttr(String path, String name) {\n \t\t// get required buffer size\n-\t\tlong bufferLength = XAttr.INSTANCE.getxattr(path, name, Pointer.NULL, 0, 0, 0);\n+\t\tlong bufferLength = XAttr.INSTANCE.getxattr(path, name, null, 0, 0, 0);\n \n \t\tif (bufferLength < 0)\n \t\t\treturn null;\n",
        "1": " Fix XAttrUtil to use null instead of Pointer.NULL.",
        "2": "just use null",
        "3": "Refactor XAttrUtil class to use null instead of Pointer.NULL for better readability.",
        "4": "Code class name in PasswordSafe",
        "5": "use correct row for daemon property name",
        "6": "Replace string search and replace with char one",
        "7": " Added support for listing X attributes on Mac with the `listXAttr()` method.",
        "8": "Fix bug in XAttrUtil"
    },
    {
        "diff": "diff --git a/moco-runner/src/test/java/com/github/dreamhead/moco/MocoJsonSocketHttpRunner.java b/moco-runner/src/test/java/com/github/dreamhead/moco/MocoJsonSocketRunnerTest.java\nsimilarity index 97%\nrename from moco-runner/src/test/java/com/github/dreamhead/moco/MocoJsonSocketHttpRunner.java\nrename to moco-runner/src/test/java/com/github/dreamhead/moco/MocoJsonSocketRunnerTest.java\nindex 97d5e092..a167587a 100644\n--- a/moco-runner/src/test/java/com/github/dreamhead/moco/MocoJsonSocketHttpRunner.java\n+++ b/moco-runner/src/test/java/com/github/dreamhead/moco/MocoJsonSocketRunnerTest.java\n@@ -12,7 +12,7 @@ import static com.github.dreamhead.moco.helper.RemoteTestUtils.port;\n import static org.hamcrest.CoreMatchers.is;\n import static org.junit.Assert.assertThat;\n \n-public class MocoJsonSocketHttpRunner {\n+public class MocoJsonSocketRunnerTest {\n     private MocoSocketHelper helper;\n \n     @Before\n",
        "1": " Renamed MocoJsonSocketHttpRunner to MocoJsonSocketRunnerTest for test purposes",
        "2": "Rename MocoJsonSocketHttpRunner to MocoJsonSocketRunnerTest",
        "3": "make brokerhosts serializable",
        "4": "corrected json socket runner test name",
        "5": "renamed moco monitor code to moco request hit test",
        "6": " Renamed MocoJsonSocketHttpRunner to MocoJsonSocketRunnerTest and updated imports.",
        "7": "Make MocoJsonSocketHttpRunner public",
        "8": "renamed moco monitor test to moco request hit test"
    },
    {
        "diff": "diff --git a/src/java/voldemort/server/socket/AdminServiceRequestHandler.java b/src/java/voldemort/server/socket/AdminServiceRequestHandler.java\nindex 38eacafcf..98d00774d 100644\n--- a/src/java/voldemort/server/socket/AdminServiceRequestHandler.java\n+++ b/src/java/voldemort/server/socket/AdminServiceRequestHandler.java\n@@ -347,7 +347,7 @@ public class AdminServiceRequestHandler implements RequestHandler {\n         try {\n             String storesString = inputStream.readUTF();\n \n-            List<StoreDefinition> storeDefs = new StoreDefinitionsMapper().readStoreList(new StringReader(new String(storesString)));\n+            List<StoreDefinition> storeDefs = new StoreDefinitionsMapper().readStoreList(new StringReader(storesString));\n \n             // update cluster details in metaDataStore\n             metadataStore.put(new ByteArray(ByteUtils.getBytes(MetadataStore.STORES_KEY, \"UTF-8\")),\n",
        "1": "Fixing test case",
        "2": "Fix a typo in the StoreDefinitionsMapper StoreDefinitionsMapper cluster",
        "3": "Increase the number of threads in migrate partitions tool",
        "4": "Fixing the argument passed to the StoreDefinitionsMapper().readStoreList() method in AdminServiceRequestHandler.java",
        "5": " Update AdminServiceRequestHandler to use new StoreDefinitionsMapper for reading store list.",
        "6": " Fixed issue with reading store definitions from input stream.",
        "7": "Remove redundant String allocation.",
        "8": "expression recent commits static set class instead of null"
    },
    {
        "diff": "diff --git a/src/com/interview/number/MedianOf3Number.java b/src/com/interview/number/MedianOf3Number.java\nindex c5201aa..70ee7bc 100644\n--- a/src/com/interview/number/MedianOf3Number.java\n+++ b/src/com/interview/number/MedianOf3Number.java\n@@ -2,7 +2,6 @@ package com.interview.number;\n \n public class MedianOf3Number {\n \n-\n     public int median(int arr[]){\n         int l = 0;\n         int h = 2;\ndiff --git a/src/com/interview/number/NBy2PairSumToK.java b/src/com/interview/number/NBy2PairSumToK.java\nindex b77984b..0eb771f 100644\n--- a/src/com/interview/number/NBy2PairSumToK.java\n+++ b/src/com/interview/number/NBy2PairSumToK.java\n@@ -1,7 +1,7 @@\n package com.interview.number;\n \n /**\n- * Write a program to determine whether n/2 distintinctive pairs can be formed \n+ * Write a program to determine whether n/2 distinctive pairs can be formed \n  * from given n integers where n is even and each pair's sum is divisible by given k. \n  * Numbers cannot be repeated in the pairs, that means only you can form total n/2 pairs.\n  */\ndiff --git a/src/com/interview/number/NotIncluding4.java b/src/com/interview/number/NotIncluding4.java\nindex f4051c0..fec73c5 100644\n--- a/src/com/interview/number/NotIncluding4.java\n+++ b/src/com/interview/number/NotIncluding4.java\n@@ -2,6 +2,10 @@ package com.interview.number;\n \n /**\n  * http://saikatd.wordpress.com/author/saikatd/page/4/\n+ * In a number system where 4 is not there, how do you convert such a number system to decimal\n+ * Here basically we have base 9 and convert it to base 10. Just be careful when you convert\n+ * anything from 5 to 9 because they are basically 4 to 8 in base 9 system. So subtract them \n+ * by 1 when doing multiplications.\n  */\n public class NotIncluding4 {\n \n",
        "1": "Added some helpful comments to ConditionalRunRule",
        "2": "",
        "3": "update loop in linklist qs",
        "4": "Refactored MedianOf3Number.java to use distinct pairs, updated NBy2PairSumToK.java to use distinct pairs and changed variable names, and added NotIncluding4.java to convert base 9 numbers to base 10.",
        "5": "Refactor code and update comments",
        "6": "Median of 3 numbers changed from -1 to 0",
        "7": "Adding some comments",
        "8": "Fix javadoc in MedianOf3Number"
    },
    {
        "diff": "diff --git a/platform/lang-api/src/com/intellij/execution/DefaultExecutionResult.java b/platform/lang-api/src/com/intellij/execution/DefaultExecutionResult.java\nindex 309c219..669115a 100644\n--- a/platform/lang-api/src/com/intellij/execution/DefaultExecutionResult.java\n+++ b/platform/lang-api/src/com/intellij/execution/DefaultExecutionResult.java\n@@ -36,6 +36,12 @@ public class DefaultExecutionResult implements ExecutionResult {\n   private AnAction[] myRestartActions;\n   private final List<AnAction> myStopActions = new ArrayList<AnAction>();\n \n+  public DefaultExecutionResult() {\n+    myConsole = null;\n+    myProcessHandler = null;\n+    myActions = AnAction.EMPTY_ARRAY;\n+  }\n+\n   public DefaultExecutionResult(final ExecutionConsole console, @NotNull final ProcessHandler processHandler) {\n     this(console, processHandler, AnAction.EMPTY_ARRAY);\n   }\n",
        "1": "close not correct",
        "2": "disable autoselection for Run . . . / Debug . . .",
        "3": "do not show null if it is not available",
        "4": " Added constructor for DefaultExecutionResult with console and processHandler parameters",
        "5": " Added constructor for DefaultExecutionResult to initialize fields with default values.",
        "6": "fixed VM leak in object / by - in",
        "7": "Refactor DefaultExecutionResult constructor",
        "8": "use DefaultExecutionResult instead of custom class"
    },
    {
        "diff": "diff --git a/compiler/backend/src/org/jetbrains/jet/codegen/FunctionCodegen.java b/compiler/backend/src/org/jetbrains/jet/codegen/FunctionCodegen.java\nindex bd828a9..4a0985c 100644\n--- a/compiler/backend/src/org/jetbrains/jet/codegen/FunctionCodegen.java\n+++ b/compiler/backend/src/org/jetbrains/jet/codegen/FunctionCodegen.java\n@@ -118,6 +118,8 @@ public class FunctionCodegen extends GenerationStateAware {\n         AnnotationCodegen.forMethod(mv, typeMapper).genAnnotations(functionDescriptor);\n         if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES) return;\n \n+        generateParameterAnnotations(functionDescriptor, mv);\n+\n         if (isAbstractMethod(functionDescriptor, methodContext.getContextKind())) return;\n \n         if (state.getClassBuilderMode() == ClassBuilderMode.STUBS) {\n@@ -134,6 +136,12 @@ public class FunctionCodegen extends GenerationStateAware {\n         methodContext.recordSyntheticAccessorIfNeeded(functionDescriptor, typeMapper);\n     }\n \n+    private void generateParameterAnnotations(@NotNull FunctionDescriptor functionDescriptor, @NotNull MethodVisitor mv) {\n+        for (ValueParameterDescriptor parameter : functionDescriptor.getValueParameters()) {\n+            AnnotationCodegen.forParameter(parameter.getIndex(), mv, typeMapper).genAnnotations(parameter);\n+        }\n+    }\n+\n     @Nullable\n     private Type getThisTypeForFunction(@NotNull FunctionDescriptor functionDescriptor, @NotNull MethodContext context) {\n         ReceiverParameterDescriptor expectedThisObject = functionDescriptor.getExpectedThisObject();\n",
        "1": "Add parameter annotations in FunctionCodegen",
        "2": "add missing check",
        "3": "Add mechanism to enable old if - else",
        "4": "Generate parameter annotations even in LIGHT_CLASSES mode",
        "5": " Add method generateParameterAnnotations to FunctionCodegen to generate annotations for function parameters.",
        "6": "Restore parameter annotation codegen",
        "7": " Added generateParameterAnnotations method to generate annotations for function parameters",
        "8": "Fix parameter in closures for new implementations"
    },
    {
        "diff": "diff --git a/app/src/main/java/name/gudong/translate/ui/activitys/MainActivity.java b/app/src/main/java/name/gudong/translate/ui/activitys/MainActivity.java\nindex 5276665..fc0d4a9 100644\n--- a/app/src/main/java/name/gudong/translate/ui/activitys/MainActivity.java\n+++ b/app/src/main/java/name/gudong/translate/ui/activitys/MainActivity.java\n@@ -459,6 +459,7 @@ public class MainActivity extends BaseActivity<MainPresenter> implements IMainVi\n     public void onClickClear(View view) {\n         MobclickAgent.onEvent(getApplicationContext(),\"action_clear\");\n         resetView();\n+        InputMethodUtils.openSoftKeyboard(this,mInput);\n     }\n \n     private void resetView() {\n",
        "1": "Fix bug in onClickClear",
        "2": "Fixed bug with wrong image set for Number values",
        "3": "If user is not ready show all file .",
        "4": "Add method to open soft keyboard when clearing input in MainActivity.",
        "5": "Improved menu inflation",
        "6": "when clear input content,now show keyboard auto",
        "7": " Added method +6 to resetView() for soft keyboard opening",
        "8": " Added functionality to open soft keyboard when clicking clear button in MainActivity."
    },
    {
        "diff": "diff --git a/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java b/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java\nindex 80a7b59..ff817c4 100644\n--- a/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java\n+++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java\n@@ -103,8 +103,8 @@ public class RecoveriesCollection {\n     /**\n      * fail the recovery with the given id (if found) and remove it from the recovery collection\n      *\n-     * @param id id of the recovery to fail\n-     * @param e  exception with reason for the failure\n+     * @param id               id of the recovery to fail\n+     * @param e                exception with reason for the failure\n      * @param sendShardFailure true a shard failed message should be sent to the master\n      */\n     public void failRecovery(long id, RecoveryFailedException e, boolean sendShardFailure) {\n@@ -130,11 +130,16 @@ public class RecoveriesCollection {\n     @Nullable\n     public StatusRef findRecoveryByShard(IndexShard indexShard) {\n         for (RecoveryStatus recoveryStatus : onGoingRecoveries.values()) {\n-            if (recoveryStatus.indexShard() == indexShard) {\n-                if (recoveryStatus.tryIncRef()) {\n-                    return new StatusRef(recoveryStatus);\n-                } else {\n-                    return null;\n+            // check if the recovery has already finished and if not protect\n+            // against it being closed on us while we check\n+            if (recoveryStatus.tryIncRef()) {\n+                try {\n+                    if (recoveryStatus.indexShard() == indexShard) {\n+                        recoveryStatus.incRef();\n+                        return new StatusRef(recoveryStatus);\n+                    }\n+                } finally {\n+                    recoveryStatus.decRef();\n                 }\n             }\n         }\n",
        "1": " Refactored RecoveriesCollection.failRecovery() method to accept a boolean parameter sendShardFailure and updated findRecoveryByShard() method to check if the recovery has already finished before returning a reference.",
        "2": " Fixed issue where recovery with id '80a7b59' was not properly failed.",
        "3": "Fix recovery of recovery",
        "4": "Don ' t notify null if load timeout request",
        "5": "RecoveriesCollection.findRecoveryByShard should call recoveryStatus.tryIncRef before accessing fields",
        "6": "Fix Layout . clear ( )",
        "7": "Fix bug in failRecovery() method and improve findRecoveryByShard() method in RecoveriesCollection class",
        "8": "improve docu of the Drawer"
    },
    {
        "diff": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/Source.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/Source.java\nindex 052987da2..c827cde5c 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/source/Source.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/source/Source.java\n@@ -1068,8 +1068,6 @@ public class Source implements InsertSourceHandler,\n                @Override\n                public void onResponseReceived(JsObject createdFiles)\n                {\n-                  Debug.logObject(createdFiles);\n-                  \n                   // Loop once to collect failures\n                   List<String> failedPaths = new ArrayList<String>();\n                   for (String filePath : JsUtil.asIterable(createdFiles.keys()))\n",
        "1": " Remove unnecessary debug statement and simplify code for handling failed file creations.",
        "2": "eliminate eclipse warnings",
        "3": "remove unneeded log",
        "4": "remove file from mru list if it is deleted",
        "5": "don ' t automatically character encoding to ignore window size",
        "6": " Fixed issue with incorrect log statements in Source.java",
        "7": "remove debug logging",
        "8": "Remove debug logging in Source.java"
    },
    {
        "diff": "diff --git a/source/com/intellij/openapi/components/impl/stores/ProjectStoreImpl.java b/source/com/intellij/openapi/components/impl/stores/ProjectStoreImpl.java\nindex 1aa82e4..a3ca5b6 100644\n--- a/source/com/intellij/openapi/components/impl/stores/ProjectStoreImpl.java\n+++ b/source/com/intellij/openapi/components/impl/stores/ProjectStoreImpl.java\n@@ -183,9 +183,9 @@ class ProjectStoreImpl extends BaseFileConfigurableStoreImpl implements IProject\n \n     collectReadonlyFiles(getConfigurationFiles(), readonlyFiles);\n \n-    for (Module module1 : modules) {\n-      final ModuleImpl module = (ModuleImpl)module1;\n-      collectReadonlyFiles(((ModuleStoreImpl)module.getStateStore()).getConfigurationFiles(), readonlyFiles);\n+    for (Module module : modules) {\n+      final ModuleStoreImpl moduleStore = (ModuleStoreImpl)((ModuleImpl)module).getStateStore();\n+      moduleStore.collectReadonlyFiles(moduleStore.getConfigurationFiles(), readonlyFiles);\n     }\n \n     return ReadonlyStatusHandler.getInstance(myProject).ensureFilesWritable(readonlyFiles.toArray(new VirtualFile[readonlyFiles.size()]));\n",
        "1": "create injected fold region from its own class",
        "2": "do not show module in the ReadonlyStatusHandler",
        "3": "external roots changed performance optimization",
        "4": " Changed implementation of collectReadonlyFiles to use ModuleStoreImpl instead of ModuleImpl.",
        "5": "[ progress ] Fix spacing",
        "6": "Fix file save",
        "7": " Fixes #12345: Corrected module readonly file collection to use the correct state store implementation.",
        "8": "Refactor code to improve readability and maintainability in ProjectStoreImpl.java"
    },
    {
        "diff": "diff --git a/core/common/src/main/java/alluxio/LeaderInquireClient.java b/core/common/src/main/java/alluxio/LeaderInquireClient.java\nindex c0b6b12..ad451dd 100644\n--- a/core/common/src/main/java/alluxio/LeaderInquireClient.java\n+++ b/core/common/src/main/java/alluxio/LeaderInquireClient.java\n@@ -107,7 +107,7 @@ public final class LeaderInquireClient {\n       }\n     } catch (Exception e) {\n       LOG.error(\"Error getting the master address from zookeeper. Zookeeper address: {}\",\n-          mZookeeperAddress, e.getMessage());\n+          mZookeeperAddress, e);\n     }\n \n     return null;\n",
        "1": "Improve error message",
        "2": "Fix ' channelFactory ' bug in TestVoiceActivity . java",
        "3": " Fix issue with incorrect logging of exception message in LeaderInquireClient.",
        "4": "Fix error in alluxio",
        "5": "Remove unnecessary casts .",
        "6": "Fix error message in LeaderInquireClient",
        "7": "Fix zookeeper exception logging",
        "8": " Added check for null zookeeper address in LeaderInquireClient constructor"
    },
    {
        "diff": "diff --git a/src/info/guardianproject/otr/app/im/app/ImApp.java b/src/info/guardianproject/otr/app/im/app/ImApp.java\nindex 16ce58ae..9cc067a7 100644\n--- a/src/info/guardianproject/otr/app/im/app/ImApp.java\n+++ b/src/info/guardianproject/otr/app/im/app/ImApp.java\n@@ -255,8 +255,9 @@ public class ImApp extends Application {\n \n         PRNGFixes.apply(); //Google's fix for SecureRandom bug: http://android-developers.blogspot.com/2013/08/some-securerandom-thoughts.html\n \n+        // load these libs up front to shorten the delay after typing the passphrase\n         SQLiteDatabase.loadLibs(getApplicationContext());\n-        VirtualFileSystem.get().isMounted(); //use this to trigger loadLibs\n+        VirtualFileSystem.get().isMounted();\n \n         mConnections = new HashMap<Long, IImConnection>();\n         mApplicationContext = this;\n",
        "1": "Use correct MAX_DATA_SIZE",
        "2": " Added loadLibs() call to ImApp.java to shorten delay after typing passphrase",
        "3": "don ' t clear STRUCT if there is no suspended at all",
        "4": "Fix a bug in ImApp",
        "5": "explain why the SQLCipher libs are loaded at app start",
        "6": "Add upfront loading of libraries to shorten delay after typing passphrase",
        "7": "create a static variable the app instance",
        "8": " Added loadLibs call to shorten delay after typing passphrase."
    },
    {
        "diff": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java\nindex edb5b17..d479cd6 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/transaction/TxLog.java\n@@ -104,11 +104,8 @@ public class TxLog\n      * \n      * @param fileName\n      *            Filename of file to use\n-<<<<<<< HEAD\n      * @param fileSystem\n      *            The concrete FileSystemAbstraction to use.\n-=======\n->>>>>>> 1.9-maint\n      * @throws IOException\n      *             If unable to open file\n      */\n",
        "1": " Fixed issue with incorrect file name in TxLog.",
        "2": "Refactor TxLog class to remove unnecessary code.",
        "3": "Removed unused line",
        "4": "Fixed an issue where the tx log wasn ' t closed properly , leaving transactions not marked as finished .",
        "5": "Remove merge leftovers",
        "6": "Remove unused code",
        "7": "Removed unused method Lexer . nextTokenOrRuleToken",
        "8": " Remove parameter `fileSystem` from TxLog constructor and use the passed file name to determine the file system."
    },
    {
        "diff": "diff --git a/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentActions.java b/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentActions.java\nindex 23f72deb5..502f3dde1 100644\n--- a/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentActions.java\n+++ b/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentActions.java\n@@ -483,7 +483,6 @@ public class CommentActions {\n                     }\n                     else {\n                         // update status in SQLite of successfully moderated comments\n-                        Blog blog = WordPress.getBlog(accountId);\n                         CommentTable.updateCommentStatus(blog.getLocalTableBlogId(), comment.commentID,\n                                 CommentStatus.toString(CommentStatus.TRASH));\n                     }\n@@ -556,7 +555,6 @@ public class CommentActions {\n                 }\n                 else {\n                     // update status in SQLite of successfully moderated comments\n-                    Blog blog = WordPress.getBlog(accountId);\n                     CommentTable.updateCommentsStatus(blog.getLocalTableBlogId(), deletedComments,\n                             CommentStatus.toString(CommentStatus.TRASH));\n                 }\n",
        "1": "Removed unused variable",
        "2": " Update CommentActions.java to use CommentTable.updateCommentStatus and CommentTable.updateCommentsStatus instead of Blog.getBlog(accountId) for updating comment status in SQLite.",
        "3": " Updated comment status in SQLite for successfully moderated comments.",
        "4": "Removing debug code",
        "5": "deleted unnecessary call to WordPress.getBlog() as per @nbradbury code review comment",
        "6": "Remove unnecessary code for updating comment status in SQLite.",
        "7": "Remove unused variable and suppression",
        "8": "Remove unused code"
    },
    {
        "diff": "diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java\nindex 90fb016fb8..5c1bce9c0d 100644\n--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java\n+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java\n@@ -902,6 +902,7 @@ public class JmsConfiguration implements Cloneable {\n \n         container.setAcceptMessagesWhileStopping(acceptMessagesWhileStopping);\n         container.setExposeListenerSession(exposeListenerSession);\n+        container.setSessionTransacted(transacted);\n         if (transacted) {\n             container.setSessionAcknowledgeMode(Session.SESSION_TRANSACTED);\n         } else {\ndiff --git a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java\nindex 32b02a424c..5f779b90bd 100644\n--- a/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java\n+++ b/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java\n@@ -211,7 +211,7 @@ public class JmsEndpointConfigurationTest extends CamelTestSupport {\n \n         endpoint = resolveMandatoryEndpoint(\"jms:queue:Foo?transacted=true\", JmsEndpoint.class);\n         container = endpoint.createConsumer(dummyProcessor).getListenerContainer();\n-        assertFalse(\"The JMS sessions will be transactional!\", container.isSessionTransacted());\n+        assertTrue(\"The JMS sessions will not be transactional!\", container.isSessionTransacted());\n         assertTrue(\"The transactionManager doesn't get lazily generated!\", endpoint.isLazyCreateTransactionManager());\n         assertNotNull(\"The endpoint has no injected TransactionManager!\", endpoint.getTransactionManager());\n     }\n",
        "1": "Set session transacted flag in JmsConfiguration and update test case",
        "2": "Fixed the unit test error of camel - osgi",
        "3": "Fixed unit test .",
        "4": " Changed the JmsConfiguration class to include a new transacted field, and added a test to verify its value in the JmsEndpointConfigurationTest class.",
        "5": "Fix NPE in JmsConfiguration - jms",
        "6": "add simple assertion for endpoint uri",
        "7": " Added support for setting JMS session transacted mode.",
        "8": "Reverted the unintended removal of the call to 'container.setSessionTransacted(transacted)'."
    },
    {
        "diff": "diff --git a/plugins/groovy/src/org/jetbrains/plugins/groovy/refactoring/introduce/parameter/GrIntroduceParameterHandler.java b/plugins/groovy/src/org/jetbrains/plugins/groovy/refactoring/introduce/parameter/GrIntroduceParameterHandler.java\nindex 2cdcd43..84dc111 100644\n--- a/plugins/groovy/src/org/jetbrains/plugins/groovy/refactoring/introduce/parameter/GrIntroduceParameterHandler.java\n+++ b/plugins/groovy/src/org/jetbrains/plugins/groovy/refactoring/introduce/parameter/GrIntroduceParameterHandler.java\n@@ -91,8 +91,8 @@ import static org.jetbrains.plugins.groovy.refactoring.HelpID.GROOVY_INTRODUCE_P\n public class GrIntroduceParameterHandler implements RefactoringActionHandler {\n   private static final Logger LOG = Logger.getInstance(GrIntroduceParameterHandler.class);\n \n-  @NonNls public static final String USE_SUPER_METHOD_OF = \"Use super method of\";\n-  @NonNls public static final String CHANGE_USAGES_OF = \"Change usages of\";\n+  @NonNls public static final String USE_SUPER_METHOD_OF = \"Change base method\";\n+  @NonNls public static final String CHANGE_USAGES_OF = \"Change usages\";\n   private JBPopup myEnclosingMethodsPopup;\n \n   public void invoke(final @NotNull Project project, final Editor editor, final PsiFile file, final @Nullable DataContext dataContext) {\n",
        "1": "remove unnecessary code",
        "2": "missed = in command line property definition",
        "3": "Change base method and usages",
        "4": "[ git ] update table",
        "5": " RefactoringActionHandler: Changed constant names from Use super method of and Change usages of to Change base method and Change usages respectively.",
        "6": "scope chooser has unclear options",
        "7": " Changed usage of 'Use super method of' and 'Change usages of' in GrIntroduceParameterHandler to 'Change base method' and 'Change usages' respectively.",
        "8": "Don ' t throw UOE from groovy"
    },
    {
        "diff": "diff --git a/plugins/groovy/src/org/jetbrains/plugins/groovy/structure/GroovyStructureViewModel.java b/plugins/groovy/src/org/jetbrains/plugins/groovy/structure/GroovyStructureViewModel.java\nindex 946e645..46f0d57 100644\n--- a/plugins/groovy/src/org/jetbrains/plugins/groovy/structure/GroovyStructureViewModel.java\n+++ b/plugins/groovy/src/org/jetbrains/plugins/groovy/structure/GroovyStructureViewModel.java\n@@ -3,7 +3,6 @@ package org.jetbrains.plugins.groovy.structure;\n import com.intellij.ide.structureView.StructureViewTreeElement;\n import com.intellij.ide.structureView.TextEditorBasedStructureViewModel;\n import com.intellij.ide.util.treeView.smartTree.Filter;\n-import com.intellij.ide.util.treeView.smartTree.Grouper;\n import com.intellij.ide.util.treeView.smartTree.Sorter;\n import com.intellij.psi.PsiDirectory;\n import com.intellij.psi.PsiElement;\n@@ -41,11 +40,6 @@ public class GroovyStructureViewModel extends TextEditorBasedStructureViewModel\n   }\n \n   @NotNull\n-  public Grouper[] getGroupers() {\n-    return Grouper.EMPTY_ARRAY;\n-  }\n-\n-  @NotNull\n   public Sorter[] getSorters() {\n     return new Sorter[]{Sorter.ALPHA_SORTER};\n   }\n",
        "1": " Removed unused import statements and implemented getGroupers and getSorters methods.",
        "2": "remove unused method",
        "3": "simplified TextEditorBasedStructureViewModel API",
        "4": "removed unused method",
        "5": " Fixed issue with grouper implementation.",
        "6": "Remove unused Grouper class in GroovyStructureViewModel",
        "7": "Remove AggregationContext . cacheRecycler ( )",
        "8": "let the user type range expressions in groovy without autopopup interference"
    },
    {
        "diff": "diff --git a/example/src/main/java/com/h6ah4i/android/example/advrecyclerview/common/utils/AdapterUtils.java b/example/src/main/java/com/h6ah4i/android/example/advrecyclerview/common/utils/AdapterUtils.java\nindex af0813d..de54067 100644\n--- a/example/src/main/java/com/h6ah4i/android/example/advrecyclerview/common/utils/AdapterUtils.java\n+++ b/example/src/main/java/com/h6ah4i/android/example/advrecyclerview/common/utils/AdapterUtils.java\n@@ -26,7 +26,7 @@ public class AdapterUtils {\n         if (parent instanceof RecyclerView) {\n             // returns the passed instance if the parent is RecyclerView\n             return v;\n-        } else if (v instanceof View) {\n+        } else if (parent instanceof View) {\n             // check the parent view recursively\n             return findParentViewHolderItemView((View) parent);\n         } else {\n",
        "1": "Fix bug in AdapterUtils",
        "2": "Fixing a bug in AdapterUtils.java",
        "3": "Fix bug in Utf8Utils",
        "4": "Fixed issue where first setting of same values",
        "5": "improve sql wall",
        "6": " Fixed bug where AdapterUtils.findParentViewHolderItemView() would return null for non-RecyclerView parents.",
        "7": " Fixed AdapterUtils to correctly find parent ViewHolder item view",
        "8": "Fix a lint warned bug"
    },
    {
        "diff": "diff --git a/core/src/processing/opengl/PGL.java b/core/src/processing/opengl/PGL.java\nindex 4a9cca2..3423c64 100644\n--- a/core/src/processing/opengl/PGL.java\n+++ b/core/src/processing/opengl/PGL.java\n@@ -1301,6 +1301,7 @@ public abstract class PGL {\n     if (stencilBuffer == null) {\n       stencilBuffer = ByteBuffer.allocate(1);\n     }\n+    stencilBuffer.rewind();\n     readPixels(scrX, pg.height - scrY - 1, 1, 1, STENCIL_INDEX,\n                UNSIGNED_BYTE, stencilBuffer);\n     return stencilBuffer.get(0);\n",
        "1": " Add stencil buffer rewind before reading pixels.",
        "2": "add missing stencil buffer rewind",
        "3": " Added rewind() method to stencilBuffer in PGL class",
        "4": "Fixing last commit in predefined shape",
        "5": "Fix bug in PGL",
        "6": "Rewind stencil buffer before reading pixels.",
        "7": "keep deprecated requestFBOLayer ( ) method for now .",
        "8": "added DisplayImageOptions . transformationMatrix ( ) usage"
    },
    {
        "diff": "diff --git a/java/java-impl/src/com/intellij/refactoring/copy/CopyClassesHandler.java b/java/java-impl/src/com/intellij/refactoring/copy/CopyClassesHandler.java\nindex e163c4e..b9d8c0b 100644\n--- a/java/java-impl/src/com/intellij/refactoring/copy/CopyClassesHandler.java\n+++ b/java/java-impl/src/com/intellij/refactoring/copy/CopyClassesHandler.java\n@@ -537,7 +537,7 @@ public class CopyClassesHandler extends CopyHandlerDelegateBase {\n       PsiClass[] classes = ((PsiClassOwner)element).getClasses();\n       ArrayList<PsiClass> buffer = new ArrayList<PsiClass>();\n       for (final PsiClass aClass : classes) {\n-        if (!isSynthetic(aClass)) {\n+        if (!(aClass instanceof SyntheticElement)) {\n           buffer.add(aClass);\n         }\n       }\n",
        "1": "don ' t take icons from synthetic classes",
        "2": "Restore type checking methods",
        "3": " Changed handling of synthetic classes to use `SyntheticElement` instead of `isSynthetic()` method.",
        "4": "shorten class name",
        "5": "accept top level non-physical classes",
        "6": "do not show copy in copy",
        "7": " Refactoring: Modified CopyClassesHandler to correctly handle synthetic classes.",
        "8": "Refactor CopyClassesHandler to exclude SyntheticElement classes."
    },
    {
        "diff": "diff --git a/platform/platform-impl/src/com/intellij/ide/plugins/InstalledPluginsManagerMain.java b/platform/platform-impl/src/com/intellij/ide/plugins/InstalledPluginsManagerMain.java\nindex 3db4fa9..f215b2f 100644\n--- a/platform/platform-impl/src/com/intellij/ide/plugins/InstalledPluginsManagerMain.java\n+++ b/platform/platform-impl/src/com/intellij/ide/plugins/InstalledPluginsManagerMain.java\n@@ -151,7 +151,7 @@ public class InstalledPluginsManagerMain extends PluginManagerMain {\n           }\n \n           IdeaPluginDescriptor installedPlugin = PluginManager.getPlugin(pluginDescriptor.getPluginId());\n-          if (installedPlugin != null) {\n+          if (installedPlugin != null && !installedPlugin.isBundled()) {\n             File oldFile = installedPlugin.getPath();\n             if (oldFile != null) {\n               StartupActionScriptManager.addActionCommand(new StartupActionScriptManager.DeleteCommand(oldFile));\n",
        "1": " Fix for IDEA-21418: Add check for bundled plugins to avoid deleting system plugins.",
        "2": "don't delete bundled plugins when installing an updated plugin with the same ID from the plugin repo",
        "3": " Changed how bundled plugins are handled in InstalledPluginsManagerMain.",
        "4": "allow products to have empty codename",
        "5": "[ r = Dmitry . Avdeev ] catch UnsupportedClassVersionError , rethrow as PluginException",
        "6": "do not show empty null if it is not available",
        "7": "Fix bug with deleting bundled plugins",
        "8": "don ' t hide autoselection"
    },
    {
        "diff": "diff --git a/idea/src/org/jetbrains/jet/lang/resolve/BindingTraceContext.java b/idea/src/org/jetbrains/jet/lang/resolve/BindingTraceContext.java\nindex 7bd3fd8..8c025ba 100644\n--- a/idea/src/org/jetbrains/jet/lang/resolve/BindingTraceContext.java\n+++ b/idea/src/org/jetbrains/jet/lang/resolve/BindingTraceContext.java\n@@ -114,6 +114,6 @@ public class BindingTraceContext extends BindingTrace implements BindingContext\n \n     @Override\n     public PsiElement getDeclarationPsiElement(DeclarationDescriptor descriptor) {\n-        return descriptorToDeclarations.get(descriptor);\n+        return descriptorToDeclarations.get(descriptor.getOriginal());\n     }\n }\n",
        "1": "Fix bug in getDeclarationPsiElement ( )",
        "2": " Added support for tracing bindings in Jet 1.0",
        "3": "Fix for declaration resolve",
        "4": "statementMayCompleteNormally . g . get does not create type parameters .",
        "5": " fixed issue with getting original declaration for descriptor in BindingTraceContext",
        "6": "Fix bug in BindingTraceContext.getDeclarationPsiElement() method",
        "7": "Fixed Javadoc for Kotlin API",
        "8": "Implemented getDiagnostics ( ) in BindingContext returned by DelegatingBindingTrace ."
    },
    {
        "diff": "diff --git a/src/com/fsck/k9/Preferences.java b/src/com/fsck/k9/Preferences.java\nindex 1555472..3fd7640 100644\n--- a/src/com/fsck/k9/Preferences.java\n+++ b/src/com/fsck/k9/Preferences.java\n@@ -11,6 +11,8 @@ import java.util.Map;\n import android.content.Context;\n import android.content.SharedPreferences;\n import android.util.Log;\n+\n+import com.fsck.k9.mail.MessagingException;\n import com.fsck.k9.preferences.Editor;\n import com.fsck.k9.preferences.Storage;\n \n",
        "1": "Add missing import",
        "2": "required exception class",
        "3": "Added missing import of ISpecialInventory",
        "4": " Added import statement for com.fsck.k9.mail.MessagingException.",
        "5": "Remove unused imports",
        "6": "Fix test execution for missing imports",
        "7": "Add import statement for MessagingException in Preferences.java",
        "8": " Added import for MessagingException class"
    },
    {
        "diff": "diff --git a/src/main/java/org/zeromq/ZMQ.java b/src/main/java/org/zeromq/ZMQ.java\nindex f6d4cba..2384c62 100644\n--- a/src/main/java/org/zeromq/ZMQ.java\n+++ b/src/main/java/org/zeromq/ZMQ.java\n@@ -1248,18 +1248,6 @@ public class ZMQ\n         }\n \n         /**\n-         * Disconnect to remote application.\n-         *\n-         * @param addr\n-         *            the endpoint to disconnect to.\n-         * @return true if successful.\n-         */\n-        public final boolean disconnect(String addr)\n-        {\n-            return base.termEndpoint(addr);\n-        }\n-\n-        /**\n          * Stop accepting connections on a socket.\n          *\n          * @param addr\n",
        "1": "Revert \"Add disconnect method\"",
        "2": "Remove the disconnect() method from ZMQ class.",
        "3": "Add disconnect method",
        "4": "Removed deprecated Operation . getAll ( ) .",
        "5": "Remove unused disconnect",
        "6": "Remove useless method",
        "7": " Disable disconnect(addr) method and replace with a no-op.",
        "8": " Fixed disconnect method signature to match base class"
    },
    {
        "diff": "diff --git a/servers/src/test/java/tachyon/master/lineage/recompute/TestRecomputeExecutor.java b/servers/src/test/java/tachyon/master/lineage/recompute/TestRecomputeExecutor.java\nindex d185bea..13c8b4f 100644\n--- a/servers/src/test/java/tachyon/master/lineage/recompute/TestRecomputeExecutor.java\n+++ b/servers/src/test/java/tachyon/master/lineage/recompute/TestRecomputeExecutor.java\n@@ -36,6 +36,12 @@ import tachyon.master.lineage.meta.LineageFileState;\n @RunWith(PowerMockRunner.class)\n @PrepareForTest(FileSystemMaster.class)\n public final class TestRecomputeExecutor {\n+\n+  /**\n+   * Tests recompute executor creates a recompute plan and launches the recompute job at heartbeat.\n+   *\n+   * @throws Exception if anything wrong happens\n+   */\n   @Test\n   public void recomputeLauncherTest() throws Exception {\n     long fileId = 5L;\n",
        "1": "Add some comments in the code",
        "2": " Added test to verify recompute executor creates a recompute plan and launches the recompute job at heartbeat (#13c8b4f)",
        "3": "Added javadoc to test case",
        "4": "Add missing comment",
        "5": "Add missing close ( ) to test",
        "6": "Add test for recompute executor in TestRecomputeExecutor.java",
        "7": "Add comment on the cluster",
        "8": " Added test for recompute executor creating a recompute plan and launching the recompute job at heartbeat."
    },
    {
        "diff": "diff --git a/h2o-algos/src/main/java/hex/glm/GLMTask.java b/h2o-algos/src/main/java/hex/glm/GLMTask.java\nindex d7a80517f..88e4028c5 100644\n--- a/h2o-algos/src/main/java/hex/glm/GLMTask.java\n+++ b/h2o-algos/src/main/java/hex/glm/GLMTask.java\n@@ -358,7 +358,7 @@ public abstract class GLMTask  {\n \n     @Override\n     public void reduce(GLMMultinomialGradientTask gmgt){\n-      ArrayUtils.add(_beta,gmgt._beta);\n+      ArrayUtils.add(_gradient,gmgt._gradient);\n       _nobs += gmgt._nobs;\n       _wsum += gmgt._wsum;\n       _likelihood += gmgt._likelihood;\n",
        "1": "Change variable name in GLMTask.java reduce method",
        "2": " Added gradient accumulation for GLMMultinomialGradientTask",
        "3": "fix glm sparse , multinomial gradient was not using sparse .",
        "4": "Fixed a bug in the Region3i .",
        "5": "Fixed multinomial gradient task - reduce was adding beta instead of gradient.",
        "6": "Add a fix for \" null \" keys",
        "7": " Fixed typo in GLMTask.java: changed _beta to _gradient in reduce method.",
        "8": "Fix a bug where the glm was not be null ."
    },
    {
        "diff": "diff --git a/library/src/main/java/com/mikepenz/materialdrawer/Drawer.java b/library/src/main/java/com/mikepenz/materialdrawer/Drawer.java\nindex ffc4492..b98c65b 100644\n--- a/library/src/main/java/com/mikepenz/materialdrawer/Drawer.java\n+++ b/library/src/main/java/com/mikepenz/materialdrawer/Drawer.java\n@@ -355,9 +355,10 @@ public class Drawer {\n         // create the ActionBarDrawerToggle if not set and enabled\n         if (mActionBarDrawerToggleEnabled && mActionBarDrawerToggle == null) {\n             if (mToolbar == null) {\n-                throw new RuntimeException(\"you have to pass a toolbar for the ActionBarDrawerToggle auto generation\");\n+                this.mActionBarDrawerToggle = new ActionBarDrawerToggle(mActivity, mDrawerLayout, R.string.drawer_open, R.string.drawer_close);\n+            } else {\n+                this.mActionBarDrawerToggle = new ActionBarDrawerToggle(mActivity, mDrawerLayout, mToolbar, R.string.drawer_open, R.string.drawer_close);\n             }\n-            this.mActionBarDrawerToggle = new ActionBarDrawerToggle(mActivity, mDrawerLayout, mToolbar, R.string.drawer_open, R.string.drawer_close);\n             this.mActionBarDrawerToggle.syncState();\n         }\n \n",
        "1": " Fixed issue with null pointer exception when creating ActionBarDrawerToggle.",
        "2": "don ' t show ActionBarDrawerToggle if ActionBarDrawerToggle is not exist",
        "3": "Add support for automatically generating ActionBarDrawerToggle",
        "4": "allow setting the drawerToggle without toolbar",
        "5": " Fixed exception when creating ActionBarDrawerToggle if toolbar is null",
        "6": "add synonym method if you want to display the drawer below the toolbar",
        "7": "Fix exception message after changing order to fast - with - cached column .",
        "8": "Reduce size change"
    },
    {
        "diff": "diff --git a/metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java b/metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java\nindex 0d5d80f..9401f1c 100644\n--- a/metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java\n+++ b/metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java\n@@ -320,7 +320,7 @@ public class GangliaReporter extends AbstractPollingReporter implements MetricPr\n                 .addInt(133)// we are sending a string value\n                 .addString(hostName)// hostLabel\n                 .addString(metricName)// metric name\n-                .addInt(0)// spoof = True\n+                .addInt(hostName.equals(getHostLabel()) ? 0 : 1)// spoof = True/1\n                 .addString(\"%s\")// format field\n                 .addString(metricValue) // metric value\n                 .send();\n",
        "1": "Fix CV model building .",
        "2": "Fix spoof value in GangliaReporter",
        "3": "Fixed possible NPE .",
        "4": " Fixed GangliaReporter to send correct spoof value based on host name.",
        "5": "Fix GangliaReporter field in GangliaReporter .",
        "6": "Remove Metrics # enableJMXReporting ( ) .",
        "7": " Fixed spoofing behavior in GangliaReporter to correctly identify the host label.",
        "8": "add spoof bit on second packet (missed in previous commit)"
    },
    {
        "diff": "diff --git a/java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java b/java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java\nindex 5e35a67..b30b8f9 100644\n--- a/java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java\n+++ b/java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java\n@@ -2852,6 +2852,8 @@ public class PGraphicsOpenGL extends PGraphics {\n   // protected void rawTriangles(int start, int stop) // PGraphics3D\n \n   /**\n+   * TODO: replace with better algorithm, using the glu tesellator code from\n+   * PGraphicsOpenGL\n    * Triangulate the current polygon. <BR>\n    * <BR>\n    * Simple ear clipping polygon triangulation adapted from code by John W.\n",
        "1": "Removed PMetadata from opengl",
        "2": "add a comment",
        "3": "Added some comments",
        "4": " Replace polygon triangulation algorithm with a better one using glu tesellator code from PGraphicsOpenGL.",
        "5": "Replace polygon triangulation algorithm in PGraphicsOpenGL.",
        "6": " Added improved polygon triangulation algorithm",
        "7": "Added TODO in QuadTree",
        "8": "Added a todo comment"
    },
    {
        "diff": "diff --git a/RegExpSupport/src/org/intellij/lang/regexp/RegExpRangeProvider.java b/RegExpSupport/src/org/intellij/lang/regexp/RegExpRangeProvider.java\nindex aa820b4..9407752 100644\n--- a/RegExpSupport/src/org/intellij/lang/regexp/RegExpRangeProvider.java\n+++ b/RegExpSupport/src/org/intellij/lang/regexp/RegExpRangeProvider.java\n@@ -16,6 +16,7 @@\n package org.intellij.lang.regexp;\n \n import com.intellij.openapi.extensions.ExtensionPointName;\n+import com.intellij.openapi.util.Pair;\n import com.intellij.openapi.util.TextRange;\n import com.intellij.psi.PsiElement;\n \n@@ -25,5 +26,5 @@ import com.intellij.psi.PsiElement;\n public interface RegExpRangeProvider {\n   ExtensionPointName<RegExpRangeProvider> EP_NAME = new ExtensionPointName<RegExpRangeProvider>(\"com.intellij.regExpRangeProvider\");\n \n-  TextRange getTextRange(PsiElement element);\n+  Pair<PsiElement, TextRange> getRangePair(PsiElement element);\n }\n",
        "1": "Check regexp intention action language detection fix",
        "2": "Refactor getTextRange method in RegExpRangeProvider to return a Pair of PsiElement and TextRange.",
        "3": "shorten sources",
        "4": " Added method getRangePair(PsiElement element) to RegExpRangeProvider interface.",
        "5": "fixed regexp of RegExpRangeProvider",
        "6": "don ' t log PCE",
        "7": "[ vcs ] Display the class in order to improve performance information .",
        "8": " Added support for providing ranges for multiple elements in RegExpRangeProvider."
    },
    {
        "diff": "diff --git a/java/org/apache/tomcat/util/buf/Utf8Decoder.java b/java/org/apache/tomcat/util/buf/Utf8Decoder.java\nindex 66708cc9c..44bdd2593 100644\n--- a/java/org/apache/tomcat/util/buf/Utf8Decoder.java\n+++ b/java/org/apache/tomcat/util/buf/Utf8Decoder.java\n@@ -188,11 +188,11 @@ public class Utf8Decoder extends CharsetDecoder {\n                         }\n                     }\n                     if (jchar == 0x70 && inIndexLimit > inIndex + 1) {\n-                        if ((bArr[inIndex + 1] & 0x7F) < 0x10) {\n+                        if ((bArr[inIndex + 1] & 0x70) == 0) {\n                             // 11110000 1000zzzz 1oyyyyyy 1oxxxxxx\n                             // should have been\n                             // 111ozzzz 1oyyyyyy 1oxxxxxx\n-                            return CoderResult.malformedForLength(4);\n+                            return CoderResult.malformedForLength(1);\n                         }\n                     }\n                     break;\ndiff --git a/test/org/apache/tomcat/util/buf/TestUtf8Extended.java b/test/org/apache/tomcat/util/buf/TestUtf8Extended.java\nindex 2c8c2aff7..468215fa5 100644\n--- a/test/org/apache/tomcat/util/buf/TestUtf8Extended.java\n+++ b/test/org/apache/tomcat/util/buf/TestUtf8Extended.java\n@@ -83,6 +83,12 @@ public class TestUtf8Extended {\n                 new int[] {0xE0, 0x80, 0xC1},\n                 1,\n                 \"\\uFFFD\\uFFFD\\uFFFD\").setSkipErrorForJvm(true));\n+        // JVM decoder does not report error until all 4 bytes are available\n+        testCases.add(new Utf8TestCase(\n+                \"Valid sequence padded from one byte to four\",\n+                new int[] {0xF0, 0x80, 0x80, 0xC1},\n+                1,\n+                \"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\").setSkipErrorForJvm(true));\n     }\n \n     @Test\n",
        "1": "Remove comments used to debug",
        "2": " Fix bug in Utf8Decoder: incorrect error handling for incomplete sequences.",
        "3": "Fix UTF-8 decoding issue in Utf8Decoder",
        "4": "Fix NPE in TestUtf8Extended",
        "5": "When the hook is side off tests",
        "6": "Add final zero padding test",
        "7": " Fixed issue with JVM decoder not reporting errors for padded sequences",
        "8": "Require a property parameter for creation if - else method ."
    },
    {
        "diff": "diff --git a/src/test/java/org/elasticsearch/action/IndicesRequestTests.java b/src/test/java/org/elasticsearch/action/IndicesRequestTests.java\nindex e5e0c8b..3120e39 100644\n--- a/src/test/java/org/elasticsearch/action/IndicesRequestTests.java\n+++ b/src/test/java/org/elasticsearch/action/IndicesRequestTests.java\n@@ -861,7 +861,7 @@ public class IndicesRequestTests extends ElasticsearchIntegrationTest {\n     private static void assertAllRequestsHaveBeenConsumed() {\n         Iterable<TransportService> transportServices = internalCluster().getInstances(TransportService.class);\n         for (TransportService transportService : transportServices) {\n-            assertThat(((InterceptingTransportService)transportService).requests.isEmpty(), equalTo(true));\n+            assertThat(((InterceptingTransportService)transportService).requests.entrySet(), emptyIterable());\n         }\n     }\n \n",
        "1": "[TEST] use more verbose assertion in IndicesRequestTests",
        "2": "[ TEST ] Use greaterThanOrEqualTo for testClusterInfoServiceCollectsInformation",
        "3": "[ TEST ] only allow long windows for underline .",
        "4": "Move field to local variable",
        "5": "Refactor assertAllRequestsHaveBeenConsumed method in IndicesRequestTests",
        "6": "Fix test for test",
        "7": " Fixed assertion in IndicesRequestTests to use emptyIterable instead of isEmpty",
        "8": " Changed how we check for empty requests in `IndicesRequestTests`."
    },
    {
        "diff": "diff --git a/src/net/java/sip/communicator/impl/gui/main/chat/ChatConversationPanel.java b/src/net/java/sip/communicator/impl/gui/main/chat/ChatConversationPanel.java\nindex b6a93bec2..3cfe07a5b 100755\n--- a/src/net/java/sip/communicator/impl/gui/main/chat/ChatConversationPanel.java\n+++ b/src/net/java/sip/communicator/impl/gui/main/chat/ChatConversationPanel.java\n@@ -1109,17 +1109,6 @@ public class ChatConversationPanel\n         extends JEditorPane\n     {\n         /**\n-         * Create tooltip.\n-         */\n-        public JToolTip createToolTip()\n-        {\n-            JToolTip tip = new JToolTip();\n-            tip.setComponent(this);\n-\n-            return tip;\n-        }\n-\n-        /**\n          * Returns the string to be used as the tooltip for <i>event</i>. \n          *\n          * @return the string to be used as the tooltip for <i>event</i>.\n@@ -1129,7 +1118,7 @@ public class ChatConversationPanel\n             if(currentHref != null && currentHref.length() != 0)\n                 return currentHref;\n             else\n-                return \"\";\n+                return null;\n         }\n     }\n }\n",
        "1": " Removed unnecessary method createToolTip() and updated getToolTipText() to return null instead of an empty string.",
        "2": "Remove unused method and update return value in ChatConversationPanel.",
        "3": "Remove unused method",
        "4": "Removes call to getAssociatedNode in newtypes",
        "5": "Remove unused createToolTip",
        "6": "Remove empty tooltip that shows in conversation panel.",
        "7": " Fixed bug causing tooltip to display incorrectly in some situations.",
        "8": "save status information for accounts that don ' t support presence"
    },
    {
        "diff": "diff --git a/ratpack-config/src/main/java/ratpack/config/ConfigurationSource.java b/ratpack-config/src/main/java/ratpack/config/ConfigurationSource.java\nindex 6398357c4..6297e1490 100644\n--- a/ratpack-config/src/main/java/ratpack/config/ConfigurationSource.java\n+++ b/ratpack-config/src/main/java/ratpack/config/ConfigurationSource.java\n@@ -19,7 +19,18 @@ package ratpack.config;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n+/**\n+ * Allows providing custom sources of configuration data.\n+ *\n+ * @see ConfigurationDataSpec#add(ConfigurationSource)\n+ */\n public interface ConfigurationSource {\n-  // TODO... does this signature make sense?  It exposes a jackson types\n+  /**\n+   * Loads the configuration data from this data source.\n+   *\n+   * @param objectMapper the Jackson ObjectMapper to use to build objects.\n+   * @return the root node of the configuration data loaded\n+   * @throws Exception any\n+   */\n   ObjectNode loadConfigurationData(ObjectMapper objectMapper) throws Exception;\n }\n",
        "1": " Added support for custom configuration sources using the `add()` method.",
        "2": "Add javadoc for ConfigurationSource ConfigurationSource ConfigurationSource data .",
        "3": "Refactor ConfigurationSource interface to include documentation and improve signature.",
        "4": "Improve some Javadoc",
        "5": " Adds a custom configuration data source interface with a method to load configuration data using a Jackson ObjectMapper.",
        "6": "Added comment to new methods .",
        "7": "Add javadoc to ConfigurationSource.",
        "8": "add put method for value type BigInteger"
    },
    {
        "diff": "diff --git a/core/java/com/android/internal/view/menu/ActionMenuPresenter.java b/core/java/com/android/internal/view/menu/ActionMenuPresenter.java\nindex 2811332..4bb6d06 100644\n--- a/core/java/com/android/internal/view/menu/ActionMenuPresenter.java\n+++ b/core/java/com/android/internal/view/menu/ActionMenuPresenter.java\n@@ -476,6 +476,9 @@ public class ActionMenuPresenter extends BaseMenuPresenter\n                 if (isAction) maxActions--;\n \n                 item.setIsActionButton(isAction);\n+            } else {\n+                // Neither requires nor requests an action button.\n+                item.setIsActionButton(false);\n             }\n         }\n         return true;\n",
        "1": "Fix collapsible action views .",
        "2": "Cannot force a shown item from an ActionMode into the overflow menu.",
        "3": "Fix issue with action button in ActionMenuPresenter",
        "4": "Fix crash in ActionMenuPresenter .",
        "5": "Disable \" Reopen With Encoding \" notifications for non - physical graphics",
        "6": " Changed implementation of `ActionMenuPresenter.java` to support different action button behaviors.",
        "7": " Fixes issue with action button not being hidden when neither required nor requested.",
        "8": "Force the wallpaper if we are calling as the value for the screen animation when detached from system ."
    },
    {
        "diff": "diff --git a/platform/lang-impl/src/com/intellij/execution/ui/layout/impl/JBRunnerTabs.java b/platform/lang-impl/src/com/intellij/execution/ui/layout/impl/JBRunnerTabs.java\nindex d32d0d9..0873fe9 100644\n--- a/platform/lang-impl/src/com/intellij/execution/ui/layout/impl/JBRunnerTabs.java\n+++ b/platform/lang-impl/src/com/intellij/execution/ui/layout/impl/JBRunnerTabs.java\n@@ -225,8 +225,10 @@ public class\n     if (c instanceof GridImpl) {\n       bounds.x -= 1;\n       bounds.width += 1;\n-      bounds.y -= 1;\n-      bounds.height += 1;\n+      if (!isHideTabs()) {\n+        bounds.y -= 1;\n+        bounds.height += 1;\n+      }\n     }\n     return super.layout(c, bounds);\n   }\n",
        "1": " Updated JBRunnerTabs to account for hidden tabs in layout calculations.",
        "2": "handle possible NPE on second line",
        "3": "corrected layout offset for hidden tabs",
        "4": "Fix layout issue in JBRunnerTabs when tabs are not hidden.",
        "5": "don ' t persist ast when sorting by proximity",
        "6": "do not show empty - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
        "7": "customize default tab size",
        "8": " Fixed layout for JBRunnerTabs to correctly display tabs when hideTabs is enabled"
    },
    {
        "diff": "diff --git a/core/src/main/java/com/google/bitcoin/core/Peer.java b/core/src/main/java/com/google/bitcoin/core/Peer.java\nindex 627bdc72..8962682b 100644\n--- a/core/src/main/java/com/google/bitcoin/core/Peer.java\n+++ b/core/src/main/java/com/google/bitcoin/core/Peer.java\n@@ -212,7 +212,7 @@ public class Peer {\n         public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {\n             String s;\n             PeerAddress addr = address.get();\n-            s = address == null ? \"?\" : address.toString();\n+            s = addr == null ? \"?\" : addr.toString();\n             if (e.getCause() instanceof ConnectException || e.getCause() instanceof IOException) {\n                 // Short message for network errors\n                 log.info(s + \" - \" + e.getCause().getMessage());\n",
        "1": " Fix Peer.java to use `addr.toString()` instead of `address.toString()` for consistency.",
        "2": "Restore error message that got accidentally taken out .",
        "3": "Fix NPE in Peer . toString ( )",
        "4": "Fix a bug in Peer error logging, found by FindBugs.",
        "5": " Added nullable peer address check for network errors",
        "6": "Improve toString ( ) test",
        "7": "Fix NullPointerException in Peer class",
        "8": "Do not use a message that just to be lost ."
    },
    {
        "diff": "diff --git a/src/main/java/water/persist/HdfsLoader.java b/src/main/java/water/persist/HdfsLoader.java\nindex 26a23d808..02b1f217f 100644\n--- a/src/main/java/water/persist/HdfsLoader.java\n+++ b/src/main/java/water/persist/HdfsLoader.java\n@@ -30,14 +30,11 @@ public class HdfsLoader {\n     }\n     try {\n       if( Boot._init.fromJar() ) {\n-        System.out.println(\"kevin: Boot._init.fromJar()\");\n         File f = new File(version);\n         if( f.exists() ) {\n           Boot._init.addExternalJars(f);\n-          System.out.println(\"kevin: Boot._init.addExternalJars(f)\");\n         } else {\n           Boot._init.addInternalJars(\"hadoop/\" + version + \"/\");\n-          System.out.println(\"kevin: Boot._init.addInternalJars(hadoop/\" + version + \"/\");\n         }\n       }\n     } catch( Exception e ) {\n",
        "1": " Fix logging statements in HdfsLoader to remove unnecessary prints.",
        "2": "Remove debug comments",
        "3": " Fixed bug in HdfsLoader class to properly handle missing external jar file",
        "4": "Remove the system . out logging",
        "5": "Remove debug print statements and unnecessary code in HdfsLoader.java",
        "6": "Removed debug code",
        "7": "Remove system out println",
        "8": "Remove debug logging"
    },
    {
        "diff": "diff --git a/src/main/java/com/google/devtools/build/lib/analysis/Runfiles.java b/src/main/java/com/google/devtools/build/lib/analysis/Runfiles.java\nindex 0aa3f48..bdef891 100644\n--- a/src/main/java/com/google/devtools/build/lib/analysis/Runfiles.java\n+++ b/src/main/java/com/google/devtools/build/lib/analysis/Runfiles.java\n@@ -543,7 +543,7 @@ public final class Runfiles {\n \n \n     /**\n-     * Use {@link #addTransitiveArtifacts} instead, to prevent increased memory use.\n+     * @deprecated Use {@link #addTransitiveArtifacts} instead, to prevent increased memory use.\n      */\n     @Deprecated\n     public Builder addArtifacts(NestedSet<Artifact> artifacts) {\n@@ -553,6 +553,7 @@ public final class Runfiles {\n       addArtifacts(it);\n       return this;\n     }\n+\n     /**\n      * Adds a nested set to the internal collection.\n      */\n",
        "1": "Fix javadoc for Adapter . getViewTypeCount ( )",
        "2": "Fix javadoc for Runfiles . addArtifacts .",
        "3": " Added deprecated method 'addArtifacts' in favor of 'addTransitiveArtifacts' to prevent increased memory use.",
        "4": "Deprecate addArtifacts method in Runfiles class",
        "5": "Add a @deprecated annotation to Runfiles#addArtifacts.",
        "6": "Add a missing javadoc .",
        "7": "Discourage passing NestedSets to SpawnAction . Builder # addInputs",
        "8": " Deprecate addArtifacts method and add a new method addTransitiveArtifacts to prevent increased memory use."
    },
    {
        "diff": "diff --git a/platform/projectModel-impl/src/com/intellij/core/CoreModuleManager.java b/platform/projectModel-impl/src/com/intellij/core/CoreModuleManager.java\nindex 6ebf80c..5975119 100644\n--- a/platform/projectModel-impl/src/com/intellij/core/CoreModuleManager.java\n+++ b/platform/projectModel-impl/src/com/intellij/core/CoreModuleManager.java\n@@ -74,4 +74,8 @@ public class CoreModuleManager extends ModuleManagerImpl {\n   public void loadModules() {\n     loadModules(myModuleModel);\n   }\n+\n+  protected Disposable getLifetime() {\n+    return myParentDisposable;\n+  }\n }\n",
        "1": "shouldn ' t reset version string in update ( )",
        "2": "Add getLifetime() method to CoreModuleManager class.",
        "3": "Made lifetime available to inheritors of CoreModuleManager",
        "4": " Added getLifetime() method to CoreModuleManager for better module management",
        "5": "add getRegion to PolygonSprite",
        "6": "add accessor ( ) method to DeploymentDescriptorMetaData",
        "7": "add getLifetime method",
        "8": " Add method getLifetime() to return the lifetime of the parent disposable."
    },
    {
        "diff": "diff --git a/jme3-core/src/main/java/com/jme3/asset/ImplHandler.java b/jme3-core/src/main/java/com/jme3/asset/ImplHandler.java\nindex 571be53c3..3601bc463 100644\n--- a/jme3-core/src/main/java/com/jme3/asset/ImplHandler.java\n+++ b/jme3-core/src/main/java/com/jme3/asset/ImplHandler.java\n@@ -195,8 +195,8 @@ public class ImplHandler {\n         // No need to synchronize() against map, its concurrent\n         ImplThreadLocal local = extensionToLoaderMap.get(key.getExtension());\n         if (local == null){\n-            throw new IllegalStateException(\"No loader registered for type \\\"\" +\n-                                        key.getExtension() + \"\\\"\");\n+            throw new AssetLoadException(\"No loader registered for type \\\"\" +\n+                                         key.getExtension() + \"\\\"\");\n \n         }\n         return (AssetLoader) local.get();\n",
        "1": " Fix IllegalStateException to AssetLoadException in ImplHandler.",
        "2": "Fix exception message",
        "3": "Change exception message in ImplHandler to AssetLoadException.",
        "4": " Fixed exception message for improved error handling",
        "5": "Fixed bad typo in setting file name .",
        "6": "synchronized access in clearCache ( )",
        "7": "Fix exception message",
        "8": "use right exception class if no loaders registered"
    },
    {
        "diff": "diff --git a/subprojects/gradle-plugins/src/main/groovy/org/gradle/api/tasks/testing/Test.java b/subprojects/gradle-plugins/src/main/groovy/org/gradle/api/tasks/testing/Test.java\nindex 22433c5..6396253 100644\n--- a/subprojects/gradle-plugins/src/main/groovy/org/gradle/api/tasks/testing/Test.java\n+++ b/subprojects/gradle-plugins/src/main/groovy/org/gradle/api/tasks/testing/Test.java\n@@ -368,6 +368,7 @@ public class Test extends ConventionTask implements JavaForkOptions, PatternFilt\n         }\n         failIfNoTestIsExecuted(singleTest);\n         setIncludes(WrapUtil.toSet(String.format(\"**/%s*.class\", singleTest)));\n+        getLogger().info(\"Running single tests with pattern: {}\", getIncludes());\n     }\n \n     private String getSingleTestProperty() {\n",
        "1": "Added logging statement for single test execution.",
        "2": "Add log message for singleton during sample app upgrade message .",
        "3": "Add logging for running single tests with pattern.",
        "4": "Added a check message for the tests that was not be single tests",
        "5": " Fixed bug in Test.java by adding a new line character (\\n) at the end of the getSingleTestProperty() method.",
        "6": "Fixed minor formatting issues .",
        "7": "Don ' t treat environment variables as input to Test tasks .",
        "8": " Added logging statement to print includes pattern for single tests"
    },
    {
        "diff": "diff --git a/astrid/src/com/todoroo/astrid/ui/CalendarView.java b/astrid/src/com/todoroo/astrid/ui/CalendarView.java\nindex ce89a2591..190e0f0c5 100644\n--- a/astrid/src/com/todoroo/astrid/ui/CalendarView.java\n+++ b/astrid/src/com/todoroo/astrid/ui/CalendarView.java\n@@ -315,7 +315,7 @@ public class CalendarView extends View {\n         // Day heading -- End\n \n         // Calendar -- Start\n-        calendar.setTime(getCoercedDate(calendar.getTime(), calendarDate));\n+        calendar.setTime(getCoercedDate(new Date(), calendarDate)); // Reset the calendar to either today or the specified date\n \n         if (currentHighlightDay == -1) {\n         \tcurrentHighlightDay = calendarDate.getTime() == 0 ? 0 : calendar.get(Calendar.DATE);\n",
        "1": "Reset calendar to either today or the specified date in CalendarView.java",
        "2": "Fixed bug for tasker exports",
        "3": "Fixed a bug where calendar would sometimes draw incorrectly",
        "4": "Fix a bug where the calendar date is not be used",
        "5": "Removed unnecessary type cast",
        "6": "Fix issue with setting the date of a new Calendar",
        "7": " Reset the calendar to either today or the specified date.",
        "8": " Fixed bug where calendar was not correctly resetting to today's date when using a specific date."
    },
    {
        "diff": "diff --git a/platform/lang-impl/src/com/intellij/refactoring/changeSignature/ParameterTableModelBase.java b/platform/lang-impl/src/com/intellij/refactoring/changeSignature/ParameterTableModelBase.java\nindex 43c8864..35f5ec9 100644\n--- a/platform/lang-impl/src/com/intellij/refactoring/changeSignature/ParameterTableModelBase.java\n+++ b/platform/lang-impl/src/com/intellij/refactoring/changeSignature/ParameterTableModelBase.java\n@@ -200,7 +200,11 @@ public abstract class ParameterTableModelBase<P extends ParameterInfo> extends L\n     private final FileType myFileType;\n \n     public DefaultValueColumn(Project project, FileType fileType) {\n-      super(RefactoringBundle.message(\"column.name.default.value\"));\n+      this(project, fileType, RefactoringBundle.message(\"column.name.default.value\"));\n+    }\n+\n+    public DefaultValueColumn(Project project, FileType fileType, String title) {\n+      super(title);\n       myProject = project;\n       myFileType = fileType;\n     }\n",
        "1": " Added constructor to DefaultValueColumn with additional parameter for custom title.",
        "2": "Refactoring DefaultValueColumn constructor to accept a custom title.",
        "3": "Change signature for JavaScript (work in progress)",
        "4": "do not show column in default",
        "5": "don ' t show column titles with colon",
        "6": "Don ' t run \" replaceIdGenerators \" in debugger viewer dialog",
        "7": "[ vcs - log ] fix selected issues",
        "8": " Added ability to specify title for default value column"
    },
    {
        "diff": "diff --git a/src/org/opensolaris/opengrok/index/IndexDatabase.java b/src/org/opensolaris/opengrok/index/IndexDatabase.java\nindex d336253e..c96aca92 100644\n--- a/src/org/opensolaris/opengrok/index/IndexDatabase.java\n+++ b/src/org/opensolaris/opengrok/index/IndexDatabase.java\n@@ -1079,6 +1079,7 @@ public class IndexDatabase {\n         RuntimeEnvironment env = RuntimeEnvironment.getInstance();\n         String path = env.getPathRelativeToSourceRoot(file, 0);\n         //sanitize windows path delimiters\n+        //in order not to conflict with Lucene escape character\n         path=path.replace(\"\\\\\", \"/\");\n \n         IndexReader ireader = getIndexReader(path);\n",
        "1": "Fixing path sanitization in IndexDatabase for Windows compatibility.",
        "2": " Added replacement of Windows path delimiters to prevent conflict with Lucene escape character",
        "3": " Fixed Windows path delimiters in IndexDatabase.java to avoid conflicts with Lucene escape character.",
        "4": "added emptyVersion comment",
        "5": "improve the Quartz config handling",
        "6": "Indexer don ' t use the value specified with - m",
        "7": "add comment to Lucene",
        "8": "improve comment why we can change \\ to /"
    },
    {
        "diff": "diff --git a/WordPress/src/main/java/org/wordpress/android/ui/accounts/SignInFragment.java b/WordPress/src/main/java/org/wordpress/android/ui/accounts/SignInFragment.java\nindex 116d7a755..ae3625840 100644\n--- a/WordPress/src/main/java/org/wordpress/android/ui/accounts/SignInFragment.java\n+++ b/WordPress/src/main/java/org/wordpress/android/ui/accounts/SignInFragment.java\n@@ -405,10 +405,10 @@ public class SignInFragment extends AbstractFragment implements TextWatcher {\n     }\n \n     private void switchToDotOrgIcon(boolean showDotOrg) {\n-        if (mIconSwitcher.getDisplayedChild() == 0 && showDotOrg) {\n-            mIconSwitcher.showNext();\n+        if (mIconSwitcher.getDisplayedChild() == 0) {\n+            if (showDotOrg) mIconSwitcher.showNext();\n         } else {\n-            mIconSwitcher.showPrevious();\n+            if (!showDotOrg) mIconSwitcher.showPrevious();\n         }\n     }\n \n",
        "1": "oops , reversed \" Reformat \" button",
        "2": " Switched icon switcher behavior to show dot org icon when relevant.",
        "3": " Fixed issue with icon switching when dot org icon is selected.",
        "4": "don't switch logo if not needed",
        "5": "Show self hosted sign in form if the email isn ' t available on wordpress . com",
        "6": "Fix a bug where you don ' t cause crashes",
        "7": "Fix NPE when trying is not set",
        "8": "Refactored switchToDotOrgIcon method in SignInFragment to improve code readability."
    },
    {
        "diff": "diff --git a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java\nindex 5b9e5d2..133bb52 100644\n--- a/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java\n+++ b/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java\n@@ -543,12 +543,6 @@ public class MediaDriver implements AutoCloseable\n             return this;\n         }\n \n-        public Context eventCodes(final long eventCodes)\n-        {\n-            this.eventCodes = eventCodes;\n-            return this;\n-        }\n-\n         public Context eventBufferSize(final int size)\n         {\n             this.eventBufferSize = size;\n",
        "1": "[ Java ] Remove redundant null check before unmapping byte buffer .",
        "2": "delete dead code",
        "3": "[ Java ] Removed unused method .",
        "4": " Removed method eventCodes and updated eventBufferSize method to accept long value",
        "5": "Remove unused method",
        "6": " Changed method signature for `eventCodes()` and `eventBufferSize()` to return `this` instead of the original return type.",
        "7": "Remove unused method 'eventCodes' from MediaDriver class.",
        "8": "remove unused method"
    },
    {
        "diff": "diff --git a/enterprise/cluster/src/main/java/org/neo4j/cluster/client/ClusterClient.java b/enterprise/cluster/src/main/java/org/neo4j/cluster/client/ClusterClient.java\nindex b41a671..68f8521 100644\n--- a/enterprise/cluster/src/main/java/org/neo4j/cluster/client/ClusterClient.java\n+++ b/enterprise/cluster/src/main/java/org/neo4j/cluster/client/ClusterClient.java\n@@ -30,11 +30,12 @@ import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n import org.jboss.netty.logging.InternalLoggerFactory;\n+\n import org.neo4j.cluster.BindingListener;\n-import org.neo4j.cluster.InstanceId;\n import org.neo4j.cluster.ClusterMonitor;\n import org.neo4j.cluster.ClusterSettings;\n import org.neo4j.cluster.ExecutorLifecycleAdapter;\n+import org.neo4j.cluster.InstanceId;\n import org.neo4j.cluster.MultiPaxosServerFactory;\n import org.neo4j.cluster.ProtocolServer;\n import org.neo4j.cluster.StateMachines;\n@@ -350,11 +351,13 @@ public class ClusterClient extends LifecycleAdapter\n             @Override\n             public void channelOpened( URI to )\n             {\n+                logging.getMessagesLog( NetworkReceiver.class ).info( to + \" connected to me at \" + server.boundAt() );\n             }\n \n             @Override\n             public void channelClosed( URI to )\n             {\n+                logging.getMessagesLog( NetworkReceiver.class ).info( to + \" disconnected from me at \" + server.boundAt() );\n             }\n         } );\n \n",
        "1": " Added import statement for InstanceId and added logging statements for channelOpened and channelClosed methods.",
        "2": "If timeout while waiting for access guard , fail transaction straight away",
        "3": "Add logging for disconnected",
        "4": "Log stream name application deps at server side",
        "5": "use NotationParserBuilder to build operation on startup",
        "6": "Add logging messages for when a channel is opened or closed in ClusterClient.",
        "7": " Added binding listener to ClusterClient for multi-paxos server updates",
        "8": "Added info messages on incoming connections as well."
    },
    {
        "diff": "diff --git a/h2o-core/src/main/java/water/rapids/Rapids.java b/h2o-core/src/main/java/water/rapids/Rapids.java\nindex 63367975b..bde77b0ea 100644\n--- a/h2o-core/src/main/java/water/rapids/Rapids.java\n+++ b/h2o-core/src/main/java/water/rapids/Rapids.java\n@@ -107,8 +107,7 @@ public class Rapids {\n       case '(':  return new ASTExec(this); // function application\n       case '{':  return new ASTFun(this);  // function definition\n       case '#':  _x++;                     // Skip before double, FALL THRU\n-      case '0':  case '1':  case '2':  case '3':  case '4':\n-      case '5':  case '6':  case '7':  case '8':  case '9':\n+      case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':\n         return new ASTNum(this);\n       case '\\\"': return new ASTStr(this,'\\\"');\n       case '\\'': return new ASTStr(this,'\\'');\n@@ -181,7 +180,7 @@ public class Rapids {\n   }\n \n   static boolean isWS(char c) {\n-    return c == ' ';\n+    return c == ' ' || c == '\\t' || c == '\\n';\n   }\n \n   static boolean isQuote(char c) {\n",
        "1": "allow tabs and newlines to count as whitespace",
        "2": "Handle UNKNOWN_TOPIC_OR_PARTITION as a temporary exception instead of permanent .",
        "3": "Refactor Rapids.java for improved readability and whitespace handling.",
        "4": "Fix typo in Rapids . isWS ( )",
        "5": " Extend ASTNum to match digits 0-9, and ASTStr to match single and double quotes.",
        "6": " Fixed whitespace and quote handling in Rapids.java",
        "7": "Fix test assertion format .",
        "8": "Fix triple quotes"
    },
    {
        "diff": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints/TitanBlueprintsTransaction.java b/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints/TitanBlueprintsTransaction.java\nindex 99c4742..f18f027 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints/TitanBlueprintsTransaction.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints/TitanBlueprintsTransaction.java\n@@ -68,7 +68,7 @@ public abstract class TitanBlueprintsTransaction implements TitanTransaction {\n         if (id instanceof Number && AttributeUtil.isWholeNumber((Number) id)) {\n             return addVertex(((Number) id).longValue());\n         } else {\n-            if (id != null) log.warn(\"Provided vertex id [{}] is not supported by Titan and hence ignored.\", id);\n+//            if (id != null) log.warn(\"Provided vertex id [{}] is not supported by Titan and hence ignored.\", id);\n             return addVertex(null);\n         }\n \ndiff --git a/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java b/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java\nindex 477d4a8..01b6f13 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java\n@@ -317,7 +317,7 @@ public class StandardTitanTx extends TitanBlueprintsTransaction {\n     public TitanVertex addVertex(Long vertexId) {\n         verifyWriteAccess();\n         if (vertexId != null && !graph.getConfiguration().allowVertexIdSetting()) {\n-            log.warn(\"Provided vertex id [{}] is ignored because vertex id setting is not enabled\", vertexId);\n+            log.info(\"Provided vertex id [{}] is ignored because vertex id setting is not enabled\", vertexId);\n             vertexId = null;\n         }\n         Preconditions.checkArgument(vertexId != null || !graph.getConfiguration().allowVertexIdSetting(), \"Must provide vertex id\");\n",
        "1": "fixed logging message",
        "2": "Ignore provided vertex id if vertex id setting is not enabled.",
        "3": "changed return from long to int for partition id",
        "4": "Removed warning so that Titan silently ignores passed in ids",
        "5": "Made the check to determine if the record is not full .",
        "6": " Fixed logging message for ignored vertex ID in TitanBlueprintsTransaction and StandardTitanTx",
        "7": "Add support for vertex id setting in StandardTitanTx",
        "8": "Fix exception message"
    },
    {
        "diff": "diff --git a/languagetool-language-modules/fa/src/main/java/org/languagetool/language/Persian.java b/languagetool-language-modules/fa/src/main/java/org/languagetool/language/Persian.java\nindex d2db74de72..894e0c8205 100644\n--- a/languagetool-language-modules/fa/src/main/java/org/languagetool/language/Persian.java\n+++ b/languagetool-language-modules/fa/src/main/java/org/languagetool/language/Persian.java\n@@ -69,6 +69,7 @@ public class Persian extends Language {\n   public List<Rule> getRelevantRules(ResourceBundle messages) {\n     return Arrays.asList(\n         //new CommaWhitespaceRule(messages),\n+        //new UppercaseSentenceStartRule(messages, this),\n         //new DoublePunctuationRule(messages),\n         //new MultipleWhitespaceRule(messages, this),\n         //new LongSentenceRule(messages),\n",
        "1": "add update code",
        "2": "add note to a warning",
        "3": "[ fa ] add messages for fa",
        "4": " Added new UppercaseSentenceStartRule and MultipleWhitespaceRule for Persian language",
        "5": "Add UppercaseSentenceStartRule to Persian language module",
        "6": " Added UppercaseSentenceStartRule to Persian language module.",
        "7": "[fa] add another potentially interesting rule (commented out)",
        "8": "[ fa ] Enable added rules"
    },
    {
        "diff": "diff --git a/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java b/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java\nindex a84f4b4..9b77617 100644\n--- a/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java\n+++ b/underfs/swift/src/main/java/alluxio/underfs/swift/SwiftInputStream.java\n@@ -71,7 +71,6 @@ public class SwiftInputStream extends InputStream {\n       mPos++;\n       checkStream();\n     }\n-\n     return value;\n   }\n \n",
        "1": " Fixes null pointer exception in SwiftInputStream.java",
        "2": "Fixed the issue in the SwiftInputStream alluxio",
        "3": "Remove extra spacing",
        "4": "Don ' t use EXTRA_EMAIL",
        "5": "Remove unnecessary whitespace",
        "6": "Remove unnecessary code in SwiftInputStream.java",
        "7": " Fix SwiftInputStream to return -1 on end of stream instead of 0.",
        "8": "Remove extra spacing"
    },
    {
        "diff": "diff --git a/src/main/java/org/jboss/netty/channel/socket/sctp/SctpPayload.java b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpPayload.java\nindex 7f51120..6d375e2 100644\n--- a/src/main/java/org/jboss/netty/channel/socket/sctp/SctpPayload.java\n+++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpPayload.java\n@@ -39,7 +39,7 @@ public final class SctpPayload {\n         this.payloadBuffer = payloadBuffer;\n     }\n \n-    public int getstreamIdentifier() {\n+    public int getStreamIdentifier() {\n         return streamIdentifier;\n     }\n \ndiff --git a/src/main/java/org/jboss/netty/channel/socket/sctp/SctpSendBufferPool.java b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpSendBufferPool.java\nindex 3e77a4f..bdac36b 100644\n--- a/src/main/java/org/jboss/netty/channel/socket/sctp/SctpSendBufferPool.java\n+++ b/src/main/java/org/jboss/netty/channel/socket/sctp/SctpSendBufferPool.java\n@@ -54,7 +54,7 @@ final class SctpSendBufferPool {\n \n     private final SendBuffer acquire(SctpPayload message) {\n         final ChannelBuffer src = message.getPayloadBuffer();\n-        final int streamNo = message.getstreamIdentifier();\n+        final int streamNo = message.getStreamIdentifier();\n         final int protocolId = message.getProtocolIdentifier();\n \n         final int size = src.readableBytes();\n",
        "1": "Fix bug in SctpPayload",
        "2": "Fix typo in method name and variable name",
        "3": "fixed a typo in a getter method",
        "4": " Added getStreamIdentifier() method to SctpPayload class",
        "5": " Fixed case of getStreamIdentifier() to match method signature in SctpPayload",
        "6": "Removed ' volatile ' from the member variables that are protected by ThreadPoolExecutor ' s BlockingQueue operations",
        "7": "Fixed an integer leak in wrong loader",
        "8": "Fixed race condition in cluster"
    },
    {
        "diff": "diff --git a/wifi/java/android/net/wifi/WifiConfiguration.java b/wifi/java/android/net/wifi/WifiConfiguration.java\nindex 7db160f..7c5276c 100644\n--- a/wifi/java/android/net/wifi/WifiConfiguration.java\n+++ b/wifi/java/android/net/wifi/WifiConfiguration.java\n@@ -1266,6 +1266,8 @@ public class WifiConfiguration implements Parcelable {\n             }\n             mTemporarilyDisabledTimestamp = source.mTemporarilyDisabledTimestamp;\n             mNetworkSelectionBSSID = source.mNetworkSelectionBSSID;\n+            setCandidate(source.getCandidate());\n+            setCandidateScore(source.getCandidateScore());\n             setConnectChoice(source.getConnectChoice());\n             setConnectChoiceTimestamp(source.getConnectChoiceTimestamp());\n             setHasEverConnected(source.getHasEverConnected());\n",
        "1": "Fix broken RepackerTests on a single - second",
        "2": " Added candidate and candidate score fields to WifiConfiguration class",
        "3": "Prevent memory exception .",
        "4": "Fix copy constructor",
        "5": "Fix bug in WifiConfiguration",
        "6": " Added methods setCandidate and setCandidateScore to WifiConfiguration.",
        "7": "Added candidate and candidate score setters in WifiConfiguration class.",
        "8": "Remove wifiConfiguration . isVisibleToUser ( )"
    },
    {
        "diff": "diff --git a/platform/platform-impl/src/com/intellij/openapi/options/newEditor/OptionsEditor.java b/platform/platform-impl/src/com/intellij/openapi/options/newEditor/OptionsEditor.java\nindex 1505f09..443e5ee 100644\n--- a/platform/platform-impl/src/com/intellij/openapi/options/newEditor/OptionsEditor.java\n+++ b/platform/platform-impl/src/com/intellij/openapi/options/newEditor/OptionsEditor.java\n@@ -38,6 +38,7 @@ import com.intellij.openapi.util.EdtRunnable;\n import com.intellij.openapi.util.registry.Registry;\n import com.intellij.openapi.wm.IdeGlassPaneUtil;\n import com.intellij.ui.LightColors;\n+import com.intellij.ui.OnePixelSplitter;\n import com.intellij.ui.ScrollPaneFactory;\n import com.intellij.ui.SearchTextField;\n import com.intellij.ui.components.labels.LinkLabel;\n@@ -248,7 +249,7 @@ public class OptionsEditor extends JPanel implements DataProvider, Place.Navigat\n \n     setLayout(new BorderLayout());\n \n-    myMainSplitter = new Splitter(false);\n+    myMainSplitter = Registry.is(\"ide.new.settings.dialog\") ? new OnePixelSplitter(false) : new Splitter(false);\n     myMainSplitter.setFirstComponent(myLeftSide);\n \n     myLoadingDecorator = new LoadingDecorator(myOwnDetails.getComponent(), this, 150);\n",
        "1": "add parent for popups",
        "2": "Add new OnePixelSplitter class to OptionsEditor",
        "3": "add one pixel splitter",
        "4": " Changed import from Splitter to OnePixelSplitter in OptionsEditor.java.",
        "5": "normalize icon font according to non - dumb mode",
        "6": "do not show Splitter if it is not available",
        "7": " Added OnePixelSplitter for improved layout in OptionsEditor",
        "8": "fix right offset"
    },
    {
        "diff": "diff --git a/core/java/android/widget/TextView.java b/core/java/android/widget/TextView.java\nindex cc5be00..2082fa6 100644\n--- a/core/java/android/widget/TextView.java\n+++ b/core/java/android/widget/TextView.java\n@@ -8207,9 +8207,12 @@ public class TextView extends View implements ViewTreeObserver.OnPreDrawListener\n             selectCurrentWord();\n         }\n \n-        final InputMethodManager imm = (InputMethodManager)\n-                getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n-        imm.showSoftInput(this, 0, null);\n+        if (!mTextIsSelectable) {\n+            // Show the IME, except when selection non editable text.\n+            final InputMethodManager imm = (InputMethodManager)\n+                    getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n+            imm.showSoftInput(this, 0, null);\n+        }\n \n         ActionMode.Callback actionModeCallback = new SelectionActionModeCallback();\n         mSelectionActionMode = startActionMode(actionModeCallback);\n",
        "1": " Added check for non-editable text to prevent showing IME when selection is in progress.",
        "2": "Do not display the IME when selection in non editable text.",
        "3": "Ignore disabled text from crashing .",
        "4": " Added check for text selectability before showing IME in TextView",
        "5": "Fix IME IME when IME is not selection",
        "6": "Removing TextView predraw listeners sooner",
        "7": "Fix issue with showing the IME for non-editable text in TextView.",
        "8": "DO NOT MERGE - Fix crash on tablets ."
    },
    {
        "diff": "diff --git a/framework/src/org/apache/cordova/AudioPlayer.java b/framework/src/org/apache/cordova/AudioPlayer.java\nindex 3d520a2d..14645b24 100644\n--- a/framework/src/org/apache/cordova/AudioPlayer.java\n+++ b/framework/src/org/apache/cordova/AudioPlayer.java\n@@ -96,6 +96,13 @@ public class AudioPlayer implements OnCompletionListener, OnPreparedListener, On\n         this.handler = handler;\n         this.id = id;\n         this.audioFile = file;\t\n+\n+        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n+            this.tempFile = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/tmprecording.mp3\";\n+        } else {\n+            this.tempFile = \"/data/data/\" + handler.ctx.getActivity().getPackageName() + \"/cache/tmprecording.mp3\";\n+        }\n+\n     }\n \n     /**\n",
        "1": "added deleted tempfile setup",
        "2": "Fix NPE in tmprecording",
        "3": "Don ' t roll back progress when not required",
        "4": "Restoring the ability to be able to register which some files are found ( Chao Khandelwal via Ashutosh Chauhan )",
        "5": " Added a new variable tempFile to store the path of the temporary audio file, and updated the constructor to set the tempFile path based on the external storage state.",
        "6": "Fixing app crash when clicking Menu or Back buttons while splashscreen is being shown .",
        "7": "Add support for temporary audio file storage.",
        "8": " Added temp file path for recording in Android 11 and above"
    },
    {
        "diff": "diff --git a/pinot-controller/src/main/java/com/linkedin/pinot/controller/validation/ValidationManager.java b/pinot-controller/src/main/java/com/linkedin/pinot/controller/validation/ValidationManager.java\nindex 68b548d3e..a78239ab4 100644\n--- a/pinot-controller/src/main/java/com/linkedin/pinot/controller/validation/ValidationManager.java\n+++ b/pinot-controller/src/main/java/com/linkedin/pinot/controller/validation/ValidationManager.java\n@@ -188,7 +188,7 @@ public class ValidationManager {\n         _validationMetrics.updateOfflineSegmentDelayGauge(tableName, maxSegmentEndTime);\n         _validationMetrics.updateLastPushTimeGauge(tableName, maxSegmentPushTime);\n         // Update the gauge to contain the total document count in the segments\n-        _validationMetrics.updateTotalDocumentsGauge(tableName, computeRealtimeTotalDocumentInSegments(segmentMetadataList));\n+        _validationMetrics.updateTotalDocumentsGauge(tableName, computeOfflineTotalDocumentInSegments(segmentMetadataList));\n         // Update the gauge to contain the total number of segments for this table\n         _validationMetrics.updateSegmentCountGauge(tableName, segmentMetadataList.size());\n       }\n",
        "1": "Adding time time to client",
        "2": " Updated ValidationManager to use offline segment delay gauge and total document count gauge instead of real-time gauges.",
        "3": "Fix bug in gauge validation",
        "4": " Fixed issue with offline total document count calculation in ValidationManager.",
        "5": "Fixed an issue where the value of the loading model values",
        "6": "Log missing intervals when running segment validation",
        "7": "Update total documents gauge for offline segments.",
        "8": "Calling correct method to calculate offline segment document count"
    },
    {
        "diff": "diff --git a/core/java/android/webkit/SslCertLookupTable.java b/core/java/android/webkit/SslCertLookupTable.java\nindex 048a3cf..052244f 100644\n--- a/core/java/android/webkit/SslCertLookupTable.java\n+++ b/core/java/android/webkit/SslCertLookupTable.java\n@@ -46,4 +46,8 @@ final class SslCertLookupTable {\n     public boolean isAllowed(SslError sslError) {\n         return table.getBoolean(sslError.toString());\n     }\n+\n+    public void clear() {\n+        table.clear();\n+    }\n }\ndiff --git a/core/java/android/webkit/WebViewCore.java b/core/java/android/webkit/WebViewCore.java\nindex 470e843..deaf0f2 100644\n--- a/core/java/android/webkit/WebViewCore.java\n+++ b/core/java/android/webkit/WebViewCore.java\n@@ -1349,8 +1349,14 @@ public final class WebViewCore {\n                         }\n \n                         case CLEAR_SSL_PREF_TABLE:\n-                            Network.getInstance(mContext)\n-                                    .clearUserSslPrefTable();\n+                            if (JniUtil.useChromiumHttpStack()) {\n+                                // FIXME: This will not work for connections currently in use, as\n+                                // they cache the certificate responses. See http://b/5324235.\n+                                SslCertLookupTable.getInstance().clear();\n+                                nativeCloseIdleConnections();\n+                            } else {\n+                                Network.getInstance(mContext).clearUserSslPrefTable();\n+                            }\n                             break;\n \n                         case TOUCH_UP:\n",
        "1": "reset select / copy state if key is pressed while shift is down",
        "2": "Hook up WebView.clearSslPreferences() for the Chromium HTTP stack",
        "3": "Notify immersive mode on the place .",
        "4": " Clear SSL preference table and close idle connections.",
        "5": "Fix a bug where the connections is not be connections",
        "6": "Fix leak when closing options .",
        "7": "Clear SSL certificate lookup table and close idle connections in WebViewCore.",
        "8": " Added method `clear()` to `SslCertLookupTable` for clearing the certificate lookup table."
    },
    {
        "diff": "diff --git a/jOOQ-test/src/org/jooq/test/_/PrettyPrinter.java b/jOOQ-test/src/org/jooq/test/_/PrettyPrinter.java\nindex ec3917292..e69e3b285 100644\n--- a/jOOQ-test/src/org/jooq/test/_/PrettyPrinter.java\n+++ b/jOOQ-test/src/org/jooq/test/_/PrettyPrinter.java\n@@ -56,7 +56,7 @@ public class PrettyPrinter extends DefaultExecuteListener {\n      * Hook into the query execution lifecycle before executing queries\r\n      */\r\n     @Override\r\n-    public void executeStart(ExecuteContext ctx) {\r\n+    public void renderEnd(ExecuteContext ctx) {\r\n \r\n         // Create a new factory for logging rendering purposes\r\n         // This factory doesn't need a connection, only the SQLDialect...\r\n",
        "1": "Fix PrettyPrinter test",
        "2": " Fixed rendering issue in PrettyPrinter by updating renderEnd method.",
        "3": "Fixed findbugs issue",
        "4": "Revert inadvertent change in test method .",
        "5": "Added some Javadoc",
        "6": "Change executeStart() to renderEnd() in PrettyPrinter.java",
        "7": "Let PrettyPrinter hook into renderEnd, rather than executeStart",
        "8": " RenderEnd method added to PrettyPrinter class to hook into query execution lifecycle after query execution."
    },
    {
        "diff": "diff --git a/src/java/org/apache/cassandra/transport/Frame.java b/src/java/org/apache/cassandra/transport/Frame.java\nindex b164998..8e3240b 100644\n--- a/src/java/org/apache/cassandra/transport/Frame.java\n+++ b/src/java/org/apache/cassandra/transport/Frame.java\n@@ -156,7 +156,7 @@ public class Frame\n         }\n \n         @Override\n-        protected Object decode (ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer)\n+        protected Object decode(ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer)\n         throws Exception\n         {\n             ChannelBuffer frame = (ChannelBuffer) super.decode(ctx, channel, buffer);\n@@ -166,13 +166,6 @@ public class Frame\n             }\n             return Frame.create(frame, connection);\n         }\n-\n-        @Override\n-        protected ChannelBuffer extractFrame(ChannelBuffer buffer, int index, int length)\n-        {\n-            // Don't copy\n-            return buffer.slice(index, length);\n-        }\n     }\n \n     public static class Encoder extends OneToOneEncoder\n",
        "1": "remove unused method",
        "2": "Fix bug in binary protocol",
        "3": "Remove unused methods",
        "4": "Remove unused method extractFrame() in Frame.java",
        "5": "remove dead method",
        "6": "[ git ] remove old method",
        "7": " Added support for decoding Frame objects",
        "8": " Fix decoding to use slice instead of copy."
    },
    {
        "diff": "diff --git a/astrid/src/com/todoroo/astrid/adapter/FilterAdapter.java b/astrid/src/com/todoroo/astrid/adapter/FilterAdapter.java\nindex 4c4842ce3..e4402dc81 100644\n--- a/astrid/src/com/todoroo/astrid/adapter/FilterAdapter.java\n+++ b/astrid/src/com/todoroo/astrid/adapter/FilterAdapter.java\n@@ -361,7 +361,10 @@ public class FilterAdapter extends BaseExpandableListAdapter {\n                 onReceiveFilter((FilterListItem)item);\n \n                 if (filter instanceof FilterCategory) {\n-                    arrayAdapter.addAll(((FilterCategory) filter).children);\n+                    Filter[] children = ((FilterCategory) filter).children;\n+                    for (Filter f : children) {\n+                        arrayAdapter.add(f);\n+                    }\n                 } else {\n                     arrayAdapter.add(filter);\n                 }\n",
        "1": "Fix a bug where the adapter was not be used",
        "2": "Fixed a bug with notes de - linkifying",
        "3": "Fixed a bug where DiscardClientHandler . isConnected ( ) issue",
        "4": "Refactor FilterAdapter to add children filters individually",
        "5": " Added support for displaying children of FilterCategory filters in the FilterAdapter.",
        "6": " Added support for filtering categories with children.",
        "7": "Hopefully fixed a problem with the BladeFilterReceiver not working",
        "8": "Fixed a bug with using arrayAdapter.addAll"
    },
    {
        "diff": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/util/RelIdArray.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/util/RelIdArray.java\nindex 5bc417a..63c796a 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/util/RelIdArray.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/util/RelIdArray.java\n@@ -812,7 +812,7 @@ public class RelIdArray implements SizeOf\n             }\n             if ( add != null )\n             {\n-                src.addAll( add );\n+                src = src.addAll( add );\n                 return src.downgradeIfPossible();\n             }\n             return src;\n",
        "1": "Uses the returned RelIdArray from addAll",
        "2": "Uses the faster requestContext",
        "3": "Fixing bug in RelIdArray class",
        "4": "Added a todo comment .",
        "5": " Added method `addAll()` to `RelIdArray` for efficient addition of multiple relations.",
        "6": "Fix a bug in the comment",
        "7": "I ' re using user as default",
        "8": " Fix issue with `addAll` method in `RelIdArray` class."
    },
    {
        "diff": "diff --git a/moco-core/src/main/java/com/github/dreamhead/moco/ResponseHandler.java b/moco-core/src/main/java/com/github/dreamhead/moco/ResponseHandler.java\nindex 711c5c0b..9a394d5b 100644\n--- a/moco-core/src/main/java/com/github/dreamhead/moco/ResponseHandler.java\n+++ b/moco-core/src/main/java/com/github/dreamhead/moco/ResponseHandler.java\n@@ -1,8 +1,6 @@\n package com.github.dreamhead.moco;\n \n import com.github.dreamhead.moco.internal.SessionContext;\n-import io.netty.handler.codec.http.FullHttpRequest;\n-import io.netty.handler.codec.http.FullHttpResponse;\n \n public interface ResponseHandler extends ConfigApplier<ResponseHandler> {\n     void writeToResponse(final SessionContext context);\ndiff --git a/moco-core/src/main/java/com/github/dreamhead/moco/extractor/ContentRequestExtractor.java b/moco-core/src/main/java/com/github/dreamhead/moco/extractor/ContentRequestExtractor.java\nindex 08390ce8..708392d2 100644\n--- a/moco-core/src/main/java/com/github/dreamhead/moco/extractor/ContentRequestExtractor.java\n+++ b/moco-core/src/main/java/com/github/dreamhead/moco/extractor/ContentRequestExtractor.java\n@@ -1,15 +1,15 @@\n package com.github.dreamhead.moco.extractor;\n \n-import com.github.dreamhead.moco.HttpRequest;\n-import com.github.dreamhead.moco.HttpRequestExtractor;\n+import com.github.dreamhead.moco.Request;\n+import com.github.dreamhead.moco.RequestExtractor;\n import com.google.common.base.Optional;\n \n import static com.google.common.base.Optional.of;\n import static com.google.common.base.Strings.isNullOrEmpty;\n \n-public class ContentRequestExtractor extends HttpRequestExtractor<String> {\n+public class ContentRequestExtractor implements RequestExtractor<String> {\n     @Override\n-    protected Optional<String> doExtract(HttpRequest request) {\n+    public Optional<String> extract(final Request request) {\n         String content = request.getContent();\n         return isNullOrEmpty(content) ? Optional.<String>absent() : of(content);\n     }\n",
        "1": "used request extractor interface for content extractor",
        "2": " Fixed import statements for ContentRequestExtractor",
        "3": "use the correct import",
        "4": "made ALLOWED_JDKS public",
        "5": "checked sub resource name",
        "6": "added throws warnings",
        "7": "Refactor ResponseHandler and ContentRequestExtractor classes",
        "8": " Update ResponseHandler to use Request and Response instead of FullHttpRequest and FullHttpResponse"
    },
    {
        "diff": "diff --git a/src/main/java/eu/siacs/conversations/entities/ServiceDiscoveryResult.java b/src/main/java/eu/siacs/conversations/entities/ServiceDiscoveryResult.java\nindex c4fc30ab..9accec95 100644\n--- a/src/main/java/eu/siacs/conversations/entities/ServiceDiscoveryResult.java\n+++ b/src/main/java/eu/siacs/conversations/entities/ServiceDiscoveryResult.java\n@@ -53,6 +53,7 @@ public class ServiceDiscoveryResult {\n \t\t}\n \n \t\tpublic Identity(final JSONObject o) {\n+\n \t\t\tthis(\n \t\t\t\to.optString(\"category\", null),\n \t\t\t\to.optString(\"type\", null),\n@@ -145,7 +146,7 @@ public class ServiceDiscoveryResult {\n \t\tthis.hash = hash;\n \t\tthis.ver = ver;\n \n-\t\tJSONArray identities = o.optJSONArray(\"identities\");\n+\t\tJSONArray identities = o.optJSONArray(\"identites\");\n \t\tif (identities != null) {\n \t\t\tfor (int i = 0; i < identities.length(); i++) {\n \t\t\t\tthis.identities.add(new Identity(identities.getJSONObject(i)));\n",
        "1": " Added support for pluralized service types in ServiceDiscoveryResult",
        "2": "added active id",
        "3": "Fix a bug in ServiceDiscoveryResult",
        "4": "don ' t overwrite edited information in editaccount on rotate",
        "5": " Added 'identites' to JSONArray identities in ServiceDiscoveryResult.",
        "6": "use the same typo in both saving disco and reading disco",
        "7": "Fix typo in optJSONArray method parameter name",
        "8": "fixed nextval usage"
    },
    {
        "diff": "diff --git a/framework/src/com/phonegap/DirectoryManager.java b/framework/src/com/phonegap/DirectoryManager.java\nindex d9ba47ca..b452c2b3 100644\n--- a/framework/src/com/phonegap/DirectoryManager.java\n+++ b/framework/src/com/phonegap/DirectoryManager.java\n@@ -265,7 +265,8 @@ public class DirectoryManager {\n \t */\n \tprotected static JSONArray getRootPaths() {\n         JSONArray retVal = new JSONArray();\n-        retVal.put(Environment.getExternalStorageDirectory().getAbsolutePath());\n+        String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/\";\n+        retVal.put(path);\n \t\treturn retVal;\n \t}\n \n",
        "1": "Fixing the hasAnnotation",
        "2": "Removing the SMS Listener",
        "3": " Changed DirectoryManager to include a new root path.",
        "4": "Refactor getRootPaths() method in DirectoryManager.java to include a trailing slash in the returned path.",
        "5": "Put trailing / into getRootPaths() to remain consistent with BBW",
        "6": " Added slash to the end of the path in Environment.getExternalStorageDirectory().getAbsolutePath() to ensure that it is a directory.",
        "7": "Do not use a root for default path",
        "8": "Fix DirectoryManager . JSONArray ( )"
    },
    {
        "diff": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java\nindex 90ccb08..3ebae77 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java\n@@ -118,7 +118,6 @@ import static com.facebook.presto.spi.type.VarcharType.VARCHAR;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.AMBIGUOUS_ATTRIBUTE;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.EXPRESSION_NOT_CONSTANT;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.INVALID_LITERAL;\n-import static com.facebook.presto.sql.analyzer.SemanticErrorCode.MISSING_ATTRIBUTE;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.MULTIPLE_FIELDS_FROM_SUBQUERY;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.NOT_SUPPORTED;\n import static com.facebook.presto.sql.analyzer.SemanticErrorCode.TYPE_MISMATCH;\n",
        "1": "Fix missing import",
        "2": " Remove unnecessary import statement for MISSING_ATTRIBUTE.",
        "3": "Add missing import",
        "4": "Remove unused imports",
        "5": " Fixed ambiguous attribute error in ExpressionAnalyzer.java",
        "6": "Remove unused import and update error code constants in ExpressionAnalyzer",
        "7": "remove unused imports",
        "8": "Removed unused import"
    },
    {
        "diff": "diff --git a/core/java/android/widget/AbsListView.java b/core/java/android/widget/AbsListView.java\nindex a555ae4..b78373d 100644\n--- a/core/java/android/widget/AbsListView.java\n+++ b/core/java/android/widget/AbsListView.java\n@@ -2387,6 +2387,7 @@ public abstract class AbsListView extends AdapterView<ListAdapter> implements Te\n                 mVelocityTracker.clear();\n             }\n         }\n+        awakenScrollBars();\n     }\n     \n     private int getOverscrollMax() {\n",
        "1": " Adds a call to awakenScrollBars() in the onMotionEvent() method to ensure that the scrollbars are always awake when the user is scrolling.",
        "2": "Add awakenScrollBars() method call in onTouchEvent() method",
        "3": "Fix bug in AbsListView .",
        "4": " Added method 'awakenScrollBars()' to AbsListView",
        "5": "Fix NPE in AbsListView hotspot management",
        "6": "Fix memory leak in ResultReceiver",
        "7": "DO NOT MERGE Fix crash when disposing RecyclerView .",
        "8": "Awaken ListView scroll bars for overscroll"
    },
    {
        "diff": "diff --git a/ratpack-session/src/main/java/org/ratpackframework/session/internal/SessionBindingHandler.java b/ratpack-session/src/main/java/org/ratpackframework/session/internal/SessionBindingHandler.java\nindex 0ebdfbec6..4e0ed081e 100644\n--- a/ratpack-session/src/main/java/org/ratpackframework/session/internal/SessionBindingHandler.java\n+++ b/ratpack-session/src/main/java/org/ratpackframework/session/internal/SessionBindingHandler.java\n@@ -35,11 +35,11 @@ public class SessionBindingHandler implements Handler {\n     this.delegate = ImmutableList.of(delegate);\n   }\n \n-  public void handle(Context context) {\n-    SessionManager sessionManager = context.get(SessionManager.class);\n-    final ExchangeSessionManager exchangeSessionManager = new ExchangeSessionManager(context, sessionManager);\n-    Registry<Object> registry = new LazyChildRegistry<Object, Session>(context, Session.class, new Factory<Session>() {\n+  public void handle(final Context context) {\n+    Registry<Object> registry = new LazyChildRegistry<>(context, Session.class, new Factory<Session>() {\n       public Session create() {\n+        SessionManager sessionManager = context.get(SessionManager.class);\n+        final ExchangeSessionManager exchangeSessionManager = new ExchangeSessionManager(context, sessionManager);\n         return exchangeSessionManager.getSession();\n       }\n     });\n",
        "1": "Don't create a session manager unless needed.",
        "2": " Refactored SessionBindingHandler to use LazyChildRegistry and removed unnecessary variable.",
        "3": "Was also add @ Nullable annotation .",
        "4": "Corrected the function name",
        "5": "Fix bug in SessionBindingHandler . handle ( )",
        "6": " Added new SessionBindingHandler implementation to handle Session management in Ratpack.",
        "7": "Refactor SessionBindingHandler to improve session management.",
        "8": "Make some fields final ."
    },
    {
        "diff": "diff --git a/services/core/java/com/android/server/wm/DisplayContent.java b/services/core/java/com/android/server/wm/DisplayContent.java\nindex 5d6df26..4db0b1e 100644\n--- a/services/core/java/com/android/server/wm/DisplayContent.java\n+++ b/services/core/java/com/android/server/wm/DisplayContent.java\n@@ -203,7 +203,9 @@ class DisplayContent {\n     }\n \n     void moveStack(TaskStack stack, boolean toTop) {\n-        mStacks.remove(stack);\n+        if (!mStacks.remove(stack)) {\n+            Slog.wtf(TAG, \"moving stack that was not added: \" + stack, new Throwable());\n+        }\n         mStacks.add(toTop ? mStacks.size() : 0, stack);\n     }\n \ndiff --git a/services/core/java/com/android/server/wm/TaskStack.java b/services/core/java/com/android/server/wm/TaskStack.java\nindex 4545032..794b49c 100644\n--- a/services/core/java/com/android/server/wm/TaskStack.java\n+++ b/services/core/java/com/android/server/wm/TaskStack.java\n@@ -385,8 +385,6 @@ public class TaskStack {\n         }\n \n         close();\n-\n-        mDisplayContent = null;\n     }\n \n     void resetAnimationBackgroundAnimator() {\n@@ -518,6 +516,7 @@ public class TaskStack {\n             mDimLayer.destroySurface();\n             mDimLayer = null;\n         }\n+        mDisplayContent = null;\n     }\n \n     public void dump(String prefix, PrintWriter pw) {\n",
        "1": "Add null check and call destroy from single point .",
        "2": "Fix bug with moving stack that was not added",
        "3": " Fixes bug where stack was being moved even though it was not added; adds log message for stack move failures.",
        "4": "Fix NPE in stack . stack",
        "5": "Don ' t print stack overflow for the stack trace , which can be done",
        "6": " Fixed bug where moving a stack to the top would result in a null pointer exception.",
        "7": "CursorToBulkCursorAdapter . listTableColumns should check isStopped first",
        "8": "When closing task stack remove reference to display content."
    },
    {
        "diff": "diff --git a/src/main/java/org/acra/ACRAConstants.java b/src/main/java/org/acra/ACRAConstants.java\nindex 6ac920f..a426a0f 100644\n--- a/src/main/java/org/acra/ACRAConstants.java\n+++ b/src/main/java/org/acra/ACRAConstants.java\n@@ -147,8 +147,7 @@ public final class ACRAConstants {\n             PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,\r\n             AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,\r\n             DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,\r\n-            INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES, SETTINGS_SYSTEM, SETTINGS_SECURE,\r\n-            SETTINGS_GLOBAL };\r\n+            INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES };\r\n \r\n     public static final String DATE_TIME_FORMAT_STRING = \"yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ\";\r\n }\r\n",
        "1": "Removing SETTINGS_SYSTEM, SETTINGS_SECURE and SETTINGS_GLOBAL from the *default* report fields due to privacy concerns.",
        "2": "Fix bug in ACRAConstants",
        "3": "Use the correct seed for better readability .",
        "4": " Changed constant pool to remove unused variables.",
        "5": " Removed unnecessary fields from ACRAConstants: SETTINGS_SYSTEM, SETTINGS_SECURE, SETTINGS_GLOBAL.",
        "6": "Remove unused constants in ACRAConstants.java",
        "7": "remove the shadow limit that was not required",
        "8": "add function with zero arguments"
    },
    {
        "diff": "diff --git a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\nindex c6b662f..210944e 100644\n--- a/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java\n@@ -225,6 +225,22 @@ public class DataBinderTests extends TestCase {\n \t\t}\n \t}\n \n+\tpublic void testBindingWithSystemFieldError() throws Exception {\n+\t\tTestBean rod = new TestBean();\n+\t\tDataBinder binder = new DataBinder(rod, \"person\");\n+\t\tMutablePropertyValues pvs = new MutablePropertyValues();\n+\t\tpvs.add(\"class.classLoader.URLs[0]\", \"http://myserver\");\n+\t\tbinder.setIgnoreUnknownFields(false);\n+\n+\t\ttry {\n+\t\t\tbinder.bind(pvs);\n+\t\t\tfail(\"Should have thrown NotWritablePropertyException\");\n+\t\t}\n+\t\tcatch (NotWritablePropertyException ex) {\n+\t\t\tassertTrue(ex.getMessage().contains(\"classLoader\"));\n+\t\t}\n+\t}\n+\n \tpublic void testBindingWithErrorsAndCustomEditors() throws Exception {\n \t\tTestBean rod = new TestBean();\n \t\tDataBinder binder = new DataBinder(rod, \"person\");\n",
        "1": " Added test for binding with system field error and custom editors",
        "2": "Add a test for PropertyBeanSetter . getPropertyNames ( )",
        "3": "added test for invalid binding to ClassLoader",
        "4": "Add test for binding with system field error",
        "5": " Added test for binding with system field errors.",
        "6": "Add test for NotWritablePropertyException test",
        "7": "Added another test that waits indefinitely for a latch",
        "8": "Added test for ResponseBuilder . getScheme ( ) ."
    },
    {
        "diff": "diff --git a/java/org/apache/catalina/authenticator/Constants.java b/java/org/apache/catalina/authenticator/Constants.java\nindex 5e75c2c95..452a4f086 100644\n--- a/java/org/apache/catalina/authenticator/Constants.java\n+++ b/java/org/apache/catalina/authenticator/Constants.java\n@@ -38,12 +38,6 @@ public class Constants {\n     public static final String DEFAULT_JAAS_CONF = \"conf/jaas.conf\";\n     public static final String DEFAULT_LOGIN_MODULE_NAME =\n         \"com.sun.security.jgss.krb5.accept\";\n-    /**\n-     * @deprecated Unused. Will be removed in Tomcat 9.\n-     */\n-    @Deprecated\n-    public static final String USE_SUBJECT_CREDS_ONLY_PROPERTY =\n-            \"javax.security.auth.useSubjectCredsOnly\";\n \n     // Cookie name for single sign on support\n     public static final String SINGLE_SIGN_ON_COOKIE =\n",
        "1": "Remove deprecated constant in Constants.java.",
        "2": "Remove unused constant",
        "3": "Remove unused code",
        "4": "Removed deprecated code",
        "5": " Added default JAAS configuration file path and removed deprecated property in Constants.",
        "6": " Removed deprecated constant USE_SUBJECT_CREDS_ONLY_PROPERTY.",
        "7": "Deprecate unused constant",
        "8": "Remove deprecated code"
    },
    {
        "diff": "diff --git a/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java b/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java\nindex 16db181..e634452 100644\n--- a/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java\n+++ b/src/test/java/org/elasticsearch/test/junit/listeners/ReproduceInfoPrinter.java\n@@ -137,7 +137,7 @@ public class ReproduceInfoPrinter extends RunListener {\n         public ReproduceErrorMessageBuilder appendESProperties() {\n             appendProperties(\"es.logger.level\", \"es.node.mode\", \"es.node.local\", TESTS_CLUSTER, InternalTestCluster.TESTS_ENABLE_MOCK_MODULES,\n                     \"tests.assertion.disabled\", \"tests.security.manager\", \"tests.nightly\", \"tests.jvms\", \"tests.client.ratio\", \"tests.heap.size\",\n-                    \"tests.bwc\", \"tests.bwc.path\", \"tests.bwc.version\");\n+                    \"tests.bwc\", \"tests.bwc.version\");\n             if (System.getProperty(\"tests.jvm.argline\") != null && !System.getProperty(\"tests.jvm.argline\").isEmpty()) {\n                 appendOpt(\"tests.jvm.argline\", \"\\\"\" + System.getProperty(\"tests.jvm.argline\") + \"\\\"\");\n             }\n",
        "1": "[ TEST ] Fix PercolatorTests to wait for mappings on master .",
        "2": "[TEST] Don't print BWC test path - it's different on every machine",
        "3": " Changed how the `tests.bwc` property is handled in the `ReproduceInfoPrinter` class.",
        "4": "bump joda point",
        "5": "[ TEST ] Fix tests in tests",
        "6": "Remove unused property in ReproduceInfoPrinter class",
        "7": " Modified ReproduceInfoPrinter to include only the version of BWC in the printed information.",
        "8": "[ TEST ] fixed typo in ReproduceInfoPrinter ( s / nighly / nightly )"
    },
    {
        "diff": "diff --git a/javaslang/src/test/java/javaslang/collection/AbstractTraversableTest.java b/javaslang/src/test/java/javaslang/collection/AbstractTraversableTest.java\nindex b0f211c0..9cf8ad63 100644\n--- a/javaslang/src/test/java/javaslang/collection/AbstractTraversableTest.java\n+++ b/javaslang/src/test/java/javaslang/collection/AbstractTraversableTest.java\n@@ -587,7 +587,7 @@ public abstract class AbstractTraversableTest extends AbstractValueTest {\n \n     @Test\n     public void shouldFoldLeftNonNil() {\n-        assertThat(of(\"a\", \"b\", \"c\").foldLeft(\"\", (xs, x) -> xs + x)).isEqualTo(\"abc\");\n+        assertThat(of(\"a\", \"b\", \"c\").foldLeft(\"!\", (xs, x) -> xs + x)).isEqualTo(\"!abc\");\n     }\n \n     // -- foldRight\n@@ -604,7 +604,7 @@ public abstract class AbstractTraversableTest extends AbstractValueTest {\n \n     @Test\n     public void shouldFoldRightNonNil() {\n-        assertThat(of(\"a\", \"b\", \"c\").foldRight(\"\", (x, xs) -> x + xs)).isEqualTo(\"abc\");\n+        assertThat(of(\"a\", \"b\", \"c\").foldRight(\"!\", (x, xs) -> x + xs)).isEqualTo(\"abc!\");\n     }\n \n     // -- hasDefiniteSize\n",
        "1": "Add test to CharSeq",
        "2": "update test data",
        "3": "using different seed in foldLeft/foldRight tests to show the difference clearly",
        "4": "",
        "5": " Changed foldLeft and foldRight methods to use `!` instead of `` to avoid empty string concatenation.",
        "6": " Fix foldLeft and foldRight tests to use correct delimiter.",
        "7": "Change foldLeft and foldRight initial values in AbstractTraversableTest",
        "8": "Fix test error"
    },
    {
        "diff": "diff --git a/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/ListsTools.java b/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/ListsTools.java\nindex 9d5041238..91168293d 100644\n--- a/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/ListsTools.java\n+++ b/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/ListsTools.java\n@@ -184,7 +184,7 @@ public class ListsTools {\n                     return false; // no longer signed in\n                 }\n \n-                Lists.Get request = listsService.get().setLimit(LISTS_MAX_BATCH_SIZE);\n+                Lists.Get request = listsService.get();\n                 if (hasMergedLists) {\n                     request.setUpdatedSince(lastSyncTime);\n                 }\n",
        "1": "Use new AndroidUtils . executeOnPool .",
        "2": "Use the StatsHandler",
        "3": "Use server defined default limit for get lists batch size.",
        "4": "Use a single default id for lists .",
        "5": "Fix a bug in the ListsTools request .",
        "6": "Removed limit on batch size in ListsTools.java.",
        "7": " Remove limit parameter from Lists.Get request and update updatedSince parameter based on hasMergedLists flag.",
        "8": " Added check for signed in status in ListsTools."
    },
    {
        "diff": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\nindex 17f52ef..0723f8b 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java\n@@ -45,7 +45,7 @@ public class DeleteReturnRouteMessageClass extends ZWaveCommandProcessor {\n \t\tif(incomingMessage.getMessagePayloadByte(0) != 0x00) {\n \t\t\tlogger.debug(\"NODE {}: DeleteReturnRoute command in progress.\", nodeId);\n \t\t} else {\n-\t\t\tlogger.error(\"NODE {}: DeleteReturnRoute command failed.\");\n+\t\t\tlogger.error(\"NODE {}: DeleteReturnRoute command failed.\", nodeId);\n \t\t\tzController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,\n \t\t\t\t\tZWaveNetworkEvent.State.Failure));\n \t\t}\n",
        "1": "Fix error message in DeleteReturnRouteMessageClass",
        "2": "Fix logging message",
        "3": "Fix debugging message",
        "4": " Fixed bug in DeleteReturnRouteMessageClass to properly handle invalid messages (#17f52ef).",
        "5": " Fix logging to include node ID in error message for DeleteReturnRoute command.",
        "6": "Reduced logging level for error message",
        "7": "Fix logging error",
        "8": "Improve error msg"
    },
    {
        "diff": "diff --git a/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentActionResult.java b/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentActionResult.java\nindex 8bd916b22..eb0ae6bc0 100644\n--- a/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentActionResult.java\n+++ b/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentActionResult.java\n@@ -3,7 +3,7 @@ package org.wordpress.android.ui.comments;\n public class CommentActionResult {\n \n     public static final int COMMENT_ID_ON_ERRORS = -1;\n-    public static final int COMMENT_ID_UNKNOWN = -2;\n+    public static final int COMMENT_ID_UNKNOWN = -2; // This is used primarily for replies, when the commentID isn't known.\n \n     private long mCommentID = COMMENT_ID_UNKNOWN;\n     private String mMessage;\n",
        "1": "Restric the visibility of mCommentID and mMessage to private .",
        "2": "Add a default commentID to the comments",
        "3": " Update CommentActionResult.java to change COMMENT_ID_UNKNOWN comment ID from -2 to -2 for replies",
        "4": " Added constant for unknown comment ID (-2).",
        "5": "Updated edge ID used by default",
        "6": "Fixed a typo in the DeadLetterChannel",
        "7": "Add a comment that states when `COMMENT_ID_UNKNOWN` is used.",
        "8": "Updated CommentActionResult class with a comment explaining the use of COMMENT_ID_UNKNOWN for replies."
    },
    {
        "diff": "diff --git a/core/src/main/java/org/springframework/security/access/ConfigAttributeEditor.java b/core/src/main/java/org/springframework/security/access/ConfigAttributeEditor.java\nindex 727f5f0a6..8240ef78f 100644\n--- a/core/src/main/java/org/springframework/security/access/ConfigAttributeEditor.java\n+++ b/core/src/main/java/org/springframework/security/access/ConfigAttributeEditor.java\n@@ -26,6 +26,7 @@ import java.beans.PropertyEditorSupport;\n  * of hard-to-spot configuration issues for end users.\n  *\n  * @author Ben Alex\n+ * @deprecated\n  * @version $Id$\n  */\n public class ConfigAttributeEditor extends PropertyEditorSupport {\n",
        "1": " Added @deprecated annotation to ConfigAttributeEditor class",
        "2": "Deprecate this Interceptor",
        "3": "Fix checkstyle warning",
        "4": "Deprecate original contacts",
        "5": " Deprecated ConfigAttributeEditor class to help detect hard-to-spot configuration issues for end users.",
        "6": "Deprecate ConfigAttributeEditor class.",
        "7": "Tidied up Id tag .",
        "8": "deprecate property editor"
    },
    {
        "diff": "diff --git a/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java\nindex e277818..01f6196 100644\n--- a/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java\n+++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java\n@@ -21,6 +21,7 @@ package org.elasticsearch.index.query;\n \n import com.carrotsearch.randomizedtesting.generators.CodepointSetGenerator;\n import com.fasterxml.jackson.core.io.JsonStringEncoder;\n+\n import org.apache.lucene.search.Query;\n import org.elasticsearch.Version;\n import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;\n@@ -57,6 +58,7 @@ import org.elasticsearch.common.xcontent.XContentParser;\n import org.elasticsearch.env.Environment;\n import org.elasticsearch.env.EnvironmentModule;\n import org.elasticsearch.index.Index;\n+import org.elasticsearch.index.IndexSettings;\n import org.elasticsearch.index.analysis.AnalysisModule;\n import org.elasticsearch.index.cache.IndexCache;\n import org.elasticsearch.index.cache.bitset.BitsetFilterCache;\n",
        "1": " Add import statement for IndexSettings.",
        "2": "Remove unused imports from o / e / i / e / InternalEngine .",
        "3": "remove unused imports",
        "4": "Fix broken test",
        "5": "Add import for IndexSettings in AbstractQueryTestCase",
        "6": " Added import for org.elasticsearch.index.analysis.AnalysisModule in AbstractQueryTestCase.java",
        "7": "Add missing import",
        "8": "Fixed missing import"
    },
    {
        "diff": "diff --git a/src/main/java/com/xtremelabs/robolectric/shadows/ShadowCriteria.java b/src/main/java/com/xtremelabs/robolectric/shadows/ShadowCriteria.java\nindex 433c5df..0a2ffa4 100644\n--- a/src/main/java/com/xtremelabs/robolectric/shadows/ShadowCriteria.java\n+++ b/src/main/java/com/xtremelabs/robolectric/shadows/ShadowCriteria.java\n@@ -24,6 +24,7 @@ public class ShadowCriteria {\n         return accuracy;\n     }\n \n+    @Implementation\n     public void setAccuracy(int accuracy) {\n         this.accuracy = accuracy;\n     }\n",
        "1": " Added implementation for setAccuracy method",
        "2": "\"Added setAccuracy method to ShadowCriteria\"",
        "3": "add @ Override annotation",
        "4": "Add getOnFocusChangeListener to View",
        "5": "Added missing @Implementation annotation that was breaking the build",
        "6": "add missing Implementation annotation",
        "7": " Added setAccuracy method to ShadowCriteria class with @Implementation annotation.",
        "8": "put back deprecated methods"
    },
    {
        "diff": "diff --git a/jodd-madvoc/src/main/java/jodd/madvoc/WebApplication.java b/jodd-madvoc/src/main/java/jodd/madvoc/WebApplication.java\nindex 3f0af0cf..c32c36f7 100644\n--- a/jodd-madvoc/src/main/java/jodd/madvoc/WebApplication.java\n+++ b/jodd-madvoc/src/main/java/jodd/madvoc/WebApplication.java\n@@ -2,6 +2,7 @@\n \n package jodd.madvoc;\n \n+import jodd.madvoc.component.ActionMethodParamNameResolver;\n import jodd.madvoc.component.ActionPathMacroManager;\n import jodd.madvoc.component.ContextInjectorComponent;\n import jodd.madvoc.component.FiltersManager;\n@@ -155,6 +156,7 @@ public class WebApplication {\n \t\tlog.debug(\"Registering Madvoc components\");\n \n \t\tregisterComponent(ActionMethodParser.class);\n+\t\tregisterComponent(ActionMethodParamNameResolver.class);\n \t\tregisterComponent(ActionPathRewriter.class);\n \t\tregisterComponent(ActionPathMacroManager.class);\n \t\tregisterComponent(ActionsManager.class);\n",
        "1": "Protect the correct classname",
        "2": " Added import statement for ActionMethodParamNameResolver and registered it as a component in WebApplication.",
        "3": "fixed broken test",
        "4": "Removed logger , not used",
        "5": "Fixed missing madvoc",
        "6": "Add ActionMethodParamNameResolver to Madvoc components.",
        "7": " Added ActionMethodParamNameResolver component",
        "8": "register new component"
    },
    {
        "diff": "diff --git a/src/net/java/sip/communicator/impl/gui/main/MainFrame.java b/src/net/java/sip/communicator/impl/gui/main/MainFrame.java\nindex 366fe202e..b269432ac 100755\n--- a/src/net/java/sip/communicator/impl/gui/main/MainFrame.java\n+++ b/src/net/java/sip/communicator/impl/gui/main/MainFrame.java\n@@ -217,6 +217,10 @@ public class MainFrame extends JFrame {\n                     this.statusPanel.setSelectedStatus\n                         (protocolProvider.getProtocolName(), \n                                 Constants.ONLINE_STATUS);\n+                    \n+                    //request the focus int the contact list panel, which\n+                    //permits to search in the contact list\n+                    this.tabbedPane.getContactListPanel().getContactList().requestFocus();\n                         \n                 } catch (IllegalArgumentException e) {\n                     // TODO Auto-generated catch block\n",
        "1": "Don ' t show focus list when the contact list is not the contact list",
        "2": "Add focus request in contact list panel.",
        "3": " Added focus request to contact list panel in MainFrame.",
        "4": "Delete extra inline fields",
        "5": "request the focus in contact list when logged in",
        "6": "Main window is now getting all application properties from the application . properties file .",
        "7": "Add a comment about the bufferLock",
        "8": " Request focus on contact list panel for searching"
    },
    {
        "diff": "diff --git a/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java b/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java\nindex fcd2fd5..76fa422 100644\n--- a/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java\n+++ b/ReactAndroid/src/main/java/com/facebook/react/views/view/ReactViewGroup.java\n@@ -377,6 +377,12 @@ public class ReactViewGroup extends ViewGroup implements\n     return mPointerEvents;\n   }\n \n+  @Override\n+  protected void dispatchSetPressed(boolean pressed) {\n+    // Prevents the ViewGroup from dispatching the pressed state\n+    // to it's children.\n+  }\n+\n   /*package*/ void setPointerEvents(PointerEvents pointerEvents) {\n     mPointerEvents = pointerEvents;\n   }\n",
        "1": "Add missing dispatchSetPressed to ReactViewGroup ViewGroup",
        "2": " Fixed bug in ReactViewGroup to prevent incorrect pressed state dispatch to children",
        "3": "Fix TouchableNativeFeedback state propagating to children",
        "4": "Fix crash caused by accessibility being turned on and using a Modal",
        "5": "DO NOT MERGE Fix finalization",
        "6": "Prevent dispatching pressed state to children in ReactViewGroup.",
        "7": " Adds a custom dispatchSetPressed method to prevent ViewGroup from dispatching pressed state to its children.",
        "8": "Add changes to the warmUpLoop method"
    },
    {
        "diff": "diff --git a/querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java b/querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java\nindex f40cb93e4..d03e9152c 100644\n--- a/querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java\n+++ b/querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java\n@@ -702,7 +702,7 @@ public class GenericExporter {\n     }\n \n     /**\n-     * Set whether fields are handled (default true)\n+     * Set whether methods are handled (default true)\n      *\n      * @param b\n      */\n",
        "1": "Fix typo in ModelAndViewMethodReturnValueHandler",
        "2": "Update handling of methods in GenericExporter",
        "3": "added TODO comment",
        "4": "Fix typo in GenericExporter",
        "5": " Toggle handling of fields and methods in GenericExporter",
        "6": "Fix javadoc of setHandleMethods",
        "7": " Added option to handle methods in code generation",
        "8": "Fix typo in Javadocs"
    },
    {
        "diff": "diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java\nindex 6c4e1ce..d0e8b5e 100644\n--- a/services/java/com/android/server/SystemServer.java\n+++ b/services/java/com/android/server/SystemServer.java\n@@ -264,11 +264,7 @@ class ServerThread extends Thread {\n         } catch (Throwable e) {\n             reportWtf(\"making display ready\", e);\n         }\n- \n-        try {\n-            ActivityManagerNative.getDefault().showBootMessage(\"DEXOPT!\", true);\n-        } catch (RemoteException e) {\n-        }\n+\n         try {\n             pm.performBootDexOpt();\n         } catch (Throwable e) {\n",
        "1": "Remove unnecessary code for displaying boot message.",
        "2": "Use scaled display size in wallpaper constraint .",
        "3": "Remove unnecessary code",
        "4": " Fix issue with SystemServer.java by removing unnecessary code and updating pm.performBootDexOpt();",
        "5": "Whoops, remove this.",
        "6": " Added performBootDexOpt() method to handle dex optimization during boot.",
        "7": "Remove unused code .",
        "8": "Remove unnecessary code"
    },
    {
        "diff": "diff --git a/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngineService.java b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngineService.java\nindex d773d5a..a7f9392 100644\n--- a/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngineService.java\n+++ b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngineService.java\n@@ -45,6 +45,7 @@ import org.elasticsearch.script.SearchScript;\n import org.elasticsearch.search.MultiValueMode;\n import org.elasticsearch.search.lookup.SearchLookup;\n \n+import java.security.AccessControlContext;\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n import java.text.ParseException;\n@@ -104,13 +105,15 @@ public class ExpressionScriptEngineService extends AbstractComponent implements\n             @Override\n             public Expression run() {\n                 try {\n+                    // snapshot our context here, we check on behalf of the expression\n+                    AccessControlContext engineContext = AccessController.getContext();\n                     ClassLoader loader = getClass().getClassLoader();\n                     if (sm != null) {\n                         loader = new ClassLoader(loader) {\n                             @Override\n                             protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n                                 try {\n-                                    sm.checkPermission(new ClassPermission(name));\n+                                    engineContext.checkPermission(new ClassPermission(name));\n                                 } catch (SecurityException e) {\n                                     throw new ClassNotFoundException(name, e);\n                                 }\n",
        "1": "do expressions consistently with other engines",
        "2": " Added security check for class loading in ExpressionScriptEngineService",
        "3": "River throws exception if it cannot find admin db",
        "4": "Fix expression of expression",
        "5": "Add security check for loading classes in ExpressionScriptEngineService",
        "6": "add default index name to the LagartoException .",
        "7": "Fix StorageProxy # syncWriteToBatchlog ( )",
        "8": " Add import statement for AccessControlContext and modify code to use it to check permissions."
    },
    {
        "diff": "diff --git a/platform/platform-impl/src/com/intellij/diagnostic/PerformanceWatcher.java b/platform/platform-impl/src/com/intellij/diagnostic/PerformanceWatcher.java\nindex 9db0844..bf42e2d 100644\n--- a/platform/platform-impl/src/com/intellij/diagnostic/PerformanceWatcher.java\n+++ b/platform/platform-impl/src/com/intellij/diagnostic/PerformanceWatcher.java\n@@ -121,7 +121,7 @@ public class PerformanceWatcher implements ApplicationComponent {\n   }\n \n   private static void deleteOldThreadDumps() {\n-    File allLogsDir = new File(PathManager.getSystemPath(), \"log\");\n+    File allLogsDir = new File(PathManager.getLogPath());\n     if (allLogsDir.isDirectory()) {\n       final String[] dirs = allLogsDir.list(new FilenameFilter() {\n         public boolean accept(final File dir, final String name) {\n",
        "1": " Update PathManager.getSystemPath() to PathManager.getLogPath() in PerformanceWatcher.deleteOldThreadDumps()",
        "2": "remove unnecessary code",
        "3": "make isRetina class work in Python name configurable",
        "4": "do not visit output path when searching for the root of install",
        "5": "use correct log path when deleting old thread dumps",
        "6": "disable the test",
        "7": "Refactor deleteOldThreadDumps() method to use PathManager.getLogPath() instead of PathManager.getSystemPath() for retrieving the log directory.",
        "8": " Fixed issue with deleting old thread dumps by updating the log path."
    },
    {
        "diff": "diff --git a/modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java b/modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java\nindex 40455be..6044de6 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java\n@@ -50,7 +50,7 @@ public class HeartbeatInterceptor extends AtmosphereInterceptorAdapter {\n     private static final Logger logger = LoggerFactory.getLogger(HeartbeatInterceptor.class);\n     private ScheduledExecutorService heartBeat;\n     private static String paddingText;\n-    private int heartbeatFrequencyInSeconds = 5;\n+    private int heartbeatFrequencyInSeconds = 30;\n \n     static {\n         StringBuffer whitespace = new StringBuffer();\n",
        "1": "Increase the timeout for launching .",
        "2": "Fix bug in HeartbeatInterceptor",
        "3": "Do not associate a heartbeat with a websocket message",
        "4": "Change heartbeat frequency from 5 seconds to 30 seconds.",
        "5": " Increase heartbeat frequency from 5 seconds to 30 seconds.",
        "6": "Reset the timeout to the original value",
        "7": " Fixed heartbeat frequency to 30 seconds.",
        "8": "Fix the build"
    },
    {
        "diff": "diff --git a/core/src/main/java/com/orientechnologies/orient/core/record/impl/ORecordBytes.java b/core/src/main/java/com/orientechnologies/orient/core/record/impl/ORecordBytes.java\nindex bbc5257..b4ac6cc 100644\n--- a/core/src/main/java/com/orientechnologies/orient/core/record/impl/ORecordBytes.java\n+++ b/core/src/main/java/com/orientechnologies/orient/core/record/impl/ORecordBytes.java\n@@ -44,6 +44,10 @@ public class ORecordBytes extends ORecordAbstract<byte[]> {\n \t\tsetup();\r\n \t}\r\n \r\n+\tpublic ORecordBytes(final ODatabaseRecord iDatabase) {\r\n+\t\tODatabaseRecordThreadLocal.INSTANCE.set(iDatabase);\r\n+\t}\r\n+\r\n \tpublic ORecordBytes(final ODatabaseRecord iDatabase, byte[] iSource) {\r\n \t\tthis(iSource);\r\n \t\tODatabaseRecordThreadLocal.INSTANCE.set(iDatabase);\r\n",
        "1": "Add constructor to set the database in ORecordBytes class.",
        "2": "Improved constructor coverage .",
        "3": " Added constructor for ORecordBytes to accept an ODatabaseRecord argument.",
        "4": "removed places where db instance was not required.",
        "5": "Fixed bug avoiding to load the record on ORecord . getVersion ( )",
        "6": "added missing iDatabase to the record",
        "7": " Added constructor for ORecordBytes that takes an ODatabaseRecord as parameter, allowing for proper initialization of the record in a multi-threaded environment.",
        "8": "Fixed issue in remote enum"
    },
    {
        "diff": "diff --git a/factory/src/test/resources/expected/CustomNamedFactory.java b/factory/src/test/resources/expected/CustomNamedFactory.java\nindex 3774a62..6682c81 100644\n--- a/factory/src/test/resources/expected/CustomNamedFactory.java\n+++ b/factory/src/test/resources/expected/CustomNamedFactory.java\n@@ -25,7 +25,7 @@ import javax.inject.Inject;\n final class CustomNamedFactory {\n   @Inject CustomNamedFactory() {}\n \n-  SimpleClass create() {\n-    return new SimpleClass();\n+  SimpleClassCustomName create() {\n+    return new SimpleClassCustomName();\n   }\n }\ndiff --git a/factory/src/test/resources/good/SimpleClassCustomName.java b/factory/src/test/resources/good/SimpleClassCustomName.java\nindex cf713ca..25b7c30 100644\n--- a/factory/src/test/resources/good/SimpleClassCustomName.java\n+++ b/factory/src/test/resources/good/SimpleClassCustomName.java\n@@ -18,4 +18,4 @@ package tests;\n import com.google.auto.factory.AutoFactory;\n \n @AutoFactory(className = \"CustomNamedFactory\")\n-final class SimpleClass {}\n+final class SimpleClassCustomName {}\n",
        "1": " Renamed 'SimpleClass' to 'SimpleClassCustomName' in CustomNamedFactory and updated AutoFactory annotation to reflect the change.",
        "2": "threadsName should return a problem request name",
        "3": " Added custom named factory class with new name",
        "4": "added suppression test and removed extra space",
        "5": "Fix test in CustomNamedFactory",
        "6": "do not completion for wrong files",
        "7": "Fix name of a test data class",
        "8": "Refactor create method in CustomNamedFactory to return SimpleClassCustomName instead of SimpleClass"
    },
    {
        "diff": "diff --git a/platform/lang-impl/src/com/intellij/execution/console/LanguageConsoleImpl.java b/platform/lang-impl/src/com/intellij/execution/console/LanguageConsoleImpl.java\nindex c2e2ec5..3aa897f 100644\n--- a/platform/lang-impl/src/com/intellij/execution/console/LanguageConsoleImpl.java\n+++ b/platform/lang-impl/src/com/intellij/execution/console/LanguageConsoleImpl.java\n@@ -230,6 +230,7 @@ public class LanguageConsoleImpl implements Disposable, TypeSafeDataProvider {\n     myHistoryViewer.getComponent().setPreferredSize(new Dimension(0, 0));\n     myHistoryViewer.setCaretEnabled(false);\n \n+    myConsoleEditor.setHorizontalScrollbarVisible(true);\n     myConsoleEditor.addEditorMouseListener(EditorActionUtil.createEditorPopupHandler(IdeActions.GROUP_CONSOLE_EDITOR_POPUP));\n     myConsoleEditor.setHighlighter(EditorHighlighterFactory.getInstance().createEditorHighlighter(myVirtualFile, myConsoleEditor.getColorsScheme(), myProject));\n \n",
        "1": "Add horizontal scrollbar to console editor.",
        "2": " Added option to show horizontal scrollbar in LanguageConsoleImpl.",
        "3": "add getLanguage ( ) method",
        "4": "some still make use of the horizontal scrollbar from time to time",
        "5": " Added horizontal scrollbar to console editor.",
        "6": "Add missing setExecutor ( ) for later",
        "7": "Fix broken tests",
        "8": "do not show console in console"
    },
    {
        "diff": "diff --git a/core/src/main/java/tachyon/client/TachyonFile.java b/core/src/main/java/tachyon/client/TachyonFile.java\nindex 4eeb50b..af4a55b 100644\n--- a/core/src/main/java/tachyon/client/TachyonFile.java\n+++ b/core/src/main/java/tachyon/client/TachyonFile.java\n@@ -92,16 +92,6 @@ public class TachyonFile implements Comparable<TachyonFile> {\n   }\n \n   /**\n-   * Return the under filesystem path in the under file system of this file\n-   *\n-   * @return the under filesystem path\n-   * @throws IOException\n-   */\n-  String getUfsPath() throws IOException {\n-    return TFS.getUfsPath(FID);\n-  }\n-\n-  /**\n    * Return the creation time of this file\n    *\n    * @return the creation time, in milliseconds\n@@ -228,6 +218,16 @@ public class TachyonFile implements Comparable<TachyonFile> {\n     return mUFSConf;\n   }\n \n+  /**\n+   * Return the under filesystem path in the under file system of this file\n+   *\n+   * @return the under filesystem path\n+   * @throws IOException\n+   */\n+  String getUfsPath() throws IOException {\n+    return TFS.getUfsPath(FID);\n+  }\n+\n   @Override\n   public int hashCode() {\n     return getPath().hashCode() ^ 1234321;\n",
        "1": "Add a method to the TachyonFile",
        "2": "Only run in - core delegate ( ) and wasNotDeleted ( ) .",
        "3": "Add method to return the exact type in new response handler",
        "4": " Added getUfsPath() method in TachyonFile class",
        "5": "[ SMALLFIX ] Add back a method required",
        "6": " Added getUfsPath method to TachyonFile class to return the under filesystem path",
        "7": "Move the getUfsPath() method to a different location in the TachyonFile class",
        "8": "Fixing merge issue"
    },
    {
        "diff": "diff --git a/src/java/org/jivesoftware/wildfire/commands/admin/GetListActiveUsers.java b/src/java/org/jivesoftware/wildfire/commands/admin/GetListActiveUsers.java\nindex 2d2e055c4..dbd897aa9 100644\n--- a/src/java/org/jivesoftware/wildfire/commands/admin/GetListActiveUsers.java\n+++ b/src/java/org/jivesoftware/wildfire/commands/admin/GetListActiveUsers.java\n@@ -75,7 +75,6 @@ public class GetListActiveUsers extends AdHocCommand {\n         field.addValue(\"http://jabber.org/protocol/admin\");\n \n         field = form.addField();\n-        field.setType(FormField.Type.jid_single);\n         field.setLabel(\"The list of active users\");\n         field.setVariable(\"activeuserjids\");\n \n",
        "1": "Removed an unused variable .",
        "2": " Fixed formatting issues in GetListActiveUsers.java",
        "3": "Remove unnecessary field .",
        "4": "Fixed the limit of the Netty in the PostMultipart example .",
        "5": "Added field type to field that returns list of jids .",
        "6": " Remove unnecessary line break in GetListActiveUsers.java.",
        "7": "Remove unused code for GetListActiveUsers command",
        "8": "Removed field type from result."
    },
    {
        "diff": "diff --git a/app/src/main/java/com/example/android/sunshine/app/ForecastFragment.java b/app/src/main/java/com/example/android/sunshine/app/ForecastFragment.java\nindex 3ae18a0..6fa3fbc 100644\n--- a/app/src/main/java/com/example/android/sunshine/app/ForecastFragment.java\n+++ b/app/src/main/java/com/example/android/sunshine/app/ForecastFragment.java\n@@ -211,10 +211,6 @@ public class ForecastFragment extends Fragment {\n                 highAndLow = formatHighLows(high, low);\n                 resultStrs[i] = day + \" - \" + description + \" - \" + highAndLow;\n             }\n-\n-            for (String s : resultStrs) {\n-                Log.v(LOG_TAG, \"Forecast entry: \" + s);\n-            }\n             return resultStrs;\n \n         }\n@@ -258,8 +254,6 @@ public class ForecastFragment extends Fragment {\n \n                 URL url = new URL(builtUri.toString());\n \n-                Log.v(LOG_TAG, \"Built URI \" + builtUri.toString());\n-\n                 // Create the request to OpenWeatherMap, and open the connection\n                 urlConnection = (HttpURLConnection) url.openConnection();\n                 urlConnection.setRequestMethod(\"GET\");\n@@ -287,8 +281,6 @@ public class ForecastFragment extends Fragment {\n                     return null;\n                 }\n                 forecastJsonStr = buffer.toString();\n-\n-                Log.v(LOG_TAG, \"Forecast string: \" + forecastJsonStr);\n             } catch (IOException e) {\n                 Log.e(LOG_TAG, \"Error \", e);\n                 // If the code didn't successfully get the weather data, there's no point in attemping\n",
        "1": "remove a useless focus handler",
        "2": "Remove seemingly debug code .",
        "3": "Remove debug logging",
        "4": "Remove unused log",
        "5": " Fixed formatting issues in ForecastFragment.java",
        "6": "Remove logging statements in ForecastFragment",
        "7": " Commit message: Remove unnecessary Log.v statements to reduce verbosity.",
        "8": "remove verbose logging statements"
    },
    {
        "diff": "diff --git a/liquibase-maven-plugin/src/main/java/org/liquibase/maven/plugins/LiquibaseGenerateChangeLogMojo.java b/liquibase-maven-plugin/src/main/java/org/liquibase/maven/plugins/LiquibaseGenerateChangeLogMojo.java\nindex ab0ca130b..c9a82b91e 100644\n--- a/liquibase-maven-plugin/src/main/java/org/liquibase/maven/plugins/LiquibaseGenerateChangeLogMojo.java\n+++ b/liquibase-maven-plugin/src/main/java/org/liquibase/maven/plugins/LiquibaseGenerateChangeLogMojo.java\n@@ -83,7 +83,7 @@ public class LiquibaseGenerateChangeLogMojo extends\n         getLog().info(\"Generating Change Log from database \" + database.toString());\n         try {\n             CommandLineUtils.doGenerateChangeLog(outputChangeLogFile, database, defaultCatalogName, defaultSchemaName, StringUtils.trimToNull(diffTypes),\n-                    StringUtils.trimToNull(changeSetAuthor), StringUtils.trimToNull(changeSetContext), StringUtils.trimToNull(dataDir), new DiffOutputControl());\n+                    StringUtils.trimToNull(changeSetAuthor), StringUtils.trimToNull(changeSetContext), StringUtils.trimToNull(dataDir), new DiffOutputControl(outputDefaultCatalog, outputDefaultSchema, true));\n             getLog().info(\"Output written to Change Log file, \" + outputChangeLogFile);\n         }\n         catch (IOException e) {\n",
        "1": " Generated Change Log file with updated schema and data.",
        "2": " Modified LiquibaseGenerateChangeLogMojo to use new DiffOutputControl with outputDefaultCatalog, outputDefaultSchema, and true parameters.",
        "3": "generateChangeLog in maven now respects the outputDefaultCatalog and outputDefaultSchema properties",
        "4": "changed SubversionHistoryParser to disable / hide inputs to work",
        "5": "Set system properties earlier",
        "6": "Fix NPE in LiquibaseGenerateChangeLogMojo",
        "7": "Fix output issue in LiquibaseGenerateChangeLogMojo",
        "8": "Fix maven test"
    },
    {
        "diff": "diff --git a/server/src/main/java/io/druid/server/coordinator/DruidCoordinator.java b/server/src/main/java/io/druid/server/coordinator/DruidCoordinator.java\nindex 0ae1818..83eac0b 100644\n--- a/server/src/main/java/io/druid/server/coordinator/DruidCoordinator.java\n+++ b/server/src/main/java/io/druid/server/coordinator/DruidCoordinator.java\n@@ -554,8 +554,9 @@ public class DruidCoordinator\n         }\n         loadManagementPeons.clear();\n \n-        databaseSegmentManager.stop();\n         serverInventoryView.stop();\n+        databaseRuleManager.stop();\n+        databaseSegmentManager.stop();\n         leader = false;\n       }\n       catch (Exception e) {\n",
        "1": "fix unnecessary error messages",
        "2": "Fix NPE in DruidCoordinator",
        "3": " Stopped databaseSegmentManager and databaseRuleManager, and updated stop() method to clear loadManagementPeons.",
        "4": "Stop database rule manager and segment manager in DruidCoordinator's stop method.",
        "5": "Fix UI - to db leak ( hopefully ) .",
        "6": " Fixed bug in databaseSegmentManager.stop() method",
        "7": "Stop databaseRuleManager in stopBeingLeader",
        "8": "stop the server thread pool before shutdown"
    },
    {
        "diff": "diff --git a/src/main/java/com/google/devtools/build/lib/syntax/FuncallExpression.java b/src/main/java/com/google/devtools/build/lib/syntax/FuncallExpression.java\nindex e24d97f..a5190a6 100644\n--- a/src/main/java/com/google/devtools/build/lib/syntax/FuncallExpression.java\n+++ b/src/main/java/com/google/devtools/build/lib/syntax/FuncallExpression.java\n@@ -533,7 +533,9 @@ public final class FuncallExpression extends Expression {\n \n   @Override\n   SkylarkType validate(ValidationEnvironment env) throws EvalException {\n-    // TODO(bazel-team): implement semantical check.\n+    for (Argument arg : args) {\n+      arg.getValue().validate(env);\n+    }\n \n     if (obj != null) {\n       // TODO(bazel-team): validate function calls on objects too.\ndiff --git a/src/main/java/com/google/devtools/build/lib/syntax/SkylarkFunction.java b/src/main/java/com/google/devtools/build/lib/syntax/SkylarkFunction.java\nindex 3af91f1..11f1877 100644\n--- a/src/main/java/com/google/devtools/build/lib/syntax/SkylarkFunction.java\n+++ b/src/main/java/com/google/devtools/build/lib/syntax/SkylarkFunction.java\n@@ -13,7 +13,6 @@\n // limitations under the License.\n package com.google.devtools.build.lib.syntax;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n@@ -52,7 +51,6 @@ public abstract class SkylarkFunction extends AbstractFunction {\n   /**\n    * Configures the parameter of this Skylark function using the annotation.\n    */\n-  @VisibleForTesting\n   public void configure(SkylarkBuiltin annotation) {\n     Preconditions.checkState(!configured);\n     Preconditions.checkArgument(getName().equals(annotation.name()),\n",
        "1": "Include the message that checks for build only like debug level .",
        "2": "Fix crash on deserializing INTEGER_LIST attributes in packages .",
        "3": " Fixed semantical check for function calls on objects.",
        "4": " Implement semantical check for function calls and validate function calls on objects",
        "5": "Remove temporary comments from CapsExtension",
        "6": "Validate function arguments.",
        "7": "Remove unnecessary TODO",
        "8": "Implement semantical check in FuncallExpression and remove unused code in SkylarkFunction."
    },
    {
        "diff": "diff --git a/jme3-bullet/src/common/java/com/jme3/bullet/control/CharacterControl.java b/jme3-bullet/src/common/java/com/jme3/bullet/control/CharacterControl.java\nindex becdc7914..d521dbec7 100644\n--- a/jme3-bullet/src/common/java/com/jme3/bullet/control/CharacterControl.java\n+++ b/jme3-bullet/src/common/java/com/jme3/bullet/control/CharacterControl.java\n@@ -47,10 +47,9 @@ import com.jme3.scene.control.Control;\n import java.io.IOException;\n \n /**\n- * @deprecated in favor of <code>BetterCharacterControl</code>\n+ * You might want to try <code>BetterCharacterControl</code> as well.\n  * @author normenhansen\n  */\n-@Deprecated\n public class CharacterControl extends PhysicsCharacter implements PhysicsControl {\n \n     protected Spatial spatial;\n",
        "1": " Update CharacterControl.java to recommend using BetterCharacterControl and remove deprecation",
        "2": "remove deprecation of CharacterControl",
        "3": "removed unnecessary code",
        "4": "Deprecate CharacterControl in favor of BetterCharacterControl and suggest its usage.",
        "5": "removing author tag",
        "6": " Added BetterCharacterControl as an alternative to deprecated class",
        "7": "Missing getHeight present on jbullet",
        "8": "Remove unused Deprecated"
    },
    {
        "diff": "diff --git a/hazelcast/src/main/java/com/hazelcast/cluster/MulticastService.java b/hazelcast/src/main/java/com/hazelcast/cluster/MulticastService.java\nindex b4342a3d7d..e4adf6d4a7 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cluster/MulticastService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cluster/MulticastService.java\n@@ -147,7 +147,8 @@ public class MulticastService implements Runnable {\n                 final byte packetVersion = input.readByte();\n                 if (packetVersion != Packet.VERSION) {\n                     logger.warning(\"Received a JoinRequest with a different packet version! This -> \"\n-                            + Packet.VERSION + \", Incoming -> \" + packetVersion);\n+                            + Packet.VERSION + \", Incoming -> \" + packetVersion\n+                            + \", Sender -> \" + datagramPacketReceive.getAddress());\n                     return null;\n                 }\n                 try {\n",
        "1": "Add logging of sender address in case of different packet version in JoinRequest.",
        "2": "Fixed bug in MulticastService",
        "3": " Fix warning message for JoinRequest packets with different versions.",
        "4": "Fixed ClusterImpl writePacket .",
        "5": "Add sender's address to warning on JoinRequest to be able to identify it.",
        "6": "added typo in the logs",
        "7": " Fixed warning message for different packet version in JoinRequest.",
        "8": "Added destination name to command line ."
    },
    {
        "diff": "diff --git a/src/org/bukkit/plugin/SimplePluginManager.java b/src/org/bukkit/plugin/SimplePluginManager.java\nindex cc696f61..eef3f8ef 100644\n--- a/src/org/bukkit/plugin/SimplePluginManager.java\n+++ b/src/org/bukkit/plugin/SimplePluginManager.java\n@@ -194,7 +194,7 @@ public final class SimplePluginManager implements PluginManager {\n         List<RegisteredListener> eventListeners = listeners.get(type);\n         int position = 0;\n \n-        if (listeners != null) {\n+        if (eventListeners != null) {\n             for (RegisteredListener registration : eventListeners) {\n                 if (registration.getPriority().compareTo(priority) < 0) {\n                     break;\n",
        "1": "Fixed a potential null pointer exception",
        "2": "Fix null pointer exception in SimplePluginManager",
        "3": " Fix bug in SimplePluginManager by changing `listeners` to `eventListeners` in a conditional statement.",
        "4": "removed unnecessary null check",
        "5": "fixed an issue in the AnnotationDirectoryItem construction ( was checking the wrong objects - automated refactoring flub most likely )",
        "6": "Fix NPE in SimplePluginManager .",
        "7": " Moved listeners to a new array to improve performance.",
        "8": "Fixed another nullcheck in pluginmanager"
    },
    {
        "diff": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\nindex 68baf7f..9c057cc 100644\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/FeatureMethodLifecycleIssueTestSuite.java\n@@ -19,6 +19,7 @@ package org.springframework.context.annotation.configuration;\n import org.junit.runner.RunWith;\n import org.junit.runners.Suite;\n import org.junit.runners.Suite.SuiteClasses;\n+\n import org.springframework.context.annotation.FeatureMethodEarlyBeanProxyTests;\n \n /**\n@@ -29,7 +30,7 @@ import org.springframework.context.annotation.FeatureMethodEarlyBeanProxyTests;\n @RunWith(Suite.class)\n @SuiteClasses({\n \tFeatureMethodEarlyBeanProxyTests.class,\n-\tConfigurationClassWithPlaceholderConfigurerBeanTests.class,\n+\tConfigurationClassWithPlaceholderConfigurerBeanTests.class\n })\n public class FeatureMethodLifecycleIssueTestSuite {\n \n",
        "1": "Fix formatting issue in FeatureMethodLifecycleIssueTestSuite",
        "2": "Fix test error",
        "3": " Added FeatureMethodEarlyBeanProxyTests to suite class.",
        "4": " Added test class for FeatureMethodEarlyBeanProxyTests",
        "5": "Fixing compilation error with javac.",
        "6": "removed unused class",
        "7": "Enable DaggerProvidesNull in alphabetical result .",
        "8": "Removed unnecessary declaration of @ TestExecutionListeners ."
    },
    {
        "diff": "diff --git a/core/src/main/java/com/google/bitcoin/core/Wallet.java b/core/src/main/java/com/google/bitcoin/core/Wallet.java\nindex 1276ab7c..9311b309 100644\n--- a/core/src/main/java/com/google/bitcoin/core/Wallet.java\n+++ b/core/src/main/java/com/google/bitcoin/core/Wallet.java\n@@ -741,7 +741,7 @@ public class Wallet implements Serializable, BlockChainListener, PeerFilterProvi\n                 }\n             }\n         }\n-        if (takeAction) {\n+        if (takeAction && !doubleSpentTxns.isEmpty()) {\n             killTx(tx, doubleSpentTxns);\n         }\n         return !doubleSpentTxns.isEmpty();\n",
        "1": "don ' t save wallet and invoke event listeners when adding watched scripts if the call was a no - op .",
        "2": " Fix for double-spending issue: added check for non-empty doubleSpentTxns before killing transaction.",
        "3": "don't call killTx if it has no work to do, cleans up a misleading log line.",
        "4": "Fix a bug where channelInactive ( ) is not triggered for local transport .",
        "5": "Handle possible wakeup stack trace ( Gopal V via Ashutosh Chauhan )",
        "6": " Added check for double-spent transactions in Wallet.java",
        "7": "Fix double spending bug in Wallet.java",
        "8": "Fix a bug where the doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & a doubleSpentTxns & ."
    },
    {
        "diff": "diff --git a/test/src/edu/stanford/nlp/trees/QPTreeTransformerTest.java b/test/src/edu/stanford/nlp/trees/QPTreeTransformerTest.java\nindex 7442584..a24c52e 100644\n--- a/test/src/edu/stanford/nlp/trees/QPTreeTransformerTest.java\n+++ b/test/src/edu/stanford/nlp/trees/QPTreeTransformerTest.java\n@@ -35,14 +35,16 @@ public class QPTreeTransformerTest extends TestCase {\n   public void outputResults(String input, String output) {\n     Tree inputTree = Tree.valueOf(input);\n     System.err.println(inputTree);\n-    Tree outputTree = QPTreeTransformer.QPtransform(inputTree);\n+    QPTreeTransformer qp = new QPTreeTransformer();\n+    Tree outputTree = qp.QPtransform(inputTree);\n     System.err.println(outputTree);\n     System.err.println(output);\n   }\n \n   public void runTest(String input, String output) {\n     Tree inputTree = Tree.valueOf(input);\n-    Tree outputTree = QPTreeTransformer.QPtransform(inputTree);\n+    QPTreeTransformer qp = new QPTreeTransformer();\n+    Tree outputTree = qp.QPtransform(inputTree);\n     assertEquals(output, outputTree.toString());\n   }\n }\n",
        "1": "Fix last commit.",
        "2": "Fix test for Windows",
        "3": "Refactored QPTreeTransformerTest to use an instance of QPTreeTransformer instead of calling static methods.",
        "4": " Refactor QPTreeTransformerTest to use a newly created QPTreeTransformer instance for QP transformation.",
        "5": "Fix Tree . dominates to match the documentation",
        "6": "Fix test build",
        "7": " Changed how QPtransform is implemented to use a new QPTreeTransformer object instead of the static QPTreeTransformer.valueOf method.",
        "8": "Fix a hang in static var files"
    },
    {
        "diff": "diff --git a/OsmAnd/src/net/osmand/plus/download/LocalIndexesFragment.java b/OsmAnd/src/net/osmand/plus/download/LocalIndexesFragment.java\nindex eecbb89880..2b830af740 100644\n--- a/OsmAnd/src/net/osmand/plus/download/LocalIndexesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/download/LocalIndexesFragment.java\n@@ -268,9 +268,10 @@ public class LocalIndexesFragment extends OsmandExpandableListFragment {\n \t\tprotected void onPostExecute(List<LocalIndexInfo> result) {\n \t\t\tthis.result = result;\n \t\t\tlistAdapter.sortData();\n-\t\t\t\n-\t\t\tgetDownloadActivity().setSupportProgressBarIndeterminateVisibility(false);\n-\t\t\tgetDownloadActivity().setLocalIndexInfos(result);\n+\t\t\tif (getDownloadActivity() != null){\n+\t\t\t\tgetDownloadActivity().setSupportProgressBarIndeterminateVisibility(false);\n+\t\t\t\tgetDownloadActivity().setLocalIndexInfos(result);\n+\t\t\t}\n \t\t}\n \n \t\tpublic List<LocalIndexInfo> getResult() {\n",
        "1": "Fixed NPE in localIndexFragment in onPostExecute",
        "2": "Fix NPE in LocalIndexesFragment",
        "3": "Fixed bug when after deleting something in localindex - adapter was recreated and all open categories was closed",
        "4": "Updated try check",
        "5": "Fixing another weird issue",
        "6": " Fixed indeterminate progress bar visibility in LocalIndexesFragment.",
        "7": " Fix for issue #12345: Changed LocalIndexesFragment to properly handle progress bar visibility and local index info updating when download activity is null.",
        "8": "Fix null pointer exception in LocalIndexesFragment"
    },
    {
        "diff": "diff --git a/languagetool-core/src/test/java/org/languagetool/tagging/disambiguation/rules/DisambiguationRuleTest.java b/languagetool-core/src/test/java/org/languagetool/tagging/disambiguation/rules/DisambiguationRuleTest.java\nindex 16df112035..af65646c1e 100644\n--- a/languagetool-core/src/test/java/org/languagetool/tagging/disambiguation/rules/DisambiguationRuleTest.java\n+++ b/languagetool-core/src/test/java/org/languagetool/tagging/disambiguation/rules/DisambiguationRuleTest.java\n@@ -199,7 +199,7 @@ public class DisambiguationRuleTest {\n   }\n \n   // useful for testing the rule cascade\n-  private static AnalyzedSentence disambiguateUntil(\n+  protected AnalyzedSentence disambiguateUntil(\n       List<DisambiguationPatternRule> rules, String ruleID,\n       AnalyzedSentence sentence) throws IOException {\n     AnalyzedSentence disambiguated = sentence;\n",
        "1": "AnalyzedSentence test for AnalyzedSentence",
        "2": "Refactor DisambiguationRuleTest.java: Change access modifier of disambiguateUntil() method.",
        "3": " Modified DisambiguationRuleTest to use protected method disambiguateUntil for testing rule cascade.",
        "4": " Fixed bug in disambiguation rule implementation",
        "5": "make test for default",
        "6": "removed unifiedTokens - field because it ' s already defined by the parent class",
        "7": "expose disambiguateUntil for subclases so we can roll-up disambiguations",
        "8": "renamed myMethod - > log statement ; from unit tests"
    },
    {
        "diff": "diff --git a/platform/dvcs-impl/src/com/intellij/dvcs/DvcsCommitAdditionalComponent.java b/platform/dvcs-impl/src/com/intellij/dvcs/DvcsCommitAdditionalComponent.java\nindex fdc3432..3e69dc3 100644\n--- a/platform/dvcs-impl/src/com/intellij/dvcs/DvcsCommitAdditionalComponent.java\n+++ b/platform/dvcs-impl/src/com/intellij/dvcs/DvcsCommitAdditionalComponent.java\n@@ -141,7 +141,7 @@ public abstract class DvcsCommitAdditionalComponent implements RefreshableOnComp\n   }\n \n   private void substituteCommitMessage(@NotNull String newMessage) {\n-    if (!myPreviousMessage.trim().equals(newMessage.trim())) {\n+    if (!StringUtil.equalsIgnoreWhitespaces(myPreviousMessage, newMessage)) {\n       VcsConfiguration.getInstance(myCheckinPanel.getProject()).saveCommitMessage(myPreviousMessage);\n       myCheckinPanel.setCommitMessage(newMessage);\n     }\n",
        "1": "do not show exception in the substituteCommitMessage",
        "2": " Changed how commit message is substituted to preserve previous message.",
        "3": "[ vcs - log ] ignore lines",
        "4": "[ diff - log ] Don ' t create preselected repositories if there is only one",
        "5": "Refactored commit message comparison to ignore whitespace differences.",
        "6": " Fix for issue with trimming leading and trailing whitespaces in commit message.",
        "7": "simplify ignore-whitespace comparison, and fix NPE warning",
        "8": "don ' t add \\ n to the commit message"
    },
    {
        "diff": "diff --git a/accumulo/src/test/java/com/yahoo/ycsb/db/accumulo/AccumuloTest.java b/accumulo/src/test/java/com/yahoo/ycsb/db/accumulo/AccumuloTest.java\nindex ce0b160..00fd02e 100644\n--- a/accumulo/src/test/java/com/yahoo/ycsb/db/accumulo/AccumuloTest.java\n+++ b/accumulo/src/test/java/com/yahoo/ycsb/db/accumulo/AccumuloTest.java\n@@ -21,7 +21,6 @@ package com.yahoo.ycsb.db.accumulo;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n \n import java.util.Map.Entry;\n import java.util.Properties;\n@@ -71,16 +70,8 @@ public class AccumuloTest {\n   private DB client;\n   private Properties workloadProps;\n \n-  private static boolean isWindows() {\n-    final String os = System.getProperty(\"os.name\");\n-    return os.startsWith(\"Windows\");\n-  }\n-\n   @BeforeClass\n   public static void setup() throws Exception {\n-    // Minicluster setup fails on Windows with an UnsatisfiedLinkError.\n-    // Skip if windows.\n-    assumeTrue(!isWindows());\n     cluster = new MiniAccumuloCluster(workingDir.newFolder(\"accumulo\").getAbsoluteFile(), \"protectyaneck\");\n     LOG.debug(\"starting minicluster\");\n     cluster.start();\n",
        "1": "Revert \"[accumulo] don't run Accumulo tests on windows build.\"",
        "2": "Removed unused field",
        "3": "Removed some unused code",
        "4": "Removing test that fails intermittently enough to be noise and not useful .",
        "5": "Remove unused code and assumptions in AccumuloTest",
        "6": " Fix Windows-related issues in AccumuloTest.",
        "7": " Changed the `assertTrue` method to `assertEquals`.",
        "8": "Remove unnecessary code"
    },
    {
        "diff": "diff --git a/src/main/java/io/vertx/core/package-info.java b/src/main/java/io/vertx/core/package-info.java\nindex 1d11e4d..89e5fac 100644\n--- a/src/main/java/io/vertx/core/package-info.java\n+++ b/src/main/java/io/vertx/core/package-info.java\n@@ -333,9 +333,9 @@\n  *\n  * To use this model, you write your code as set of *verticles*.\n  *\n- * Verticles are chunks of code that get deployed and\n- * run by Vert.x. Verticles can be written in any of the languages that Vert.x supports and a single application\n- * can include verticles written in multiple languages.\n+ * Verticles are chunks of code that get deployed and run by Vert.x. A Vert.x instance maintains N event loop threads\n+ * (where N by default is core*2) by default. Verticles can be written in any of the languages that Vert.x supports\n+ * and a single application can include verticles written in multiple languages.\n  *\n  * You can think of a verticle as a bit like an actor in the http://en.wikipedia.org/wiki/Actor_model[Actor Model].\n  *\n",
        "1": "Fix typo TUSID - - > TSUID",
        "2": "added the number of nio loops created by vert.x",
        "3": "Add convenience ' currentIndex ( ) ' method to BaseActions",
        "4": "Updated docs for new code",
        "5": " Update package-info.java to describe Vert.x instance and event loop threads",
        "6": " Added support for multiple languages in verticles.",
        "7": "Fix javadoc in package",
        "8": "Refactor Vert.x core package to include support for multiple languages in a single application."
    },
    {
        "diff": "diff --git a/src/org/wordpress/android/ui/WebViewActivity.java b/src/org/wordpress/android/ui/WebViewActivity.java\nindex 418325c0b..a4fedd98a 100644\n--- a/src/org/wordpress/android/ui/WebViewActivity.java\n+++ b/src/org/wordpress/android/ui/WebViewActivity.java\n@@ -41,8 +41,10 @@ public class WebViewActivity extends WPActionBarActivity {\n         ab.setDisplayShowTitleEnabled(true);\n         ab.setDisplayHomeAsUpEnabled(true);\n \n+        // note: do NOT call mWebView.getSettings().setUserAgentString(WordPress.getUserAgent())\n+        // here since it causes problems with the browser-sniffing that some sites rely on to\n+        // format the page for mobile display\n         mWebView = (WebView) findViewById(R.id.webView);\n-        mWebView.getSettings().setUserAgentString(WordPress.getUserAgent());\n         mWebView.getSettings().setBuiltInZoomControls(true);\n         mWebView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);\n \ndiff --git a/src/org/wordpress/android/ui/notifications/NotificationsWebViewActivity.java b/src/org/wordpress/android/ui/notifications/NotificationsWebViewActivity.java\nindex 2b392a00e..974730a77 100644\n--- a/src/org/wordpress/android/ui/notifications/NotificationsWebViewActivity.java\n+++ b/src/org/wordpress/android/ui/notifications/NotificationsWebViewActivity.java\n@@ -31,7 +31,6 @@ public class NotificationsWebViewActivity extends AuthenticatedWebViewActivity {\n     public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         mWebView.getSettings().setJavaScriptEnabled(true);\n-        mWebView.getSettings().setUserAgentString(WordPress.getUserAgent());\n         if (android.os.Build.VERSION.SDK_INT >= 11) {\n             mWebView.getSettings().setDisplayZoomControls(false);\n         }\n",
        "1": "Update WebViewActivity and NotificationsWebViewActivity to avoid setting user agent string for better mobile display.",
        "2": "Removed setUserAgentString from webViews that display external content",
        "3": "Fixed WP . com from not loading in ` NotificationsWebViewActivity ` .",
        "4": " Added setting JavaScript enabled for notifications webview activity",
        "5": "Don ' t URLEncode autobuffer writeJSON .",
        "6": "Removed unused import",
        "7": "Remove setting user agent string in WebViewActivity and NotificationsWebViewActivity.",
        "8": "Don ' t format the browser display when mobile the browser display"
    },
    {
        "diff": "diff --git a/common/buildcraft/silicon/ItemLaserTable.java b/common/buildcraft/silicon/ItemLaserTable.java\nindex 0011850cd..de7cd5d1a 100644\n--- a/common/buildcraft/silicon/ItemLaserTable.java\n+++ b/common/buildcraft/silicon/ItemLaserTable.java\n@@ -8,16 +8,8 @@\n  */\n package buildcraft.silicon;\n \n-import java.util.List;\n-\n import net.minecraft.block.Block;\n-import net.minecraft.entity.player.EntityPlayer;\n import net.minecraft.item.ItemStack;\n-import net.minecraft.util.EnumChatFormatting;\n-import net.minecraft.util.StatCollector;\n-\n-import cpw.mods.fml.relauncher.Side;\n-import cpw.mods.fml.relauncher.SideOnly;\n \n import buildcraft.core.lib.items.ItemBlockBuildCraft;\n \n",
        "1": "Removed unused imports",
        "2": "Removed debug item from creative menu",
        "3": "Remove unused imports",
        "4": "Refactor ItemLaserTable class",
        "5": "fix compile error",
        "6": " Removed unused imports and simplified code in ItemLaserTable.java",
        "7": " Fixed compatibility issues with latest Minecraft version.",
        "8": "Remove unused imports"
    },
    {
        "diff": "diff --git a/idea/src/org/jetbrains/jet/plugin/configuration/KotlinMavenConfigurator.java b/idea/src/org/jetbrains/jet/plugin/configuration/KotlinMavenConfigurator.java\nindex 87ade0f..70036a0 100644\n--- a/idea/src/org/jetbrains/jet/plugin/configuration/KotlinMavenConfigurator.java\n+++ b/idea/src/org/jetbrains/jet/plugin/configuration/KotlinMavenConfigurator.java\n@@ -43,6 +43,7 @@ import org.jetbrains.idea.maven.dom.MavenDomUtil;\n import org.jetbrains.idea.maven.dom.model.*;\n import org.jetbrains.idea.maven.project.MavenProjectsManager;\n import org.jetbrains.jet.plugin.JetPluginUtil;\n+import org.jetbrains.jet.plugin.framework.KotlinFrameworkDetector;\n import org.jetbrains.jet.plugin.framework.ui.ConfigureDialogWithModulesAndVersion;\n \n import java.util.List;\n@@ -64,6 +65,10 @@ public class KotlinMavenConfigurator implements KotlinProjectConfigurator {\n \n     @Override\n     public boolean isConfigured(@NotNull Module module) {\n+        if (KotlinFrameworkDetector.isJavaKotlinModule(module)) {\n+            return true;\n+        }\n+\n         PsiFile pomFile = findModulePomFile(module);\n         if (pomFile == null) return false;\n         String text = pomFile.getText();\n",
        "1": " Added support for Java-Kotlin modules",
        "2": "Fixed issue with content type checking",
        "3": "Only show suggestion box in ` debug , was not a ` return ` in ` java .",
        "4": "Fixed a bug where the isJavaKotlinModule module is not isJavaKotlinModule module",
        "5": "Do not provide jvm run configuration for js modules",
        "6": " Added import statement for KotlinFrameworkDetector and updated isConfigured method to check for Java Kotlin module.",
        "7": "Check that maven module already has library in dependency",
        "8": "Add support for Kotlin in Java Maven projects."
    },
    {
        "diff": "diff --git a/storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java b/storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java\nindex 6247fe6..eaef91a 100644\n--- a/storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java\n+++ b/storm-core/src/jvm/org/apache/storm/security/auth/plain/PlainSaslTransportPlugin.java\n@@ -38,13 +38,13 @@ public class PlainSaslTransportPlugin extends SaslTransportPlugin {\n     @Override\n     protected TTransportFactory getServerTransportFactory() throws IOException {\n         //create an authentication callback handler\n-        CallbackHandler server_callback_handler = new PlainServerCallbackHandler();\n+        CallbackHandler serverCallbackHandler = new PlainServerCallbackHandler();\n         if (Security.getProvider(SaslPlainServer.SecurityProvider.SASL_PLAIN_SERVER) == null) {\n             Security.addProvider(new SaslPlainServer.SecurityProvider());\n         }\n         //create a transport factory that will invoke our auth callback for digest\n         TSaslServerTransport.Factory factory = new TSaslServerTransport.Factory();\n-        factory.addServerDefinition(PLAIN, AuthUtils.SERVICE, \"localhost\", null, server_callback_handler);\n+        factory.addServerDefinition(PLAIN, AuthUtils.SERVICE, \"localhost\", null, serverCallbackHandler);\n \n         LOG.info(\"SASL PLAIN transport factory will be used\");\n         return factory;\n",
        "1": "",
        "2": "Fix NPE in PlainSaslTransportPlugin",
        "3": "Renaming local variable to camelCase",
        "4": "Fix setCursorPosition to use getTypeDescriptor ( ) directly",
        "5": " Modified PlainSaslTransportPlugin to use serverCallbackHandler instead of server_callback_handler.",
        "6": " Added PLAIN SASL server definition for plain authentication",
        "7": "Using real user - id in the ReqContext instead of username in PlainSaslTransportPlugin",
        "8": "Refactor variable names and add whitespace for readability in PlainSaslTransportPlugin.java"
    },
    {
        "diff": "diff --git a/core/src/main/java/com/graphhopper/util/Instruction.java b/core/src/main/java/com/graphhopper/util/Instruction.java\nindex 747cd829..4bcc150a 100644\n--- a/core/src/main/java/com/graphhopper/util/Instruction.java\n+++ b/core/src/main/java/com/graphhopper/util/Instruction.java\n@@ -40,7 +40,6 @@ public class Instruction\n \n     protected int sign;\n     protected String name;\n-    protected double radian;\n     protected double distance;\n     protected long time;\n     protected final PointList points;\ndiff --git a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java\nindex eda072d9..c7786a3c 100644\n--- a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java\n+++ b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java\n@@ -4,13 +4,10 @@ import java.util.HashMap;\n import java.util.Map;\n \n /**\n- * Created by jan on 02.02.15.\n- * <p>\n  * @author jansoe\n  */\n public class RoundaboutInstruction extends Instruction\n {\n-\n     private int exitNumber = 0;\n     private int clockwise = 0; // 0 undetermined, 1 clockwise, -1 counterclockwise, 2 inconsistent\n     private boolean exited = false;\n",
        "1": "removed unused field",
        "2": "remove unused code",
        "3": " Fix RoundaboutInstruction class, remove unused variable radian in Instruction class.",
        "4": " Update RoundaboutInstruction to remove unused variable 'clockwise' and modify 'exitNumber' to be a field instead of a method parameter.",
        "5": "set timestamps default to current date",
        "6": "removing unused radian property from Instructions (RoundaboutInstruction would overwrite this field)",
        "7": "remove unused field",
        "8": "Remove unused field and unnecessary comments"
    },
    {
        "diff": "diff --git a/WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderPostListActivity.java b/WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderPostListActivity.java\nindex b19f3e39e..7a7d7fddb 100644\n--- a/WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderPostListActivity.java\n+++ b/WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderPostListActivity.java\n@@ -7,11 +7,13 @@ import android.content.Intent;\n import android.os.Bundle;\n \n import org.wordpress.android.R;\n+import org.wordpress.android.analytics.AnalyticsTracker;\n import org.wordpress.android.datasets.ReaderDatabase;\n import org.wordpress.android.datasets.ReaderPostTable;\n import org.wordpress.android.datasets.ReaderTagTable;\n import org.wordpress.android.models.ReaderTag;\n import org.wordpress.android.models.ReaderTagType;\n+import org.wordpress.android.networking.NetworkUtils;\n import org.wordpress.android.ui.WPActionBarActivity;\n import org.wordpress.android.ui.accounts.WPComLoginActivity;\n import org.wordpress.android.ui.prefs.UserPrefs;\n@@ -28,8 +30,6 @@ import org.wordpress.android.ui.reader.actions.ReaderUserActions;\n import org.wordpress.android.ui.reader.models.ReaderBlogIdPostIdList;\n import org.wordpress.android.util.AppLog;\n import org.wordpress.android.util.AppLog.T;\n-import org.wordpress.android.util.NetworkUtils;\n-import org.wordpress.android.util.stats.AnalyticsTracker;\n \n import javax.annotation.Nonnull;\n \ndiff --git a/src/org/wordpress/android/ui/reader/ReaderTaskFragment.java b/WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderTaskFragment.java\nsimilarity index 100%\nrename from src/org/wordpress/android/ui/reader/ReaderTaskFragment.java\nrename to WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderTaskFragment.java\n",
        "1": "Resolved incorrect path for ReaderTaskFragment",
        "2": "Refactor ReaderPostListActivity and ReaderTaskFragment",
        "3": "Fix wrong import order .",
        "4": "",
        "5": " Added import statements for AnalyticsTracker, NetworkUtils, and ReaderTagType, and removed unused import statements.",
        "6": "Fix the build . . .",
        "7": " Commit message: Renamed ReaderTaskFragment.java to align with WordPress naming conventions.",
        "8": "Fix eclipse warnings"
    },
    {
        "diff": "diff --git a/modules/AppearancePluginUI/src/main/java/org/gephi/ui/appearance/plugin/PartitionColorTransformerPanel.java b/modules/AppearancePluginUI/src/main/java/org/gephi/ui/appearance/plugin/PartitionColorTransformerPanel.java\nindex e55e14a1d..efdb8634a 100644\n--- a/modules/AppearancePluginUI/src/main/java/org/gephi/ui/appearance/plugin/PartitionColorTransformerPanel.java\n+++ b/modules/AppearancePluginUI/src/main/java/org/gephi/ui/appearance/plugin/PartitionColorTransformerPanel.java\n@@ -282,7 +282,9 @@ public class PartitionColorTransformerPanel extends javax.swing.JPanel {\n                 menu.add(\"<html><i>\" + NbBundle.getMessage(PartitionColorTransformerPanel.class, \"PalettePopup.norecent\") + \"</i></html>\");\n             } else {\n                 for (Palette pl : recentPalettes) {\n-                    menu.add(new PaletteMenuItem(pl, Math.min(PALETTE_DISPLAY_LIMIT, colorsCount)));\n+                    if (pl.size() >= colorsCount) {\n+                        menu.add(new PaletteMenuItem(pl, Math.min(PALETTE_DISPLAY_LIMIT, colorsCount)));\n+                    }\n                 }\n             }\n \n",
        "1": "Fixes add logic to state whether that to list the mouse .",
        "2": "Fix exception when recette palette is smaller than colors count",
        "3": " Added recent palette menu items for improved usability.",
        "4": "Refactor PaletteMenuItem creation in PartitionColorTransformerPanel",
        "5": "Fix small compile issue",
        "6": "Fix bug in PartitionColorTransformerPanel",
        "7": " Added check to display palettes with at least the minimum number of colors.",
        "8": "Fix error in RowNumberOperator"
    },
    {
        "diff": "diff --git a/common/buildcraft/core/blueprints/BptBuilderBlueprint.java b/common/buildcraft/core/blueprints/BptBuilderBlueprint.java\nindex 1d6ffe91c..96c62f4ee 100644\n--- a/common/buildcraft/core/blueprints/BptBuilderBlueprint.java\n+++ b/common/buildcraft/core/blueprints/BptBuilderBlueprint.java\n@@ -244,9 +244,20 @@ public class BptBuilderBlueprint extends BptBuilderBase {\n \t\t\t\t\t\t\treturn slot;\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n+\t\t\t\t\t\t// Even slots that don't need to be build may need\n+\t\t\t\t\t\t// post processing, see below for the argument.\n+\t\t\t\t\t\tpostProcessing.add(slot);\n \t\t\t\t\t\titerator.remove();\n \t\t\t\t\t}\n \t\t\t\t} else {\n+\t\t\t\t\tif (slot.mode == Mode.Build) {\n+\t\t\t\t\t\t// Even slots that considered already built may need\n+\t\t\t\t\t\t// post processing calls. For example, flowing water\n+\t\t\t\t\t\t// may need to be adjusted, engines may need to be\n+\t\t\t\t\t\t// turned to the right direction, etc.\n+\t\t\t\t\t\tpostProcessing.add(slot);\n+\t\t\t\t\t}\n+\n \t\t\t\t\titerator.remove();\n \t\t\t\t}\n \t\t\t} catch (Throwable t) {\n",
        "1": "re-added missing blocks to post-processing",
        "2": "Add post-processing for slots in BptBuilderBlueprint",
        "3": "Changing renderer to next next to ' t lock up during repository manager",
        "4": "Render keyTyped about reversed locks",
        "5": " Added post processing calls for slots that don't need to be built but still need post processing.",
        "6": " Add post-processing for slots that don't need building and for slots that are already built but require additional processing.",
        "7": "Fix slots processing processing",
        "8": "fixed condition for slot removal"
    },
    {
        "diff": "diff --git a/library/src/com/WazaBe/HoloEverywhere/app/Application.java b/library/src/com/WazaBe/HoloEverywhere/app/Application.java\nindex 60e26a9..42bd275 100644\n--- a/library/src/com/WazaBe/HoloEverywhere/app/Application.java\n+++ b/library/src/com/WazaBe/HoloEverywhere/app/Application.java\n@@ -22,6 +22,7 @@ public class Application extends android.app.Application implements\n \t\tprivate final SettingListener<Config> DEFAULT_SETTINGS_LISTENER = new SettingListener<Config>() {\n \t\t\t@Override\n \t\t\tpublic void onAttach(Config config) {\n+\t\t\t\tconfig.preferenceImpl.setEnumClass(PreferenceImpl.class);\n \t\t\t\tonStateChange(config);\n \t\t\t}\n \n",
        "1": "Set enum class for preference implementation in Application.java",
        "2": " Added setting listener to set enum class for preference impl.",
        "3": "Fix a bug where the notification is not set",
        "4": "Fix skip button visibility",
        "5": "Bind configuration configuration during the model",
        "6": " Added `preferenceImpl.setEnumClass()` to set the enum class for preferences in `Application`.",
        "7": "Add debug output creation to debug",
        "8": "Set enum class for PreferenceImpl config"
    },
    {
        "diff": "diff --git a/src/org/geometerplus/android/fbreader/ProcessHyperlinkAction.java b/src/org/geometerplus/android/fbreader/ProcessHyperlinkAction.java\nindex 86d0409d1..34092ea6f 100644\n--- a/src/org/geometerplus/android/fbreader/ProcessHyperlinkAction.java\n+++ b/src/org/geometerplus/android/fbreader/ProcessHyperlinkAction.java\n@@ -110,6 +110,7 @@ class ProcessHyperlinkAction extends FBAndroidAction {\n \t\t\t\t\t\t}\n \t\t\t\t\t\ttoast.setText(snippet.getText());\n \t\t\t\t\t\ttoast.setDuration(SuperToast.Duration.LONG);\n+\t\t\t\t\t\tSuperActivityToast.cancelAllSuperActivityToasts();\n \t\t\t\t\t\ttoast.show();\n \t\t\t\t\t} else {\n \t\t\t\t\t\tReader.tryOpenFootnote(hyperlink.Id);\ndiff --git a/src/org/geometerplus/android/fbreader/SelectionBookmarkAction.java b/src/org/geometerplus/android/fbreader/SelectionBookmarkAction.java\nindex 40b4f11e4..d4b8ab6d3 100644\n--- a/src/org/geometerplus/android/fbreader/SelectionBookmarkAction.java\n+++ b/src/org/geometerplus/android/fbreader/SelectionBookmarkAction.java\n@@ -66,6 +66,7 @@ public class SelectionBookmarkAction extends FBAndroidAction {\n \t\t\t\tOrientationUtil.startActivity(BaseActivity, intent);\n \t\t\t}\n \t\t}));\n+\t\tSuperActivityToast.cancelAllSuperActivityToasts();\n \t\ttoast.show();\n \t}\n }\n",
        "1": "hide outline on clicking footnote ' s ' more '",
        "2": "hide old toast immediately if a ne one is requested",
        "3": "Cancel all SuperActivityToasts before showing toast messages",
        "4": "fixed possible deadlock on open",
        "5": " Added SuperActivityToast.cancelAllSuperActivityToasts() to both ProcessHyperlinkAction and SelectionBookmarkAction to cancel any existing toasts before showing a new one.",
        "6": "fixed bug in SelectionBookmarkAction",
        "7": "Fixed issue with displaying bookmark selection toast correctly (#86d0409d1).",
        "8": "prepare the popup pane to off more notification"
    },
    {
        "diff": "diff --git a/platform/diff-impl/src/com/intellij/diff/comparison/iterables/DiffIterableUtil.java b/platform/diff-impl/src/com/intellij/diff/comparison/iterables/DiffIterableUtil.java\nindex 4bdecdf..8316ae5 100644\n--- a/platform/diff-impl/src/com/intellij/diff/comparison/iterables/DiffIterableUtil.java\n+++ b/platform/diff-impl/src/com/intellij/diff/comparison/iterables/DiffIterableUtil.java\n@@ -106,6 +106,7 @@ public class DiffIterableUtil {\n \n   @NotNull\n   public static FairDiffIterable fair(@NotNull DiffIterable iterable) {\n+    if (iterable instanceof FairDiffIterable) return (FairDiffIterable)iterable;\n     FairDiffIterable wrapper = new FairDiffIterableWrapper(iterable);\n     verifyFair(wrapper);\n     return wrapper;\n",
        "1": "remove unnecessary wrapping into FairDiffIterable",
        "2": "Refactor DiffIterableUtil to handle FairDiffIterable.",
        "3": " Added check for fairness in DiffIterableUtil",
        "4": "fixed bug in DiffIterableUtil",
        "5": " Add fairness check for DiffIterable.",
        "6": "make it work for windows",
        "7": "re - add parameter types",
        "8": "oneside - fix preferred focused component"
    },
    {
        "diff": "diff --git a/gdx/src/com/badlogic/gdx/graphics/Texture.java b/gdx/src/com/badlogic/gdx/graphics/Texture.java\nindex b1ea4d7..e454338 100644\n--- a/gdx/src/com/badlogic/gdx/graphics/Texture.java\n+++ b/gdx/src/com/badlogic/gdx/graphics/Texture.java\n@@ -66,7 +66,7 @@ public interface Texture\n \tpublic enum TextureWrap\r\n \t{\r\n \t\tClampToEdge,\r\n-\t\tWrap\r\n+\t\tRepeat\r\n \t}\r\n \t\r\n \t/**\r\n",
        "1": "[ fixed ] unnecessary code",
        "2": "Changed TextureWrap enum value from Wrap to Repeat.",
        "3": "[Changed] texture wrap enum",
        "4": "Fixed a bug in Texture . TextureWrap ( )",
        "5": " Rename TextureWrap.Wrap to TextureWrap.Repeat",
        "6": "Fix merge error",
        "7": " Changed 'Wrap' to 'Repeat' in TextureWrap enum.",
        "8": "add getRegion to PolygonSprite"
    },
    {
        "diff": "diff --git a/server/sonar-server/src/main/java/org/sonar/server/user/index/UserDoc.java b/server/sonar-server/src/main/java/org/sonar/server/user/index/UserDoc.java\nindex 84c98236a8..c01104d180 100644\n--- a/server/sonar-server/src/main/java/org/sonar/server/user/index/UserDoc.java\n+++ b/server/sonar-server/src/main/java/org/sonar/server/user/index/UserDoc.java\n@@ -33,19 +33,23 @@ public class UserDoc extends BaseDoc implements User {\n     super(fields);\n   }\n \n+  @Override\n   public String login() {\n     return getField(UserIndexDefinition.FIELD_LOGIN);\n   }\n \n+  @Override\n   public String name() {\n     return getField(UserIndexDefinition.FIELD_NAME);\n   }\n \n+  @Override\n   @Nullable\n   public String email() {\n     return getNullableField(UserIndexDefinition.FIELD_EMAIL);\n   }\n \n+  @Override\n   public boolean active() {\n     return (Boolean) getField(UserIndexDefinition.FIELD_ACTIVE);\n   }\n",
        "1": " Added methods for login, name, and email retrieval in UserDoc.",
        "2": "add QualityGateStatus # equals to fix MeasureRepoEntry # equalsByQualityGateStatus",
        "3": "Refactor UserDoc class to override methods and add annotations.",
        "4": "Fix quality flaws",
        "5": "Fix quaity flaws",
        "6": "Add missing @ Override annotations",
        "7": "Fix compilation error",
        "8": " Added methods for User interface: login(), name(), email(), and active() to UserDoc class."
    },
    {
        "diff": "diff --git a/shell/src/main/java/tachyon/shell/command/CommandUtils.java b/shell/src/main/java/tachyon/shell/command/CommandUtils.java\nindex 7fe7883..f1629a2 100644\n--- a/shell/src/main/java/tachyon/shell/command/CommandUtils.java\n+++ b/shell/src/main/java/tachyon/shell/command/CommandUtils.java\n@@ -1,3 +1,18 @@\n+/*\n+ * Licensed to the University of California, Berkeley under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n package tachyon.shell.command;\n \n import java.io.IOException;\n",
        "1": "Add Apache header to BloomFilterStrategies",
        "2": "Add missing license header",
        "3": " Added Apache License header to CommandUtils.java.",
        "4": "add header to web / UtilsTests .",
        "5": "Add license to AppleBuildable",
        "6": " Added NOTICE file with Apache License 2.0 information",
        "7": "Add license header to CommandUtils.java",
        "8": "add license header"
    },
    {
        "diff": "diff --git a/core/java/android/webkit/WebView.java b/core/java/android/webkit/WebView.java\nindex a3ced9e..a62a44b 100644\n--- a/core/java/android/webkit/WebView.java\n+++ b/core/java/android/webkit/WebView.java\n@@ -8675,7 +8675,6 @@ public class WebView extends AbsoluteLayout\n     private native int      nativeGetDrawGLFunction(Rect rect, Rect viewRect,\n             float scale, int extras);\n     private native void     nativeUpdateDrawGLFunction(Rect rect, Rect viewRect);\n-    private native boolean  nativeDrawGL(Rect rect, float scale, int extras);\n     private native void     nativeExtendSelection(int x, int y);\n     private native int      nativeFindAll(String findLower, String findUpper,\n             boolean sameAsLastSearch);\n",
        "1": "Remove deprecated code",
        "2": "Remove unused method",
        "3": "Update the scale while updating the drawGL functor",
        "4": " Remove unused nativeDrawGL method.",
        "5": "Remove nativeDrawGL method from WebView.java",
        "6": "Removed unused code",
        "7": " Fixed bug in nativeDrawGL() method",
        "8": "Remove uncalled function -- java counterpart of"
    },
    {
        "diff": "diff --git a/gdx/src/com/badlogic/gdx/math/EarClippingTriangulator.java b/gdx/src/com/badlogic/gdx/math/EarClippingTriangulator.java\nindex e81a3e6..c0bc569 100644\n--- a/gdx/src/com/badlogic/gdx/math/EarClippingTriangulator.java\n+++ b/gdx/src/com/badlogic/gdx/math/EarClippingTriangulator.java\n@@ -153,7 +153,7 @@ public final class EarClippingTriangulator {\n \tprivate static int computeSpannedAreaSign(final float pX1, final float pY1,\r\n \t\t\tfinal float pX2, final float pY2, final float pX3, final float pY3) {\r\n \t\t/*\r\n-\t\t * @Espitz using doubles corrects for very rare cases where we run into\r\n+\t\t * Espitz: using doubles corrects for very rare cases where we run into\r\n \t\t * floating point imprecision in the area test, causing the method to\r\n \t\t * return a 0 when it should have returned -1 or 1.\r\n \t\t */\r\n@@ -184,19 +184,6 @@ public final class EarClippingTriangulator {\n \t\t\t\tfinal float currentVertexX = currentVertex.x;\r\n \t\t\t\tfinal float currentVertexY = currentVertex.y;\r\n \r\n-\t\t\t\t/*\r\n-\t\t\t\t * @ESpitz If the concave vertex shares it's coordinates with a\r\n-\t\t\t\t * vertex in this triangle, it should always be considered to\r\n-\t\t\t\t * fall \"outside\" of that triangle. We cannot rely on the\r\n-\t\t\t\t * areaSign tests to below to identify such a case, since two of\r\n-\t\t\t\t * the areaSign values will always be zero and the third could\r\n-\t\t\t\t * be negative OR positive.\r\n-\t\t\t\t */\r\n-\t\t\t\tif ((currentVertexX == pX1 && currentVertexY == pY1)\r\n-\t\t\t\t\t\t|| (currentVertexX == pX2 && currentVertexY == pY2)\r\n-\t\t\t\t\t\t|| (currentVertexX == pX3 && currentVertexY == pY3))\r\n-\t\t\t\t\tbreak;\r\n-\r\n \t\t\t\tfinal int areaSign1 = EarClippingTriangulator\r\n \t\t\t\t\t\t.computeSpannedAreaSign(pX1, pY1, pX2, pY2,\r\n \t\t\t\t\t\t\t\tcurrentVertexX, currentVertexY);\r\n",
        "1": " Commit message: Fixes #123456: Corrects for rare floating point imprecision in EarClippingTriangulator.java to prevent incorrect area sign calculation.",
        "2": " Fixes a rare issue with floating point imprecision in the EarClippingTriangulator's area test.",
        "3": "Removed unused code",
        "4": "Fix floating point imprecision in computeSpannedAreaSign method",
        "5": "Remove dead code",
        "6": "Remove unnecessary code",
        "7": "[removed] one the checks I added in EarClippingTriangulator; seems to break things in certain cases",
        "8": "Add new gtalk values"
    },
    {
        "diff": "diff --git a/src/org/wordpress/android/ui/WPActionBarActivity.java b/src/org/wordpress/android/ui/WPActionBarActivity.java\nindex d46c415f8..1011d79dc 100644\n--- a/src/org/wordpress/android/ui/WPActionBarActivity.java\n+++ b/src/org/wordpress/android/ui/WPActionBarActivity.java\n@@ -616,8 +616,7 @@ public abstract class WPActionBarActivity extends SherlockFragmentActivity {\n                 mShouldFinish = true;\n             Intent intent = new Intent(WPActionBarActivity.this, PagesActivity.class);\n             intent.putExtra(\"id\", WordPress.currentBlog.getId());\n-            intent.putExtra(\"isNew\",\n-                    true);\n+            intent.putExtra(\"isNew\", true);\n             intent.putExtra(\"viewPages\", true);\n             intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n             startActivityWithDelay(intent);\n",
        "1": " Fixed bug in `startActivityWithDelay()` to properly set `isNew` extra.",
        "2": "Shows the hard - coded blog name .",
        "3": "Fix a bug in the WPActionBarActivity of the isNew",
        "4": "Fixing indentation and removing unnecessary line in WPActionBarActivity.",
        "5": "Removing unused import",
        "6": " Remove unnecessary 'isNew' flag in PagesActivity intent",
        "7": "Clearing the backstack as well",
        "8": "moved plugin start from command to module / text"
    },
    {
        "diff": "diff --git a/core/src/main/java/com/mongodb/hadoop/splitter/StandaloneMongoSplitter.java b/core/src/main/java/com/mongodb/hadoop/splitter/StandaloneMongoSplitter.java\nindex be9068e..dbbca19 100644\n--- a/core/src/main/java/com/mongodb/hadoop/splitter/StandaloneMongoSplitter.java\n+++ b/core/src/main/java/com/mongodb/hadoop/splitter/StandaloneMongoSplitter.java\n@@ -181,7 +181,7 @@ public class StandaloneMongoSplitter extends MongoCollectionSplitter {\n             String splitKeyString = (new BasicDBObject(splitKey.toMap())).keySet().iterator().next();\n             //If splitKeyMin has been used, use it as first boundary.\n             if(splitKeyMin.containsField(splitKeyString)) {\n-                lastKey = new BasicDBObject(\"value\", splitKeyMin.get(splitKeyString));\n+                lastKey = new BasicDBObject(splitKeyMin.toMap());\n             }\n             for (final Object aSplitData : splitData) {\n                 final BasicDBObject currentKey = (BasicDBObject) aSplitData;\n@@ -192,7 +192,7 @@ public class StandaloneMongoSplitter extends MongoCollectionSplitter {\n             BasicDBObject maxKey = null;\n           //If splitKeyMax has been used, use it as last boundary.\n             if(splitKeyMax.containsField(splitKeyString)) {\n-                maxKey = new BasicDBObject(\"value\", splitKeyMax.get(splitKeyString));\n+                maxKey = new BasicDBObject(splitKeyMax.toMap());\n             }\n             // Last max split\n             final MongoInputSplit lastSplit = createSplitFromBounds(lastKey, maxKey);\n",
        "1": "fixed confussion with expected BSONObject",
        "2": "Refactored code in StandaloneMongoSplitter to use splitKeyMin and splitKeyMax as boundaries for splitting.",
        "3": " Fixes #12345: Changed lastKey and maxKey initialization to use toMap() instead of value field to fix issues with null values.",
        "4": "Fix typo in StandaloneMongoSplitter",
        "5": "Change the type of ScheduledReporterTest .",
        "6": "exposing db and coll stats and adding ability to check if collection is capped",
        "7": "Remove an unnecessary read work .",
        "8": " Added support for splitKeyMin and splitKeyMax in StandaloneMongoSplitter."
    },
    {
        "diff": "diff --git a/java/org/apache/catalina/filters/FilterBase.java b/java/org/apache/catalina/filters/FilterBase.java\nindex be23ad357..b7044e112 100644\n--- a/java/org/apache/catalina/filters/FilterBase.java\n+++ b/java/org/apache/catalina/filters/FilterBase.java\n@@ -57,11 +57,6 @@ public abstract class FilterBase implements Filter {\n         }\n     }\n \n-    @Override\n-    public void destroy() {\n-        // NOOP\n-    }\n-\n     /**\n      * Determines if an exception when calling a setter or an unknown\n      * configuration attribute triggers the failure of the this filter which in\n",
        "1": "Remove unnecessary method",
        "2": "Remove a TODO marker for something long since completed",
        "3": " Fixed NOOP method in FilterBase to prevent filter failure when setting unknown configuration attributes.",
        "4": "Remove unused method",
        "5": "Remove unnecessary code",
        "6": "Remove unused method in FilterBase class",
        "7": " Remove unnecessary destroy() method from FilterBase class.",
        "8": "Remove unnecessary code"
    },
    {
        "diff": "diff --git a/core/src/processing/opengl/PGL.java b/core/src/processing/opengl/PGL.java\nindex dd729c7..512cbbd 100644\n--- a/core/src/processing/opengl/PGL.java\n+++ b/core/src/processing/opengl/PGL.java\n@@ -1296,12 +1296,15 @@ public abstract class PGL {\n   }\n \n \n+  protected static boolean isPowerOfTwo(int val) {\n+    return (val & (val - 1)) == 0;\n+  }\n+\n+\n   // bit shifting this might be more efficient\n   protected static int nextPowerOfTwo(int val) {\n     int ret = 1;\n-    while (ret < val) {\n-      ret <<= 1;\n-    }\n+    while (ret < val) ret <<= 1;\n     return ret;\n   }\n \n",
        "1": "add isPowerOfTwo ( ) method",
        "2": "keep deprecated requestFBOLayer ( ) method for now .",
        "3": "add position attribute to length row",
        "4": "add isPowerOfTwo check",
        "5": " Adds a new method `isPowerOfTwo` and updates the `nextPowerOfTwo` method to use bit shifting for improved efficiency.",
        "6": " Added method isPowerOfTwo to PGL class",
        "7": "Added setDisableScrollingWhileRefreshing Mutator",
        "8": "Add method to check if a number is a power of two."
    },
    {
        "diff": "diff --git a/src/java/voldemort/versioning/Versioned.java b/src/java/voldemort/versioning/Versioned.java\nindex 70394bdd9..e848fb9da 100644\n--- a/src/java/voldemort/versioning/Versioned.java\n+++ b/src/java/voldemort/versioning/Versioned.java\n@@ -58,11 +58,9 @@ public final class Versioned<T> implements Serializable {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object object) {\n-        if(this == null)\n+        if(object == this)\n             return true;\n-        else if(object == null)\n-            return false;\n-        else if(!object.getClass().equals(Versioned.class))\n+        else if(!(object instanceof Versioned))\n             return false;\n \n         Versioned versioned = (Versioned) object;\n",
        "1": "Make version final .",
        "2": " Fix equality check to correctly compare Versioned objects.",
        "3": "Fix Versioned.equals()--remove useless null check of this.",
        "4": "Revert \" Improved the method that didn ' t get it as some other parameters .",
        "5": "Remove unnecessary check .",
        "6": "Fix a bug where the Versioned was not be null",
        "7": "Refactored the equals method in Versioned.java",
        "8": " Added method equals() override for Versioned class"
    },
    {
        "diff": "diff --git a/common/buildcraft/core/blueprints/BptBuilderBlueprint.java b/common/buildcraft/core/blueprints/BptBuilderBlueprint.java\nindex 732a7ccab..99ad196ff 100644\n--- a/common/buildcraft/core/blueprints/BptBuilderBlueprint.java\n+++ b/common/buildcraft/core/blueprints/BptBuilderBlueprint.java\n@@ -611,7 +611,7 @@ public class BptBuilderBlueprint extends BptBuilderBase {\n \t\t\t\tFluidStack fluidStack = fluid != null ? FluidContainerRegistry.getFluidForFilledItem(invStk) : null;\n \t\t\t\tboolean fluidFound = fluidStack != null && fluidStack.getFluid() == fluid && fluidStack.amount >= FluidContainerRegistry.BUCKET_VOLUME;\n \n-\t\t\t\tif (fluidFound || StackHelper.isCraftingEquivalent(reqStk, invStk, true)) {\n+\t\t\t\tif (fluidFound || StackHelper.isMatchingItem(reqStk, invStk, true, true)) {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tusedStack = slot.getSchematic().useItem(context, reqStk, slotInv);\n \t\t\t\t\t\tslot.addStackConsumed (usedStack);\n",
        "1": " Fixed issue with fluid stack matching in BptBuilderBlueprint.",
        "2": "Fix NPE in BptBuilderBlueprint",
        "3": "use different PsiFile",
        "4": "Fix possible NPE in TankManager",
        "5": "fixed another fencepost bug",
        "6": "Refactored code to use the updated method for matching items.",
        "7": "Fix builder inconsistently respecting OreDict",
        "8": " Fixed fluid stack check to use isMatchingItem instead of isCraftingEquivalent."
    },
    {
        "diff": "diff --git a/core/common/src/main/java/alluxio/network/protocol/databuffer/DataFileChannel.java b/core/common/src/main/java/alluxio/network/protocol/databuffer/DataFileChannel.java\nindex 4358c01..d02a99c 100644\n--- a/core/common/src/main/java/alluxio/network/protocol/databuffer/DataFileChannel.java\n+++ b/core/common/src/main/java/alluxio/network/protocol/databuffer/DataFileChannel.java\n@@ -53,7 +53,7 @@ public final class DataFileChannel implements DataBuffer {\n     ByteBuffer buffer = ByteBuffer.allocate((int) mLength);\n     try {\n       mFileChannel.position(mOffset);\n-      int bytesRead = 0;\n+      int bytesRead;\n       long bytesRemaining = mLength;\n       while (bytesRemaining > 0 && (bytesRead = mFileChannel.read(buffer)) >= 0) {\n         bytesRemaining -= bytesRead;\n",
        "1": " Fixed bug in DataFileChannel.java by correctly initializing bytesRead variable.",
        "2": "adding comments to the warmUpLoop function",
        "3": "Fix a minor bug in the ChainSplitTests",
        "4": "Fix variable initialization in DataFileChannel",
        "5": "[ SMALLFIX ] Removed redundant initializer in TieredStoreIntegrationTest",
        "6": "Fix bug in DataFileChannel",
        "7": " Fixed bug in read method to properly handle buffer size",
        "8": "[SMALLFIX] Removed redundant initializer in DataFileChannel"
    },
    {
        "diff": "diff --git a/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java b/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java\nindex 86bee57c4..1ef6cc7c9 100644\n--- a/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java\n+++ b/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java\n@@ -180,6 +180,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {\n             if (Server.isLifeCycleEventCalled(name)) {\n                 break;\n             }\n+            i++;\n             Thread.sleep(100);\n         }\n         Assert.assertTrue(Server.isLifeCycleEventCalled(name));\n",
        "1": "Fix a bug in TestEncodingDecoding .",
        "2": "Fix bug that meant test always hung until the background process count reached zero .",
        "3": "Fix loop condition in TestEncodingDecoding.java",
        "4": "Add the rather crucial missing i++ in the wait loop",
        "5": "Fix lint errors ( class )",
        "6": " Increased sleep time from 100 to 1000 to prevent intermittent test failures.",
        "7": "Fix the build .",
        "8": " Added sleep interval to improve test performance (#180)"
    },
    {
        "diff": "diff --git a/presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTask.java b/presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTask.java\nindex 402dbef..e3eb39b 100644\n--- a/presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTask.java\n+++ b/presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTask.java\n@@ -379,9 +379,11 @@ public class HttpRemoteTask\n         currentRequest = future;\n         currentRequestStartNanos = System.nanoTime();\n \n-        Futures.addCallback(future, new SimpleHttpResponseHandler<>(new UpdateResponseHandler(sources), request.getUri()), executor);\n-\n+        // The needsUpdate flag needs to be set to false BEFORE adding the Future callback since callback might change the flag value\n+        // and does so without grabbing the instance lock.\n         needsUpdate.set(false);\n+\n+        Futures.addCallback(future, new SimpleHttpResponseHandler<>(new UpdateResponseHandler(sources), request.getUri()), executor);\n     }\n \n     private synchronized List<TaskSource> getSources()\n",
        "1": " Added synchronized method to set needsUpdate flag before adding Future callback to avoid race conditions",
        "2": "Add PageUp and PageDown hot keys",
        "3": "Record number of split for a task even before it is scheduled",
        "4": "Fix issue with setting needsUpdate flag in HttpRemoteTask",
        "5": "Fix needsUpdate flag",
        "6": "Fix code style related to actually return null .",
        "7": " Added callback for Future of HttpRemoteTask to handle response.",
        "8": "Fix race condition in HttpRemoteTask"
    },
    {
        "diff": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/MoonCalc.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/MoonCalc.java\nindex 1e52695..5318f12 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/MoonCalc.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/MoonCalc.java\n@@ -54,6 +54,19 @@ public class MoonCalc {\n \t\tCalendar rise = DateTimeUtils.timeToCalendar(calendar, riseSet[0]);\n \t\tCalendar set = DateTimeUtils.timeToCalendar(calendar, riseSet[1]);\n \n+\t\tif (rise == null || set == null) {\n+\t\t\tCalendar tomorrow = (Calendar) calendar.clone();\n+\t\t\ttomorrow.add(Calendar.DAY_OF_MONTH, 1);\n+\n+\t\t\tdouble[] riseSeTomorrow = getRiseSet(tomorrow, latitude, longitude);\n+\t\t\tif (rise == null) {\n+\t\t\t\trise = DateTimeUtils.timeToCalendar(tomorrow, riseSeTomorrow[0]);\n+\t\t\t}\n+\t\t\tif (set == null) {\n+\t\t\t\tset = DateTimeUtils.timeToCalendar(tomorrow, riseSeTomorrow[1]);\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\t\n \t\tmoon.setRise(new Range(rise, rise));\n \t\tmoon.setSet(new Range(set, set));\n \n",
        "1": "If there is no moon rise/set today, show the tomorrow.",
        "2": "Fixed bug in ProgressGenerator class",
        "3": "Fixed daylight saving offset for moon rise / set .",
        "4": "Fix issue with moon rise and set times not being calculated correctly",
        "5": "Fix NPE in MoonCalc",
        "6": " Added new moon rise and set calculations for improved accuracy",
        "7": "Fix LayoutController lazy init .",
        "8": " Added logic to handle case where moonrise and moonset times are null, by calculating tomorrow's rise and set times and using those instead."
    },
    {
        "diff": "diff --git a/tool/src/org/antlr/v4/semantics/SymbolChecks.java b/tool/src/org/antlr/v4/semantics/SymbolChecks.java\nindex d3e8cdd5f..75d068f38 100644\n--- a/tool/src/org/antlr/v4/semantics/SymbolChecks.java\n+++ b/tool/src/org/antlr/v4/semantics/SymbolChecks.java\n@@ -280,7 +280,7 @@ public class SymbolChecks {\n \t\t\t\t\t\t\t\t\t\t  g.fileName, ref.token, ruleName);\n \t\t\t}\n \t\t\tGrammarAST arg = (GrammarAST)ref.getChild(0);\n-\t\t\tif ( arg!=null && r.args==null ) {\n+\t\t\tif ( arg!=null && (r==null || r.args==null) ) {\n \t\t\t\terrMgr.grammarError(ErrorType.RULE_HAS_NO_ARGS,\n \t\t\t\t\t\t\t\t\t\t  g.fileName, ref.token, ruleName);\n \n",
        "1": "Fix null pointer exception in SymbolChecks.java",
        "2": "Fix code bug in isEqual ( ) when incorrect class will cause with an existing task .",
        "3": " Fix SymbolChecks to correctly handle rules with no arguments.",
        "4": "Add null check",
        "5": " Added check for missing arguments in rule definition.",
        "6": "Fixed bug where no stop was set for groupAdded .",
        "7": "allow null filenames .",
        "8": "Fix NPE in RULE_HAS_NO_ARGS null"
    },
    {
        "diff": "diff --git a/jodd-http/src/test/java/jodd/http/HttpConnectionTest.java b/jodd-http/src/test/java/jodd/http/HttpConnectionTest.java\nindex 0cae5fea..e3eeb055 100644\n--- a/jodd-http/src/test/java/jodd/http/HttpConnectionTest.java\n+++ b/jodd-http/src/test/java/jodd/http/HttpConnectionTest.java\n@@ -74,7 +74,7 @@ public class HttpConnectionTest {\n \t\tFile file = FileUtil.createTempFile();\n \t\tfile.deleteOnExit();\n \n-\t\tFileUtil.writeString(file, RandomStringUtil.randomAlpha(1024));\n+\t\tFileUtil.writeString(file, StringUtil.repeat('A', 1024));\n \n \t\tfinal StringBuilder sb = new StringBuilder();\n \n",
        "1": "improved the test list",
        "2": " Fixed test data generation to use repeatable data set.",
        "3": "Fix log level",
        "4": "Fix test for test",
        "5": " Added repetition of 'A' to test file for better performance.",
        "6": "Refactor code to use StringUtil.repeat instead of RandomStringUtil.randomAlpha for generating a string.",
        "7": "Stabilize the test",
        "8": "Stabilize the test"
    },
    {
        "diff": "diff --git a/OsmAnd/src/net/osmand/plus/activities/MapActivity.java b/OsmAnd/src/net/osmand/plus/activities/MapActivity.java\nindex d8464b3676..5842a706bd 100644\n--- a/OsmAnd/src/net/osmand/plus/activities/MapActivity.java\n+++ b/OsmAnd/src/net/osmand/plus/activities/MapActivity.java\n@@ -463,7 +463,7 @@ public class MapActivity extends AccessibleActivity implements\n //\t\t}\n \t\tfinal int newZoom = mapView.getZoom() + stp;\n \t\tif (newZoom > 22) {\n-\t\t\tAccessibleToast.makeText(this, \"Max zoom\", Toast.LENGTH_SHORT).show(); //$NON-NLS-1$\n+\t\t\tAccessibleToast.makeText(this, R.string.edit_tilesource_maxzoom, Toast.LENGTH_SHORT).show(); //$NON-NLS-1$\n \t\t\treturn;\n \t\t}\n \t\tmapView.getAnimatedDraggingThread().startZooming(newZoom, changeLocation);\n",
        "1": "Fix osmo title",
        "2": "Fix NPE in zoom",
        "3": " Changed zoom limit from 22 to 25 in MapActivity.",
        "4": "Change toast message for maximum zoom level in MapActivity",
        "5": " Update zoom limit message to use a resource string.",
        "6": "Fix redundant toString ( ) on a String object",
        "7": "Used string from resouces",
        "8": "Fixed a typo"
    },
    {
        "diff": "diff --git a/astrid/plugin-src/com/todoroo/astrid/reminders/ReengagementReceiver.java b/astrid/plugin-src/com/todoroo/astrid/reminders/ReengagementReceiver.java\nindex 68ef8d49b..306df88bf 100644\n--- a/astrid/plugin-src/com/todoroo/astrid/reminders/ReengagementReceiver.java\n+++ b/astrid/plugin-src/com/todoroo/astrid/reminders/ReengagementReceiver.java\n@@ -47,6 +47,9 @@ public class ReengagementReceiver extends BroadcastReceiver {\n \n     @Override\n     public void onReceive(Context context, Intent intent) {\n+        if (!Preferences.getBoolean(R.string.p_rmd_enabled, true))\n+            return;\n+\n         DependencyInjectionService.getInstance().inject(this);\n \n         int reengagementReminders = Preferences.getInt(ReengagementService.PREF_REENGAGEMENT_COUNT, 1);\n",
        "1": "Don't show reengagement reminders if reminders are disabled",
        "2": "Fix a bug where the notification is not set",
        "3": " Add check for reengagement reminders enabled preference before injecting dependencies.",
        "4": " Added check for reminder reengagement enablement and injection of DependencyInjectionService.",
        "5": "Back button should save tag changes instead of canceling",
        "6": "Add check for reminder enabled before processing reengagement",
        "7": "Added basic task bar between task label",
        "8": "Fixed bug where StackView should not be loaded"
    },
    {
        "diff": "diff --git a/platform/platform-impl/src/com/intellij/ui/BalloonImpl.java b/platform/platform-impl/src/com/intellij/ui/BalloonImpl.java\nindex fa78cb1..b081eb3 100644\n--- a/platform/platform-impl/src/com/intellij/ui/BalloonImpl.java\n+++ b/platform/platform-impl/src/com/intellij/ui/BalloonImpl.java\n@@ -38,6 +38,7 @@ import com.intellij.openapi.wm.impl.content.GraphicsConfig;\n import com.intellij.ui.awt.RelativePoint;\n import com.intellij.ui.components.panels.NonOpaquePanel;\n import com.intellij.ui.components.panels.Wrapper;\n+import com.intellij.ui.treeStructure.Tree;\n import com.intellij.util.Alarm;\n import com.intellij.util.IJSwingUtilities;\n import com.intellij.util.Range;\n",
        "1": "Add import for Tree class in BalloonImpl.java",
        "2": "remove all usages of com.intellij.util.ui.Tree",
        "3": "eliminate eclipse warnings",
        "4": "change DiagramElementManager API to support Java properties .",
        "5": " Added import statement for com.intellij.ui.treeStructure.Tree.",
        "6": "with deprecated logger",
        "7": "do not show empty - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -",
        "8": " Added import statement for Tree class"
    },
    {
        "diff": "diff --git a/subprojects/core/src/main/groovy/org/gradle/api/internal/changedetection/state/InMemoryTaskArtifactCache.java b/subprojects/core/src/main/groovy/org/gradle/api/internal/changedetection/state/InMemoryTaskArtifactCache.java\nindex 67f8ef9..350dcd4 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/api/internal/changedetection/state/InMemoryTaskArtifactCache.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/api/internal/changedetection/state/InMemoryTaskArtifactCache.java\n@@ -163,7 +163,7 @@ public class InMemoryTaskArtifactCache implements CacheDecorator {\n \n     private static class LoggingEvictionListener implements RemovalListener<Object, Object> {\n         private static Logger logger = Logging.getLogger(LoggingEvictionListener.class);\n-        private static final String EVICTION_MITIGATION_MESSAGE = \"\\nPerformance may suffer from in-memory cache misses. Increase max heap size of daemon process when applicable since cache max sizes are proportional to max heap size.\";\n+        private static final String EVICTION_MITIGATION_MESSAGE = \"\\nPerformance may suffer from in-memory cache misses. Increase max heap size of Gradle build process to reduce cache misses.\";\n         volatile int evictionCounter;\n         private final String cacheId;\n         private Cache<Object, Object> cache;\n",
        "1": "Tweaked log message.",
        "2": "Added space , description of location and context .",
        "3": "Fixed typo in the message message",
        "4": "Fix datetime name",
        "5": "Refactor InMemoryTaskArtifactCache to improve performance and reduce cache misses",
        "6": "Make fields final",
        "7": " Mitigate performance impact of in-memory cache misses by updating the eviction mitigation message to encourage increasing the max heap size of the Gradle build process.",
        "8": " Fixed issue with in-memory cache eviction mitigation message."
    },
    {
        "diff": "diff --git a/app/src/main/java/io/codetail/circualrevealsample/MainActivity.java b/app/src/main/java/io/codetail/circualrevealsample/MainActivity.java\nindex 4cc697a..c795595 100644\n--- a/app/src/main/java/io/codetail/circualrevealsample/MainActivity.java\n+++ b/app/src/main/java/io/codetail/circualrevealsample/MainActivity.java\n@@ -94,9 +94,9 @@ public class MainActivity extends ActionBarActivity{\n                 animator.setDuration(500);\n \n                 if(Animator.LOLLIPOP){\n-                    android.animation.ObjectAnimator a = (android.animation.ObjectAnimator)\n+                    android.animation.Animator a = (android.animation.Animator)\n                             animator.getNativeAnimator();\n-                    a.setAutoCancel(true);\n+                    //a.setAutoCancel(true);\n                 }else{\n                     ObjectAnimator a = (ObjectAnimator)\n                             animator.getSupportAnimator();\n",
        "1": "Fixes issue with setting auto cancel on ObjectAnimator in MainActivity.",
        "2": "Fix NPE when closing a animation",
        "3": " Added support for animator auto-cancellation in MainActivity.",
        "4": "Fix compilation error",
        "5": "Revert \" Fix ClassCastException in sample app \"",
        "6": "Fix ClassCastException in  sample app",
        "7": " Remove unused code and set auto-cancel for animator in MainActivity",
        "8": "remove dead code"
    },
    {
        "diff": "diff --git a/indexing-service/src/main/java/io/druid/indexing/common/task/NoopTask.java b/indexing-service/src/main/java/io/druid/indexing/common/task/NoopTask.java\nindex d45f663..b4de351 100644\n--- a/indexing-service/src/main/java/io/druid/indexing/common/task/NoopTask.java\n+++ b/indexing-service/src/main/java/io/druid/indexing/common/task/NoopTask.java\n@@ -35,9 +35,9 @@ import org.joda.time.DateTime;\n public class NoopTask extends AbstractTask\n {\n   private static final Logger log = new Logger(NoopTask.class);\n-  private static int defaultRunTime = 2500;\n-  private static int defaultIsReadyTime = 0;\n-  private static IsReadyResult defaultIsReadyResult = IsReadyResult.YES;\n+  private static final int defaultRunTime = 2500;\n+  private static final int defaultIsReadyTime = 0;\n+  private static final IsReadyResult defaultIsReadyResult = IsReadyResult.YES;\n \n   enum IsReadyResult\n   {\n@@ -139,4 +139,9 @@ public class NoopTask extends AbstractTask\n     log.info(\"Woke up!\");\n     return TaskStatus.success(getId());\n   }\n+\n+  public static NoopTask create()\n+  {\n+    return new NoopTask(null, 0, 0, null, null);\n+  }\n }\n",
        "1": "Refactor NoopTask class and add a static factory method",
        "2": "don ' t call pruneDeadThumbnailFiles unless the images table is empty",
        "3": "don ' t use static methods on static initializer .",
        "4": " Added default run time and is ready time to NoopTask, updated IsReadyResult to YES.",
        "5": "Fix things that should be static.",
        "6": " Updated NoopTask with new static final variables and added create method.",
        "7": "Fix NoopTask . NoopTask ( )",
        "8": "Verify AppWidget change changes"
    },
    {
        "diff": "diff --git a/server/sonar-server/src/main/java/org/sonar/server/plugins/ws/package-info.java b/server/sonar-server/src/main/java/org/sonar/server/plugins/ws/package-info.java\nindex 1267e73695..caeac4e3b4 100644\n--- a/server/sonar-server/src/main/java/org/sonar/server/plugins/ws/package-info.java\n+++ b/server/sonar-server/src/main/java/org/sonar/server/plugins/ws/package-info.java\n@@ -21,3 +21,4 @@\n package org.sonar.server.plugins.ws;\n \n import javax.annotation.ParametersAreNonnullByDefault;\n+\n",
        "1": " Added default import for Java 14",
        "2": " Added import statement for javax.annotation.ParametersAreNonnullByDefault; in package-info.java.",
        "3": "fix missing line return at EOF",
        "4": "Fix quality flaw",
        "5": "Remove extra copyright statements",
        "6": "add blank line",
        "7": "Add missing import statement in package-info.java",
        "8": "Fix quality flaw"
    },
    {
        "diff": "diff --git a/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java b/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\nindex 08f9cde..9d5e95b 100644\n--- a/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\n+++ b/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\n@@ -63,7 +63,7 @@ public class HystrixCommandTestWithCustomConcurrencyStrategy {\n         try {\n             HystrixCommand<Boolean> cmd2 = new TestCommand(true, true);\n             assertTrue(cmd2.execute()); //command execution throws with missing context\n-            fail(\"command should fail and throw (no fallback)\");\n+            //fail(\"command should fail and throw (no fallback)\");\n         } catch (IllegalStateException ise) {\n             //expected\n             ise.printStackTrace();\n@@ -71,7 +71,7 @@ public class HystrixCommandTestWithCustomConcurrencyStrategy {\n \n         try {\n             printRequestLog();\n-            fail(\"static access to HystrixRequestLog should fail and throw\");\n+            //fail(\"static access to HystrixRequestLog should fail and throw\");\n         } catch (IllegalStateException ise) {\n             //expected\n             ise.printStackTrace();\n@@ -142,7 +142,9 @@ public class HystrixCommandTestWithCustomConcurrencyStrategy {\n         assertTrue(cmd2.execute()); //command execution not affected by missing context\n         try {\n             printRequestLog();\n+            fail(\"static access to HystrixRequestLog fails\");\n         } catch (IllegalStateException ise) {\n+            //expected\n             ise.printStackTrace();\n         }\n     }\n",
        "1": "Fix failing tests in HystrixCommandTestWithCustomConcurrencyStrategy",
        "2": "Added some logging for timing and exception",
        "3": "Add unit test for behavior of HystrixRequestCache without a HystrixRequestContext",
        "4": "Fix test error",
        "5": "Added another failure condition",
        "6": "Fix another flaky test",
        "7": " Fix test cases to correctly handle missing context and static access to HystrixRequestLog.",
        "8": " Commit message: Fixes issue where static access to HystrixRequestLog fails without context."
    },
    {
        "diff": "diff --git a/src/java/voldemort/store/compress/CompressionStrategyFactory.java b/src/java/voldemort/store/compress/CompressionStrategyFactory.java\nindex 48c5a2d66..2371acb76 100644\n--- a/src/java/voldemort/store/compress/CompressionStrategyFactory.java\n+++ b/src/java/voldemort/store/compress/CompressionStrategyFactory.java\n@@ -11,6 +11,8 @@ public class CompressionStrategyFactory {\n             return new GzipCompressionStrategy();\n         if(compression.getType().equals(\"lzf\"))\n             return new LzfCompressionStrategy();\n+        if(compression.getType().equals(\"snappy\"))\n+            return new SnappyCompressionStrategy();\n         throw new IllegalArgumentException(\"Unsupported compression algorithm: \"\n                                            + compression.getType());\n     }\ndiff --git a/test/unit/voldemort/store/compress/CompressingStoreTest.java b/test/unit/voldemort/store/compress/CompressingStoreTest.java\nindex c95e5a404..d6bb0d0da 100644\n--- a/test/unit/voldemort/store/compress/CompressingStoreTest.java\n+++ b/test/unit/voldemort/store/compress/CompressingStoreTest.java\n@@ -38,7 +38,7 @@ public class CompressingStoreTest extends AbstractByteArrayStoreTest {\n     @Parameters\n     public static Collection<Object[]> configs() {\n         return Arrays.asList(new Object[][] { { true, \"gzip\" }, { false, \"gzip\" }, { true, \"lzf\" },\n-                { false, \"lzf\" } });\n+                { false, \"lzf\" }, { true, \"snappy\" }, { false, \"snappy\" } });\n     }\n \n     @Override\n",
        "1": "Adding the check for single type on the server .",
        "2": "Use correct HeadFinder in parser demo .",
        "3": " Add support for Snappy compression algorithm.",
        "4": " Added new compression strategy: SnappyCompressionStrategy",
        "5": "Add snappy to CompressionStrategyFactory and CompressingStoreTest.",
        "6": "Fix NPE in CompressionStrategyFactory",
        "7": "Add support for Snappy compression strategy",
        "8": "Trim invalid type names ."
    },
    {
        "diff": "diff --git a/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/ClientEncodingFilter.java b/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/ClientEncodingFilter.java\nindex 095d6c6..332c0fb 100644\n--- a/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/ClientEncodingFilter.java\n+++ b/providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/ClientEncodingFilter.java\n@@ -34,7 +34,7 @@ public final class ClientEncodingFilter implements EncodingFilter {\n     public boolean applyEncoding(HttpHeader httpPacket) {\n \n        httpPacket.addHeader(Header.AcceptEncoding, \"gzip\");\n-       return true;\n+       return false;\n \n     }\n \n",
        "1": "Don't apply outbound encodings.",
        "2": "Change ClientEncodingFilter to not apply gzip encoding.",
        "3": "Fix infinite loop in RecipeSorter",
        "4": "Fix infinite recursion",
        "5": " Fixed ClientEncodingFilter to correctly handle encoding by returning false instead of true",
        "6": "Fix test failure .",
        "7": " Added support for gzip encoding in ClientEncodingFilter",
        "8": "Fix a bug where the ClientEncodingFilter was not be used"
    },
    {
        "diff": "diff --git a/osgi/integration/web/src/main/java/org/jboss/as/osgi/web/WebContextLifecycleInterceptor.java b/osgi/integration/web/src/main/java/org/jboss/as/osgi/web/WebContextLifecycleInterceptor.java\nindex 9af60cc1c2..b1c2644386 100644\n--- a/osgi/integration/web/src/main/java/org/jboss/as/osgi/web/WebContextLifecycleInterceptor.java\n+++ b/osgi/integration/web/src/main/java/org/jboss/as/osgi/web/WebContextLifecycleInterceptor.java\n@@ -97,17 +97,17 @@ class WebContextLifecycleInterceptor extends AbstractLifecycleInterceptor implem\n             switch (state) {\n                 case Bundle.ACTIVE:\n                     try {\n-                        injectBundleContext(activator.getServletContext(), bundle.getBundleContext());\n                         if (!activator.start(30, TimeUnit.SECONDS)) {\n                             throw new LifecycleInterceptorException(OSGiMessages.MESSAGES.startContextFailed());\n                         }\n+                        injectBundleContext(activator.getServletContext(), bundle.getBundleContext());\n                     } catch (TimeoutException ex) {\n                         throw new LifecycleInterceptorException(ex.getMessage(), ex);\n                     }\n                     break;\n                 case Bundle.RESOLVED:\n-                    activator.stop(30, TimeUnit.SECONDS);\n                     uninjectBundleContext(activator.getServletContext());\n+                    activator.stop(30, TimeUnit.SECONDS);\n                     break;\n             }\n         }\n",
        "1": "Fix bug in WebContextLifecycleInterceptor",
        "2": "Fix log message",
        "3": "[ cli ] added VBO BY .",
        "4": "Release all resources from disconnect regardless of IOException",
        "5": "Refactor WebContextLifecycleInterceptor class to improve code readability and performance.",
        "6": " Fixed bug in WebContextLifecycleInterceptor to properly handle bundle lifecycle events",
        "7": "Don't get the servlet context till after the deployment is started",
        "8": " Modified WebContextLifecycleInterceptor to use try-catch block for start and stop operations."
    },
    {
        "diff": "diff --git a/components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteTest.java b/components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteTest.java\nindex aff55c1393..3fa1e7cfd7 100644\n--- a/components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteTest.java\n+++ b/components/camel-servlet/src/test/java/org/apache/camel/component/servlet/HttpClientRouteTest.java\n@@ -28,6 +28,7 @@ import com.meterware.httpunit.WebResponse;\n import com.meterware.servletunit.ServletUnitClient;\n import org.apache.camel.Exchange;\n import org.apache.camel.FailedToCreateProducerException;\n+import org.apache.camel.FailedToCreateRouteException;\n import org.apache.camel.Processor;\n import org.apache.camel.builder.RouteBuilder;\n import org.junit.Test;\n@@ -121,9 +122,9 @@ public class HttpClientRouteTest extends ServletCamelRouterTestSupport {\n                 }\n             });\n             fail(\"Excepts exception here\");\n-        } catch (Exception ex) {\n-            assertTrue(\"Get a wrong exception.\", ex instanceof FailedToCreateProducerException);\n-            assertTrue(\"Get a wrong cause of exception.\", ex.getCause() instanceof UnsupportedOperationException);\n+        } catch (FailedToCreateRouteException ex) {\n+            assertTrue(\"Get a wrong exception.\", ex.getCause() instanceof FailedToCreateProducerException);\n+            assertTrue(\"Get a wrong cause of exception.\", ex.getCause().getCause() instanceof UnsupportedOperationException);\n         }\n     }\n \n",
        "1": "Fix exception handling in HttpClientRouteTest",
        "2": " Fixed exception handling for FailedToCreateRouteException in HttpClientRouteTest",
        "3": "Fixed test after the big osgi servers error",
        "4": "Fixed unit tests .",
        "5": " Add import statement for FailedToCreateRouteException and update the catch block to handle this exception.",
        "6": "Avoid starting services to soon during CamelContext startup, that can trigger circular dependencies issue with Spring and similar IoC frameworks.",
        "7": "Fix test error",
        "8": "Fixed unit tests"
    },
    {
        "diff": "diff --git a/platform/platform-api/src/com/intellij/execution/configurations/GeneralCommandLine.java b/platform/platform-api/src/com/intellij/execution/configurations/GeneralCommandLine.java\nindex 9012cb8..5ef3884 100644\n--- a/platform/platform-api/src/com/intellij/execution/configurations/GeneralCommandLine.java\n+++ b/platform/platform-api/src/com/intellij/execution/configurations/GeneralCommandLine.java\n@@ -20,6 +20,7 @@ import com.intellij.execution.process.ProcessNotCreatedException;\n import com.intellij.ide.IdeBundle;\n import com.intellij.openapi.util.SystemInfo;\n import com.intellij.openapi.vfs.CharsetToolkit;\n+import com.intellij.util.containers.HashMap;\n import org.jetbrains.annotations.NonNls;\n import org.jetbrains.annotations.NotNull;\n import org.jetbrains.annotations.Nullable;\n@@ -37,6 +38,19 @@ public class GeneralCommandLine {\n   private ParametersList myProgramParams = new ParametersList();\n   private Charset myCharset = CharsetToolkit.getDefaultSystemCharset();\n \n+  /**\n+   * Appends a value to the end os a path-like environment variable, using system-dependent path separator.\n+   * @param source path-like string to append to\n+   * @param value what to append\n+   * @return modified path-like string\n+   */\n+  @NotNull\n+  public static String appendToPathEnvVar(@Nullable String source, @NotNull String value) {\n+    if (source != null) source = value + File.pathSeparator + source;\n+    else source = value;\n+    return source;\n+  }\n+\n   public void setExePath(@NonNls final String exePath) {\n     myExePath = exePath.trim();\n   }\n",
        "1": "add appendToPathEnvVar ( ) method",
        "2": "PostgreSQL has a duplicate class to see if it was being available",
        "3": "add getVcsRootFor ( VirtualFile )",
        "4": " Modified GeneralCommandLine to add a new method appendToPathEnvVar for appending values to path-like environment variables.",
        "5": " Added method `appendToPathEnvVar()` to GeneralCommandLine class for appending a value to the end of a path-like environment variable using system-dependent path separator.",
        "6": "Added a helper method for path-like env variables",
        "7": "do not release LST in the middle of rollback",
        "8": "Add method to append value to path-like environment variable in GeneralCommandLine class."
    },
    {
        "diff": "diff --git a/media/java/android/media/tv/TvInputService.java b/media/java/android/media/tv/TvInputService.java\nindex 4b84090..d480696 100644\n--- a/media/java/android/media/tv/TvInputService.java\n+++ b/media/java/android/media/tv/TvInputService.java\n@@ -933,6 +933,10 @@ public abstract class TvInputService extends Service {\n          * Returns {@link TvInputManager#TIME_SHIFT_INVALID_TIME} if the position is unknown at the\n          * moment.\n          *\n+         * <p>Note that the current playback position should be equal to or greater than the start\n+         * playback position reported by {@link #onTimeShiftGetStartPosition}. Failure to notifying\n+         * the correct current position might lead to bad user experience.\n+         *\n          * @see #onTimeShiftResume\n          * @see #onTimeShiftPause\n          * @see #onTimeShiftSeekTo\n@@ -1396,6 +1400,12 @@ public abstract class TvInputService extends Service {\n                     notifyTimeShiftStartPositionChanged(startPositionMs);\n                 }\n                 long currentPositionMs = onTimeShiftGetCurrentPosition();\n+                if (currentPositionMs < mStartPositionMs) {\n+                    Log.w(TAG, \"Current position (\" + currentPositionMs + \") cannot be earlier than\"\n+                            + \" start position (\" + mStartPositionMs + \"). Reset to the start \"\n+                            + \"position.\");\n+                    currentPositionMs = mStartPositionMs;\n+                }\n                 if (mCurrentPositionMs != currentPositionMs) {\n                     mCurrentPositionMs = currentPositionMs;\n                     notifyTimeShiftCurrentPositionChanged(currentPositionMs);\n",
        "1": "Add sanitization code for the current position",
        "2": "Add paragraph tags to MediaProjection docs",
        "3": " Added check for current position being earlier than start position, and resetting to start position when necessary.",
        "4": " Fix incorrect current position reporting in TvInputService to prevent bad user experience.",
        "5": "Fix issue with incorrect current position in TvInputService.",
        "6": "Add extra logging adjustment output",
        "7": "Fix a bug where the start position is not be start",
        "8": "Add some checks so that the user can not have anyway ."
    },
    {
        "diff": "diff --git a/camel-core/src/main/java/org/apache/camel/RecipientList.java b/camel-core/src/main/java/org/apache/camel/RecipientList.java\nindex 90f29374b8..4d0cced8a1 100644\n--- a/camel-core/src/main/java/org/apache/camel/RecipientList.java\n+++ b/camel-core/src/main/java/org/apache/camel/RecipientList.java\n@@ -47,6 +47,7 @@ public @interface RecipientList {\n     String delimiter() default \",\";\n     boolean parallelProcessing() default false;\n     boolean stopOnException() default false;\n+    boolean ignoreInvalidEndpoints() default false;\n     String strategyRef() default \"\";\n     String executorServiceRef() default \"\";\n }\n\\ No newline at end of file\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java b/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\nindex 0bfd125faa..30c403cffb 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\n@@ -84,6 +84,7 @@ public class MethodInfo {\n \n             recipientList = new RecipientList(camelContext, annotation.delimiter());\n             recipientList.setStopOnException(annotation.stopOnException());\n+            recipientList.setIgnoreInvalidEndpoints(annotation.ignoreInvalidEndpoints());\n             recipientList.setParallelProcessing(annotation.parallelProcessing());\n \n             if (ObjectHelper.isNotEmpty(annotation.executorServiceRef())) {\n",
        "1": "Added new option on @RecipientList annotation.",
        "2": " Add ignoreInvalidEndpoints option to RecipientList and set it to false by default.",
        "3": "Add ignoreInvalidEndpoints feature to RecipientList annotation",
        "4": " Added ignoreInvalidEndpoints method to RecipientList interface",
        "5": "fixed fragile test",
        "6": "Fixed unit test",
        "7": "Fixing concurrency issue ( hopefully )",
        "8": "Fix quality flaws"
    },
    {
        "diff": "diff --git a/src/com/google/javascript/jscomp/CompilerOptionsPreprocessor.java b/src/com/google/javascript/jscomp/CompilerOptionsPreprocessor.java\nindex 04b1733..85d92a9 100644\n--- a/src/com/google/javascript/jscomp/CompilerOptionsPreprocessor.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptionsPreprocessor.java\n@@ -43,8 +43,8 @@ final class CompilerOptionsPreprocessor {\n     if (options.removeUnusedPrototypePropertiesInExterns\n         && !options.removeUnusedPrototypeProperties) {\n       throw new InvalidOptionsException(\n-          \"remove_unused_prototype_properties_in_externs requires \"\n-          + \"remove_unused_prototype_properties to be turned on.\");\n+          \"remove_unused_prototype_props_in_externs requires \"\n+          + \"remove_unused_prototype_props to be turned on.\");\n     }\n \n     if (options.getLanguageOut().isEs6OrHigher()\n",
        "1": "Fix mis-spelled flag name in error message.",
        "2": "Fix typo in SimpleWebServer . java",
        "3": "Correct the property description for new feedback generation .",
        "4": "Fix a typo in the comment message",
        "5": " Modified CompilerOptionsPreprocessor to require 'remove_unused_prototype_props' to be turned on for 'remove_unused_prototype_properties_in_externs' to work.",
        "6": " Fix inconsistent prototype property removal options",
        "7": "Fix a typo in error message .",
        "8": "Fix typo in error message in CompilerOptionsPreprocessor"
    },
    {
        "diff": "diff --git a/java/org/apache/catalina/core/ApplicationPushBuilder.java b/java/org/apache/catalina/core/ApplicationPushBuilder.java\nindex fd77ad855..a7b3c5cfe 100644\n--- a/java/org/apache/catalina/core/ApplicationPushBuilder.java\n+++ b/java/org/apache/catalina/core/ApplicationPushBuilder.java\n@@ -19,7 +19,6 @@ package org.apache.catalina.core;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Enumeration;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -31,6 +30,7 @@ import javax.servlet.http.PushBuilder;\n \n import org.apache.catalina.connector.Request;\n import org.apache.coyote.ActionCode;\n+import org.apache.tomcat.util.collections.CaseInsensitiveKeyMap;\n import org.apache.tomcat.util.res.StringManager;\n \n public class ApplicationPushBuilder implements PushBuilder {\n@@ -41,7 +41,7 @@ public class ApplicationPushBuilder implements PushBuilder {\n     private final org.apache.coyote.Request coyoteRequest;\n \n     private String path;\n-    private Map<String,List<String>> headers = new HashMap<>();\n+    private Map<String,List<String>> headers = new CaseInsensitiveKeyMap<>();\n \n     public ApplicationPushBuilder(HttpServletRequest request) {\n         baseRequest = request;\n",
        "1": "Make PushBuilder's handling of HTTP headers case insensitive",
        "2": "Fix a bug in ApplicationPushBuilder .",
        "3": "Use SUITE and String to use getReadStorageEndPoints .",
        "4": "Refactor ApplicationPushBuilder to use CaseInsensitiveKeyMap for headers storage.",
        "5": " Fix issue with import statement and replace HashMap with CaseInsensitiveKeyMap in ApplicationPushBuilder.",
        "6": " Added new method to handle case insensitive headers in ApplicationPushBuilder",
        "7": "Replace HashMap with SimpleArrayMap",
        "8": "Retain the order the URLs were added in when calculating the result for getURLs ( )"
    },
    {
        "diff": "diff --git a/platform/platform-api/src/com/intellij/ui/PaintingParent.java b/platform/platform-api/src/com/intellij/ui/PaintingParent.java\nindex a49f123..170acdb 100644\n--- a/platform/platform-api/src/com/intellij/ui/PaintingParent.java\n+++ b/platform/platform-api/src/com/intellij/ui/PaintingParent.java\n@@ -17,23 +17,42 @@ package com.intellij.ui;\n \n import org.jetbrains.annotations.Nullable;\n \n+import javax.swing.*;\n import java.awt.*;\n \n /**\n- * Used for deferred re-painting (i.e. for deferred icons). As a paint() method is invoked through the normal AWT painting cycle, deferred painting\n- * of children may be queued. It means that actual data used for painting is pushed for calculation and, as it gets ready, there is need for repaint.\n- * The target component for further repaint() is either the component that was originally exposed to painting or, if it's no longer showing (in case of a flyweight\n+ * Used for deferred re-painting (i.e. for deferred icons). As a paint() method\n+ * is invoked through the normal AWT painting cycle, deferred painting of\n+ * children may be queued. It means that actual data used for painting is pushed\n+ * for calculation and, as it gets ready, there is need for repaint.\n+ *\n+ * The target component for further repaint() is either the component that was\n+ * originally exposed to painting or, if it's no longer showing (in case of a flyweight\n  * renderer) -- the first component up in the hierarchy that implements PaintingParent.\n  *\n+ * @author Kirill Kalishev\n+ * @author Konstantin Bulenkov\n  */\n public interface PaintingParent {\n \n   /**\n    * Returns rectangle of a child component for further repainting\n-   * @param c\n-   * @return a rectange, if null -- the whole component will be repainted\n+   * @param c a component\n+   * @return a rectangle, if null -- the whole component will be repainted\n    */\n   @Nullable\n   Rectangle getChildRec(Component c);\n \n+  class Wrapper extends JPanel implements PaintingParent {\n+    public Wrapper(Component component) {\n+      super(new BorderLayout(0,0));\n+      add(component);\n+    }\n+\n+    @Override\n+    public Rectangle getChildRec(Component c) {\n+      return null;\n+    }\n+  }\n+\n }\n",
        "1": "Refactor PaintingParent interface and add Wrapper class.",
        "2": "add PaintingParent component to PaintingParent",
        "3": " Added support for deferred repainting of children in PaintingParent interface and created a Wrapper class that implements PaintingParent and provides a simple way to repaint a child component.",
        "4": "Fix the Javadoc",
        "5": " Changed method signature for interface PaintingParent to include `Rectangle getChildRec(Component c)` method.",
        "6": "Add alpha getter to the code",
        "7": "make a wrapper",
        "8": "add defaults for \" set and missing tabs \""
    },
    {
        "diff": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/api/StateHandlingStatementOperations.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/api/StateHandlingStatementOperations.java\nindex 4c66139..ca45b33 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/api/StateHandlingStatementOperations.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/api/StateHandlingStatementOperations.java\n@@ -370,7 +370,8 @@ public class StateHandlingStatementOperations implements\n         try\n         {\n             IndexDescriptor index = new IndexDescriptor( labelId, propertyKeyId );\n-            if ( state.txState().constraintIndexDoUnRemove( index ) ) // ..., DROP, *CREATE*\n+            if ( state.hasTxStateWithChanges() &&\n+                 state.txState().constraintIndexDoUnRemove( index ) ) // ..., DROP, *CREATE*\n             { // creation is undoing a drop\n                 if ( !state.txState().constraintDoUnRemove( constraint ) ) // CREATE, ..., DROP, *CREATE*\n                 { // ... the drop we are undoing did itself undo a prior create...\ndiff --git a/community/kernel/src/test/java/org/neo4j/kernel/impl/api/state/StateHandlingStatementOperationsTest.java b/community/kernel/src/test/java/org/neo4j/kernel/impl/api/state/StateHandlingStatementOperationsTest.java\nindex 80b3395..eb16df2 100644\n--- a/community/kernel/src/test/java/org/neo4j/kernel/impl/api/state/StateHandlingStatementOperationsTest.java\n+++ b/community/kernel/src/test/java/org/neo4j/kernel/impl/api/state/StateHandlingStatementOperationsTest.java\n@@ -97,6 +97,7 @@ public class StateHandlingStatementOperationsTest\n         UniquenessConstraint constraint = new UniquenessConstraint( 10, 66 );\n         TransactionState txState = mock( TransactionState.class );\n         when( txState.nodesWithLabelChanged( anyInt() ) ).thenReturn( DiffSets.<Long>emptyDiffSets() );\n+        when( txState.hasChanges() ).thenReturn( true );\n         KernelStatement state = mockedState( txState );\n         when( inner.constraintsGetForLabelAndPropertyKey( 10, 66 ) )\n             .thenAnswer( asAnswer( asList( constraint ) ) );\n",
        "1": "Fix NPE in StateHandlingStatementOperationsTest",
        "2": "Add check \"hasTxStateWithChanges\" when creating an unique constraint",
        "3": "Updated getFreeSpaceAvailable ( ) method",
        "4": " Added check for txState.hasChanges() before calling constraintIndexDoUnRemove(index)",
        "5": "Add check for transaction state changes in StateHandlingStatementOperations",
        "6": " Added constraint undo logic for index removal",
        "7": "Fixed unit test .",
        "8": "During recovery , don ' t activate indexes ."
    },
    {
        "diff": "diff --git a/hawk/src/main/java/com/orhanobut/hawk/HawkBuilder.java b/hawk/src/main/java/com/orhanobut/hawk/HawkBuilder.java\nindex 1755159..66564c3 100644\n--- a/hawk/src/main/java/com/orhanobut/hawk/HawkBuilder.java\n+++ b/hawk/src/main/java/com/orhanobut/hawk/HawkBuilder.java\n@@ -41,6 +41,11 @@ public class HawkBuilder {\n     return this;\n   }\n \n+  public HawkBuilder setLogInterceptor(LogInterceptor logInterceptor) {\n+    this.logInterceptor = logInterceptor;\n+    return this;\n+  }\n+\n   HawkBuilder setConverter(Converter converter) {\n     this.converter = converter;\n     return this;\n@@ -51,11 +56,6 @@ public class HawkBuilder {\n     return this;\n   }\n \n-  HawkBuilder interceptLog(LogInterceptor logInterceptor) {\n-    this.logInterceptor = logInterceptor;\n-    return this;\n-  }\n-\n   LogInterceptor getLogInterceptor() {\n     if (logInterceptor == null) {\n       logInterceptor = new LogInterceptor() {\n",
        "1": "add option to add stickyFooter",
        "2": "Add transparency to Animation to be using super ( ) calls",
        "3": "Make LogInterceptor public",
        "4": " Adds a new method `setLogInterceptor` to the `HawkBuilder` class, allowing the configuration of a log interceptor.",
        "5": " Added setLogInterceptor method to HawkBuilder class",
        "6": "Add method setLogInterceptor to HawkBuilder",
        "7": "Allow the callback to be the service - annotation",
        "8": "Add setLogInterceptor method"
    },
    {
        "diff": "diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java\nindex 70941b6..9e8a25c 100644\n--- a/core/java/com/android/internal/widget/LockPatternUtils.java\n+++ b/core/java/com/android/internal/widget/LockPatternUtils.java\n@@ -904,23 +904,6 @@ public class LockPatternUtils {\n     }\n \n     /**\n-     * Gets whether the device is encrypted.\n-     *\n-     * @return Whether the device is encrypted.\n-     */\n-    public static boolean isDeviceEncrypted() {\n-        IMountService mountService = IMountService.Stub.asInterface(\n-                ServiceManager.getService(\"mount\"));\n-        try {\n-            return mountService.getEncryptionState() != IMountService.ENCRYPTION_STATE_NONE\n-                    && mountService.getPasswordType() != StorageManager.CRYPT_TYPE_DEFAULT;\n-        } catch (RemoteException re) {\n-            Log.e(TAG, \"Error getting encryption state\", re);\n-        }\n-        return true;\n-    }\n-\n-    /**\n      * Determine if the device supports encryption, even if it's set to default. This\n      * differs from isDeviceEncrypted() in that it returns true even if the device is\n      * encrypted with the default password.\n",
        "1": "Remove unused method newBleedingFunction .",
        "2": "Add APIs to allow detection of encryption type",
        "3": " Added support for determining if device is encrypted with default password.",
        "4": "Move legacy full disk encryption code to Settings.",
        "5": "Remove unused code",
        "6": "Remove unused method isDeviceEncrypted() from LockPatternUtils class.",
        "7": "remove obsolete code",
        "8": " Added support for determining if device supports encryption, even if set to default"
    }
]